{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../../../shared/directives/highlight.directive\";\nimport * as i2 from \"./basic-example-source.component\";\nimport * as i3 from \"./advanced-example-filters.component\";\nexport let FilterExamplesComponent = /*#__PURE__*/(() => {\n  class FilterExamplesComponent {\n    constructor() {\n      this.snippets = {\n        sourceRequire: require('raw-loader!../snippets/source-require.md').default,\n        createSource: require('raw-loader!../snippets/create-source.md').default,\n        sourceTemplate: require('raw-loader!../snippets/source-template.md').default,\n        search: require('raw-loader!../snippets/search.md').default,\n        searchTable: require('raw-loader!../snippets/search-table.md').default,\n        sourceFull: require('raw-loader!../snippets/source-full.md').default,\n        hideFilters: require('raw-loader!../snippets/hide-filters.md').default\n      };\n    }\n\n  }\n\n  FilterExamplesComponent.ɵfac = function FilterExamplesComponent_Factory(t) {\n    return new (t || FilterExamplesComponent)();\n  };\n\n  FilterExamplesComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: FilterExamplesComponent,\n    selectors: [[\"filter-examples\"]],\n    decls: 101,\n    vars: 7,\n    consts: [[\"id\", \"separate-filter\", \"href\", \"#separate-filter\", \"aria-hidden\", \"true\", 1, \"anchor\"], [\"aria-hidden\", \"true\", 1, \"octicon\", \"octicon-link\"], [\"id\", \"data-source\", \"href\", \"#data-source\", \"aria-hidden\", \"true\", 1, \"anchor\"], [\"highlight\", \"\", 1, \"typescript\"], [1, \"with-source\"], [\"href\", \"https://github.com/akveo/ng2-smart-table/blob/master/projects/demo/src/app/pages/examples/filter/basic-example-source.component.ts\", \"target\", \"_blank\", 1, \"source\"], [\"id\", \"filters\", \"href\", \"#filters\", \"aria-hidden\", \"true\", 1, \"anchor\"], [\"href\", \"https://github.com/akveo/ng2-smart-table/blob/master/projects/demo/src/app/pages/examples/filter/advanced-example-filters.component.ts\", \"target\", \"_blank\", 1, \"source\"]],\n    template: function FilterExamplesComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"h2\");\n        i0.ɵɵtext(1, \"Customized filters examples\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(2, \"h3\")(3, \"a\", 0);\n        i0.ɵɵelement(4, \"span\", 1);\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(5, \"Standalone Filter Example\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(6, \"p\");\n        i0.ɵɵtext(7, \" Say you don't need to have a filter field in the each table column or the requirements says that search field should be placed outside of the table?\");\n        i0.ɵɵelement(8, \"br\");\n        i0.ɵɵtext(9, \" Fortunately this is super easy to achieve, to do this we need to slightly modify our basic component example.\\n\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(10, \"h4\")(11, \"a\", 2);\n        i0.ɵɵelement(12, \"span\", 1);\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(13, \"Data Source\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(14, \"p\");\n        i0.ɵɵtext(15, \" First thing you need to know is that all the data operations against the table \");\n        i0.ɵɵelementStart(16, \"i\");\n        i0.ɵɵtext(17, \"must\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(18, \" be done using the \");\n        i0.ɵɵelementStart(19, \"strong\");\n        i0.ɵɵtext(20, \"DataSource\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(21, \" table property. DataSource is an abstraction around your data which allows you easily modify the table data or subscribe to events to modify the table behaviour.\\n\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(22, \"p\");\n        i0.ɵɵtext(23, \" To access the DataSource we either can take it from the table or pass it instead of our \");\n        i0.ɵɵelementStart(24, \"i\");\n        i0.ɵɵtext(25, \"data array\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(26, \". Let's do the second option as it requires less code and is more demonstrative. Let's import the DataSource class by modifying the import statement:\\n\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(27, \"pre\");\n        i0.ɵɵtext(28, \"  \");\n        i0.ɵɵelementStart(29, \"code\", 3);\n        i0.ɵɵtext(30);\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(31, \"\\n\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(32, \"p\");\n        i0.ɵɵtext(33, \" Note that the import now contains a \");\n        i0.ɵɵelementStart(34, \"strong\");\n        i0.ɵɵtext(35, \"LocalDataSource\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(36, \" class (the word \");\n        i0.ɵɵelementStart(37, \"i\");\n        i0.ɵɵtext(38, \"Local\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(39, \" here means that the data is processed locally in a browser, not on the server side).\");\n        i0.ɵɵelement(40, \"br\");\n        i0.ɵɵtext(41, \" Then let's create a DataSource instance and pass our data array into it as a constructor parameter:\\n\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(42, \"pre\");\n        i0.ɵɵtext(43, \"  \");\n        i0.ɵɵelementStart(44, \"code\", 3);\n        i0.ɵɵtext(45);\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(46, \"\\n\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(47, \"p\");\n        i0.ɵɵtext(48, \" Now let's pass the source to the table instead of the data array:\\n\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(49, \"pre\");\n        i0.ɵɵtext(50, \"  \");\n        i0.ɵɵelementStart(51, \"code\", 3);\n        i0.ɵɵtext(52);\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(53, \"\\n\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(54, \"p\");\n        i0.ɵɵtext(55, \" At this point if you look at the result there will be no difference comparing to the first example. Basically if you pass an array to the table component first thing it will do is wrap LocalDataSource object around your array as we did here manually.\");\n        i0.ɵɵelement(56, \"br\");\n        i0.ɵɵtext(57, \" Now, having the DataSource we basically could change the table data in any way we need to - filter it, sort, paginate to some page, create/delete/modify the rows. In our example we need to be able to filter the data outside of the table, firstly let's add a search filed to the template with a listener:\\n\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(58, \"pre\");\n        i0.ɵɵtext(59, \"  \");\n        i0.ɵɵelementStart(60, \"code\", 3);\n        i0.ɵɵtext(61);\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(62, \"\\n\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(63, \"p\");\n        i0.ɵɵtext(64, \" And the listener code which asks the DataSource to filter the data:\\n\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(65, \"pre\");\n        i0.ɵɵtext(66, \"  \");\n        i0.ɵɵelementStart(67, \"code\", 3);\n        i0.ɵɵtext(68);\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(69, \"\\n\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(70, \"p\");\n        i0.ɵɵtext(71, \" Last thing, let's hide the default table filters to not conflict with our standalone one:\\n\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(72, \"pre\");\n        i0.ɵɵtext(73, \"  \");\n        i0.ɵɵelementStart(74, \"code\", 3);\n        i0.ɵɵtext(75);\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(76, \"\\n\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(77, \"p\");\n        i0.ɵɵtext(78, \" And done! Now the table has a standalone search field:\\n\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(79, \"div\");\n        i0.ɵɵelement(80, \"basic-example-source\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(81, \"p\");\n        i0.ɵɵtext(82, \" Same way you can modify the data of the table, for example by adding a row from a third party form or listening to some external event. Here's a full component code:\\n\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(83, \"pre\", 4);\n        i0.ɵɵtext(84, \"  \");\n        i0.ɵɵelementStart(85, \"a\", 5);\n        i0.ɵɵtext(86, \"Demo Source\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(87, \"\\n  \");\n        i0.ɵɵelementStart(88, \"code\", 3);\n        i0.ɵɵtext(89);\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(90, \"\\n\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(91, \"h3\")(92, \"a\", 6);\n        i0.ɵɵelement(93, \"span\", 1);\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(94, \"Checkbox, Select and Completer filter types\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(95, \"p\");\n        i0.ɵɵtext(96, \" An example on how to use the built-in column filter types:\\n\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(97, \"div\", 4)(98, \"a\", 7);\n        i0.ɵɵtext(99, \"Demo Source\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(100, \"advanced-example-filters\");\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(30);\n        i0.ɵɵtextInterpolate(ctx.snippets.sourceRequire);\n        i0.ɵɵadvance(15);\n        i0.ɵɵtextInterpolate(ctx.snippets.createSource);\n        i0.ɵɵadvance(7);\n        i0.ɵɵtextInterpolate(ctx.snippets.sourceTemplate);\n        i0.ɵɵadvance(9);\n        i0.ɵɵtextInterpolate(ctx.snippets.search);\n        i0.ɵɵadvance(7);\n        i0.ɵɵtextInterpolate(ctx.snippets.searchTable);\n        i0.ɵɵadvance(7);\n        i0.ɵɵtextInterpolate(ctx.snippets.hideFilters);\n        i0.ɵɵadvance(14);\n        i0.ɵɵtextInterpolate(ctx.snippets.sourceFull);\n      }\n    },\n    directives: [i1.HighlightCodeDirective, i2.BasicExampleSourceComponent, i3.AdvancedExampleFiltersComponent],\n    encapsulation: 2\n  });\n  return FilterExamplesComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}