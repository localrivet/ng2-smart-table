{"ast":null,"code":"import { SimpleChanges } from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { debounceTime, distinctUntilChanged } from 'rxjs/operators';\nimport { DefaultFilter } from './default-filter';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"@angular/common\";\nexport let InputFilterComponent = /*#__PURE__*/(() => {\n  class InputFilterComponent extends DefaultFilter {\n    constructor() {\n      super();\n      this.inputControl = new FormControl();\n    }\n\n    ngOnInit() {\n      if (this.query) {\n        this.inputControl.setValue(this.query);\n      }\n\n      this.inputControl.valueChanges.pipe(distinctUntilChanged(), debounceTime(this.delay)).subscribe(value => {\n        this.query = this.inputControl.value;\n        this.setFilter();\n      });\n    }\n\n    ngOnChanges(changes) {\n      if (changes.query) {\n        this.inputControl.setValue(this.query);\n      }\n    }\n\n  }\n\n  InputFilterComponent.ɵfac = function InputFilterComponent_Factory(t) {\n    return new (t || InputFilterComponent)();\n  };\n\n  InputFilterComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: InputFilterComponent,\n    selectors: [[\"input-filter\"]],\n    features: [i0.ɵɵInheritDefinitionFeature, i0.ɵɵNgOnChangesFeature],\n    decls: 1,\n    vars: 3,\n    consts: [[\"type\", \"text\", 1, \"form-control\", 3, \"ngClass\", \"formControl\", \"placeholder\"]],\n    template: function InputFilterComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelement(0, \"input\", 0);\n      }\n\n      if (rf & 2) {\n        i0.ɵɵpropertyInterpolate(\"placeholder\", ctx.column.title);\n        i0.ɵɵproperty(\"ngClass\", ctx.inputClass)(\"formControl\", ctx.inputControl);\n      }\n    },\n    directives: [i1.DefaultValueAccessor, i2.NgClass, i1.NgControlStatus, i1.FormControlDirective],\n    encapsulation: 2\n  });\n  return InputFilterComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}