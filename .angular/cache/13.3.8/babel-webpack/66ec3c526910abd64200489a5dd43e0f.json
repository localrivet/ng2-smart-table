{"ast":null,"code":"import { cloneDeep } from 'lodash';\n/**\n * Extending object that entered in first argument.\n *\n * Returns extended object or false if have no target object or incorrect type.\n *\n * If you wish to clone source object (without modify it), just use empty new\n * object as first argument, like this:\n *   deepExtend({}, yourObj_1, [yourObj_N]);\n */\n\nexport const deepExtend = function (...objects) {\n  if (arguments.length < 1 || typeof arguments[0] !== 'object') {\n    return false;\n  }\n\n  if (arguments.length < 2) {\n    return arguments[0];\n  }\n\n  const target = arguments[0]; // convert arguments to array and cut off target object\n\n  const args = Array.prototype.slice.call(arguments, 1);\n  let val, src;\n  args.forEach(obj => {\n    // skip argument if it is array or isn't object\n    if (typeof obj !== 'object' || Array.isArray(obj)) {\n      return;\n    }\n\n    Object.keys(obj).forEach(function (key) {\n      src = target[key]; // source value\n\n      val = obj[key]; // new value\n      // recursion prevention\n\n      if (val === target) {\n        return;\n        /**\n         * if new value isn't object then just overwrite by new value\n         * instead of extending.\n         */\n      } else if (typeof val !== 'object' || val === null) {\n        target[key] = val;\n        return; // just clone arrays (and recursive clone objects inside)\n      } else if (Array.isArray(val)) {\n        target[key] = cloneDeep(val);\n        return; // overwrite by new value if source isn't object or array\n      } else if (typeof src !== 'object' || src === null || Array.isArray(src)) {\n        target[key] = deepExtend({}, val);\n        return; // source value and new value is objects both, extending...\n      } else {\n        target[key] = deepExtend(src, val);\n        return;\n      }\n    });\n  });\n  return target;\n};\nexport class Deferred {\n  constructor() {\n    this.promise = new Promise((resolve, reject) => {\n      this.resolve = resolve;\n      this.reject = reject;\n    });\n  }\n\n} // getDeepFromObject({result: {data: 1}}, 'result.data', 2); // returns 1\n\nexport function getDeepFromObject(object = {}, name, defaultValue) {\n  const keys = name.split('.'); // clone the object\n\n  let level = deepExtend({}, object);\n  keys.forEach(k => {\n    if (level && typeof level[k] !== 'undefined') {\n      level = level[k];\n    }\n  });\n  return typeof level === 'undefined' ? defaultValue : level;\n}\nexport function getPageForRowIndex(index, perPage) {\n  // we need to add 1 to convert 0-based index to 1-based page number.\n  return Math.floor(index / perPage) + 1;\n}","map":null,"metadata":{},"sourceType":"module"}