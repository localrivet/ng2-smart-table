{"ast":null,"code":"import { HttpParams } from '@angular/common/http';\nimport { LocalDataSource } from '../local/local.data-source';\nimport { ServerSourceConf } from './server-source.conf';\nimport { getDeepFromObject } from '../../helpers';\nimport { map } from 'rxjs/operators';\nexport class ServerDataSource extends LocalDataSource {\n  constructor(http, conf = {}) {\n    super();\n    this.http = http;\n    this.lastRequestCount = 0;\n    this.conf = new ServerSourceConf(conf);\n\n    if (!this.conf.endPoint) {\n      throw new Error('At least endPoint must be specified as a configuration of the server data source.');\n    }\n  }\n\n  count() {\n    return this.lastRequestCount;\n  }\n\n  getElements() {\n    return this.requestElements().pipe(map(res => {\n      this.lastRequestCount = this.extractTotalFromResponse(res);\n      this.data = this.extractDataFromResponse(res);\n      return this.data;\n    })).toPromise();\n  }\n  /**\n   * Extracts array of data from server response\n   * @param res\n   * @returns {any}\n   */\n\n\n  extractDataFromResponse(res) {\n    const rawData = res.body;\n    const data = !!this.conf.dataKey ? getDeepFromObject(rawData, this.conf.dataKey, []) : rawData;\n\n    if (data instanceof Array) {\n      return data;\n    }\n\n    throw new Error(`Data must be an array.\n    Please check that data extracted from the server response by the key '${this.conf.dataKey}' exists and is array.`);\n  }\n  /**\n   * Extracts total rows count from the server response\n   * Looks for the count in the heders first, then in the response body\n   * @param res\n   * @returns {any}\n   */\n\n\n  extractTotalFromResponse(res) {\n    if (res.headers.has(this.conf.totalKey)) {\n      return +res.headers.get(this.conf.totalKey);\n    } else {\n      const rawData = res.body;\n      return getDeepFromObject(rawData, this.conf.totalKey, 0);\n    }\n  }\n\n  requestElements() {\n    let httpParams = this.createRequesParams();\n    return this.http.get(this.conf.endPoint, {\n      params: httpParams,\n      observe: 'response'\n    });\n  }\n\n  createRequesParams() {\n    let httpParams = new HttpParams();\n    httpParams = this.addSortRequestParams(httpParams);\n    httpParams = this.addFilterRequestParams(httpParams);\n    return this.addPagerRequestParams(httpParams);\n  }\n\n  addSortRequestParams(httpParams) {\n    if (this.sortConf) {\n      this.sortConf.forEach(fieldConf => {\n        httpParams = httpParams.set(this.conf.sortFieldKey, fieldConf.field);\n        httpParams = httpParams.set(this.conf.sortDirKey, fieldConf.direction.toUpperCase());\n      });\n    }\n\n    return httpParams;\n  }\n\n  addFilterRequestParams(httpParams) {\n    if (this.filterConf.filters) {\n      this.filterConf.filters.forEach(fieldConf => {\n        if (fieldConf['search']) {\n          httpParams = httpParams.set(this.conf.filterFieldKey.replace('#field#', fieldConf['field']), fieldConf['search']);\n        }\n      });\n    }\n\n    return httpParams;\n  }\n\n  addPagerRequestParams(httpParams) {\n    if (this.pagingConf && this.pagingConf['page'] && this.pagingConf['perPage']) {\n      httpParams = httpParams.set(this.conf.pagerPageKey, this.pagingConf['page']);\n      httpParams = httpParams.set(this.conf.pagerLimitKey, this.pagingConf['perPage']);\n    }\n\n    return httpParams;\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}