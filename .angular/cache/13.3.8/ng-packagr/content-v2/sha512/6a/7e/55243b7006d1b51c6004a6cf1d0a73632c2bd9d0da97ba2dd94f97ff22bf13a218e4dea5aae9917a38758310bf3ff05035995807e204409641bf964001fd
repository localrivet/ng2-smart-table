{"hash":"60f0e19b472ef62e90f96b1600953b6e12436143","fesm2020":{"code":"import * as i0 from '@angular/core';\nimport { ViewContainerRef, Component, Input, ViewChild, ChangeDetectionStrategy, EventEmitter, Output, NgModule } from '@angular/core';\nimport * as i2 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport * as i1 from '@angular/forms';\nimport { FormsModule, NgControl, FormControl, ReactiveFormsModule } from '@angular/forms';\nimport * as i1$1 from 'ng2-completer';\nimport { Ng2CompleterModule } from 'ng2-completer';\nimport { Subject } from 'rxjs';\nimport { cloneDeep } from 'lodash';\nimport { skip, distinctUntilChanged, debounceTime, map, takeUntil } from 'rxjs/operators';\nimport { HttpParams } from '@angular/common/http';\n\n/**\n * Extending object that entered in first argument.\n *\n * Returns extended object or false if have no target object or incorrect type.\n *\n * If you wish to clone source object (without modify it), just use empty new\n * object as first argument, like this:\n *   deepExtend({}, yourObj_1, [yourObj_N]);\n */\nconst deepExtend = function (...objects) {\n    if (arguments.length < 1 || typeof arguments[0] !== 'object') {\n        return false;\n    }\n    if (arguments.length < 2) {\n        return arguments[0];\n    }\n    const target = arguments[0];\n    // convert arguments to array and cut off target object\n    const args = Array.prototype.slice.call(arguments, 1);\n    let val, src;\n    args.forEach((obj) => {\n        // skip argument if it is array or isn't object\n        if (typeof obj !== 'object' || Array.isArray(obj)) {\n            return;\n        }\n        Object.keys(obj).forEach(function (key) {\n            src = target[key]; // source value\n            val = obj[key]; // new value\n            // recursion prevention\n            if (val === target) {\n                return;\n                /**\n                 * if new value isn't object then just overwrite by new value\n                 * instead of extending.\n                 */\n            }\n            else if (typeof val !== 'object' || val === null) {\n                target[key] = val;\n                return;\n                // just clone arrays (and recursive clone objects inside)\n            }\n            else if (Array.isArray(val)) {\n                target[key] = cloneDeep(val);\n                return;\n                // overwrite by new value if source isn't object or array\n            }\n            else if (typeof src !== 'object' || src === null || Array.isArray(src)) {\n                target[key] = deepExtend({}, val);\n                return;\n                // source value and new value is objects both, extending...\n            }\n            else {\n                target[key] = deepExtend(src, val);\n                return;\n            }\n        });\n    });\n    return target;\n};\nclass Deferred {\n    constructor() {\n        this.promise = new Promise((resolve, reject) => {\n            this.resolve = resolve;\n            this.reject = reject;\n        });\n    }\n}\n// getDeepFromObject({result: {data: 1}}, 'result.data', 2); // returns 1\nfunction getDeepFromObject(object = {}, name, defaultValue) {\n    const keys = name.split('.');\n    // clone the object\n    let level = deepExtend({}, object);\n    keys.forEach((k) => {\n        if (level && typeof level[k] !== 'undefined') {\n            level = level[k];\n        }\n    });\n    return typeof level === 'undefined' ? defaultValue : level;\n}\nfunction getPageForRowIndex(index, perPage) {\n    // we need to add 1 to convert 0-based index to 1-based page number.\n    return Math.floor(index / perPage) + 1;\n}\n\nfunction prepareValue(value) { return value; }\nclass Cell {\n    constructor(value, row, column, dataSet) {\n        this.value = value;\n        this.row = row;\n        this.column = column;\n        this.dataSet = dataSet;\n        this.newValue = '';\n        this.newValue = value;\n    }\n    getColumn() {\n        return this.column;\n    }\n    getRow() {\n        return this.row;\n    }\n    getValue() {\n        const valid = this.column.getValuePrepareFunction() instanceof Function;\n        const prepare = valid ? this.column.getValuePrepareFunction() : Cell.PREPARE;\n        return prepare.call(null, this.value, this.row.getData(), this);\n    }\n    setValue(value) {\n        this.newValue = value;\n    }\n    getId() {\n        return this.getColumn().id;\n    }\n    getTitle() {\n        return this.getColumn().title;\n    }\n    isEditable() {\n        if (this.getRow().index === -1) {\n            return this.getColumn().isAddable;\n        }\n        else {\n            return this.getColumn().isEditable;\n        }\n    }\n}\nCell.PREPARE = prepareValue;\n\nclass Row {\n    constructor(index, data, _dataSet) {\n        this.index = index;\n        this.data = data;\n        this._dataSet = _dataSet;\n        this.isSelected = false;\n        this.isInEditing = false;\n        this.cells = [];\n        this.process();\n    }\n    getCell(column) {\n        return this.cells.find(el => el.getColumn() === column);\n    }\n    getCells() {\n        return this.cells;\n    }\n    getData() {\n        return this.data;\n    }\n    getIsSelected() {\n        return this.isSelected;\n    }\n    getNewData() {\n        const values = Object.assign({}, this.data);\n        this.getCells().forEach((cell) => values[cell.getColumn().id] = cell.newValue);\n        return values;\n    }\n    setData(data) {\n        this.data = data;\n        this.process();\n    }\n    process() {\n        this.cells = [];\n        this._dataSet.getColumns().forEach((column) => {\n            const cell = this.createCell(column);\n            this.cells.push(cell);\n        });\n    }\n    createCell(column) {\n        const defValue = column.settings.defaultValue ? column.settings.defaultValue : '';\n        const value = typeof this.data[column.id] === 'undefined' ? defValue : this.data[column.id];\n        return new Cell(value, this, column, this._dataSet);\n    }\n}\n\nclass Column {\n    constructor(id, settings, dataSet) {\n        this.id = id;\n        this.settings = settings;\n        this.dataSet = dataSet;\n        this.title = '';\n        this.type = '';\n        this.class = '';\n        this.width = '';\n        this.hide = false;\n        this.isSortable = false;\n        this.isEditable = true;\n        this.isAddable = true;\n        this.isFilterable = false;\n        this.sortDirection = '';\n        this.defaultSortDirection = '';\n        this.editor = { type: '', config: {}, component: null };\n        this.filter = { type: '', config: {}, component: null };\n        this.renderComponent = null;\n        this.process();\n    }\n    getOnComponentInitFunction() {\n        return this.onComponentInitFunction;\n    }\n    getCompareFunction() {\n        return this.compareFunction;\n    }\n    getValuePrepareFunction() {\n        return this.valuePrepareFunction;\n    }\n    getFilterFunction() {\n        return this.filterFunction;\n    }\n    getConfig() {\n        return this.editor && this.editor.config;\n    }\n    getFilterType() {\n        return this.filter && this.filter.type;\n    }\n    getFilterConfig() {\n        return this.filter && this.filter.config;\n    }\n    process() {\n        this.title = this.settings['title'];\n        this.class = this.settings['class'];\n        this.width = this.settings['width'];\n        this.hide = !!this.settings['hide'];\n        this.type = this.prepareType();\n        this.editor = this.settings['editor'];\n        this.filter = this.settings['filter'];\n        this.renderComponent = this.settings['renderComponent'];\n        this.isFilterable = typeof this.settings['filter'] === 'undefined' ? true : !!this.settings['filter'];\n        this.defaultSortDirection = ['asc', 'desc']\n            .indexOf(this.settings['sortDirection']) !== -1 ? this.settings['sortDirection'] : '';\n        this.isSortable = typeof this.settings['sort'] === 'undefined' ? true : !!this.settings['sort'];\n        this.isEditable = typeof this.settings['editable'] === 'undefined' ? true : !!this.settings['editable'];\n        this.isAddable = typeof this.settings['addable'] === 'undefined' ? true : !!this.settings['addable'];\n        this.sortDirection = this.prepareSortDirection();\n        this.compareFunction = this.settings['compareFunction'];\n        this.valuePrepareFunction = this.settings['valuePrepareFunction'];\n        this.filterFunction = this.settings['filterFunction'];\n        this.onComponentInitFunction = this.settings['onComponentInitFunction'];\n    }\n    prepareType() {\n        return this.settings['type'] || this.determineType();\n    }\n    prepareSortDirection() {\n        return this.settings['sort'] === 'desc' ? 'desc' : 'asc';\n    }\n    determineType() {\n        // TODO: determine type by data\n        return 'text';\n    }\n}\n\nclass DataSet {\n    constructor(data = [], columnSettings) {\n        this.columnSettings = columnSettings;\n        this.data = [];\n        this.columns = [];\n        this.rows = [];\n        this.createColumns(columnSettings);\n        this.setData(data);\n        this.createNewRow();\n    }\n    setData(data) {\n        this.data = data;\n        this.createRows();\n    }\n    getColumns() {\n        return this.columns;\n    }\n    getRows() {\n        return this.rows;\n    }\n    getFirstRow() {\n        return this.rows[0];\n    }\n    getLastRow() {\n        return this.rows[this.rows.length - 1];\n    }\n    findRowByData(data) {\n        return this.rows.find((row) => row.getData() === data);\n    }\n    deselectAll() {\n        this.rows.forEach((row) => {\n            row.isSelected = false;\n        });\n        // we need to clear selectedRow field because no one row selected\n        this.selectedRow = undefined;\n    }\n    selectRow(row) {\n        const previousIsSelected = row.isSelected;\n        this.deselectAll();\n        row.isSelected = !previousIsSelected;\n        this.selectedRow = row;\n        return this.selectedRow;\n    }\n    multipleSelectRow(row) {\n        row.isSelected = !row.isSelected;\n        this.selectedRow = row;\n        return this.selectedRow;\n    }\n    selectPreviousRow() {\n        if (this.rows.length > 0) {\n            let index = this.selectedRow ? this.selectedRow.index : 0;\n            if (index > this.rows.length - 1) {\n                index = this.rows.length - 1;\n            }\n            this.selectRow(this.rows[index]);\n            return this.selectedRow;\n        }\n    }\n    selectFirstRow() {\n        if (this.rows.length > 0) {\n            this.selectRow(this.rows[0]);\n            return this.selectedRow;\n        }\n    }\n    selectLastRow() {\n        if (this.rows.length > 0) {\n            this.selectRow(this.rows[this.rows.length - 1]);\n            return this.selectedRow;\n        }\n    }\n    selectRowByIndex(index) {\n        const rowsLength = this.rows.length;\n        if (rowsLength === 0) {\n            return;\n        }\n        if (!index) {\n            this.selectFirstRow();\n            return this.selectedRow;\n        }\n        if (index > 0 && index < rowsLength) {\n            this.selectRow(this.rows[index]);\n            return this.selectedRow;\n        }\n        // we need to deselect all rows if we got an incorrect index\n        this.deselectAll();\n    }\n    willSelectFirstRow() {\n        this.willSelect = 'first';\n    }\n    willSelectLastRow() {\n        this.willSelect = 'last';\n    }\n    select(selectedRowIndex) {\n        if (this.getRows().length === 0) {\n            return;\n        }\n        if (this.willSelect) {\n            if (this.willSelect === 'first') {\n                this.selectFirstRow();\n            }\n            if (this.willSelect === 'last') {\n                this.selectLastRow();\n            }\n            this.willSelect = '';\n        }\n        else {\n            this.selectRowByIndex(selectedRowIndex);\n        }\n        return this.selectedRow;\n    }\n    createNewRow() {\n        this.newRow = new Row(-1, {}, this);\n        this.newRow.isInEditing = true;\n    }\n    /**\n     * Create columns by mapping from the settings\n     * @param settings\n     * @private\n     */\n    createColumns(settings) {\n        for (const id in settings) {\n            if (settings.hasOwnProperty(id)) {\n                this.columns.push(new Column(id, settings[id], this));\n            }\n        }\n    }\n    /**\n     * Create rows based on current data prepared in data source\n     * @private\n     */\n    createRows() {\n        this.rows = [];\n        this.data.forEach((el, index) => {\n            this.rows.push(new Row(index, el, this));\n        });\n    }\n}\n\nclass Grid {\n    constructor(source, settings) {\n        this.createFormShown = false;\n        this.onSelectRowSource = new Subject();\n        this.onDeselectRowSource = new Subject();\n        this.setSettings(settings);\n        this.setSource(source);\n    }\n    detach() {\n        if (this.sourceOnChangedSubscription) {\n            this.sourceOnChangedSubscription.unsubscribe();\n        }\n        if (this.sourceOnUpdatedSubscription) {\n            this.sourceOnUpdatedSubscription.unsubscribe();\n        }\n    }\n    showActionColumn(position) {\n        return this.isCurrentActionsPosition(position) && this.isActionsVisible();\n    }\n    isCurrentActionsPosition(position) {\n        return position == this.getSetting('actions.position');\n    }\n    isActionsVisible() {\n        return this.getSetting('actions.add') || this.getSetting('actions.edit') || this.getSetting('actions.delete') || this.getSetting('actions.custom').length;\n    }\n    isMultiSelectVisible() {\n        return this.getSetting('selectMode') === 'multi';\n    }\n    getNewRow() {\n        return this.dataSet.newRow;\n    }\n    setSettings(settings) {\n        this.settings = settings;\n        this.dataSet = new DataSet([], this.getSetting('columns'));\n        if (this.source) {\n            this.source.refresh();\n        }\n    }\n    getDataSet() {\n        return this.dataSet;\n    }\n    setSource(source) {\n        this.source = this.prepareSource(source);\n        this.detach();\n        this.sourceOnChangedSubscription = this.source.onChanged().subscribe((changes) => this.processDataChange(changes));\n        this.sourceOnUpdatedSubscription = this.source.onUpdated().subscribe((data) => {\n            const changedRow = this.dataSet.findRowByData(data);\n            changedRow.setData(data);\n        });\n    }\n    getSetting(name, defaultValue) {\n        return getDeepFromObject(this.settings, name, defaultValue);\n    }\n    getColumns() {\n        return this.dataSet.getColumns();\n    }\n    getRows() {\n        return this.dataSet.getRows();\n    }\n    selectRow(row) {\n        this.dataSet.selectRow(row);\n    }\n    multipleSelectRow(row) {\n        this.dataSet.multipleSelectRow(row);\n    }\n    onSelectRow() {\n        return this.onSelectRowSource.asObservable();\n    }\n    onDeselectRow() {\n        return this.onDeselectRowSource.asObservable();\n    }\n    edit(row) {\n        row.isInEditing = true;\n    }\n    create(row, confirmEmitter) {\n        const deferred = new Deferred();\n        deferred.promise.then((newData) => {\n            newData = newData ? newData : row.getNewData();\n            if (deferred.resolve.skipAdd) {\n                this.createFormShown = false;\n            }\n            else {\n                this.source.prepend(newData).then(() => {\n                    this.createFormShown = false;\n                    this.dataSet.createNewRow();\n                });\n            }\n        }).catch((err) => {\n            // doing nothing\n        });\n        if (this.getSetting('add.confirmCreate')) {\n            confirmEmitter.emit({\n                newData: row.getNewData(),\n                source: this.source,\n                confirm: deferred,\n            });\n        }\n        else {\n            deferred.resolve();\n        }\n    }\n    save(row, confirmEmitter) {\n        const deferred = new Deferred();\n        deferred.promise.then((newData) => {\n            newData = newData ? newData : row.getNewData();\n            if (deferred.resolve.skipEdit) {\n                row.isInEditing = false;\n            }\n            else {\n                this.source.update(row.getData(), newData).then(() => {\n                    row.isInEditing = false;\n                });\n            }\n        }).catch((err) => {\n            // doing nothing\n        });\n        if (this.getSetting('edit.confirmSave')) {\n            confirmEmitter.emit({\n                data: row.getData(),\n                newData: row.getNewData(),\n                source: this.source,\n                confirm: deferred,\n            });\n        }\n        else {\n            deferred.resolve();\n        }\n    }\n    delete(row, confirmEmitter) {\n        const deferred = new Deferred();\n        deferred.promise.then(() => {\n            this.source.remove(row.getData());\n        }).catch((err) => {\n            // doing nothing\n        });\n        if (this.getSetting('delete.confirmDelete')) {\n            confirmEmitter.emit({\n                data: row.getData(),\n                source: this.source,\n                confirm: deferred,\n            });\n        }\n        else {\n            deferred.resolve();\n        }\n    }\n    processDataChange(changes) {\n        if (this.shouldProcessChange(changes)) {\n            this.dataSet.setData(changes['elements']);\n            if (this.getSetting('selectMode') !== 'multi') {\n                const row = this.determineRowToSelect(changes);\n                if (row) {\n                    this.onSelectRowSource.next(row);\n                }\n                else {\n                    this.onDeselectRowSource.next(null);\n                }\n            }\n        }\n    }\n    shouldProcessChange(changes) {\n        if (['filter', 'sort', 'page', 'remove', 'refresh', 'load', 'paging'].indexOf(changes['action']) !== -1) {\n            return true;\n        }\n        else if (['prepend', 'append'].indexOf(changes['action']) !== -1 && !this.getSetting('pager.display')) {\n            return true;\n        }\n        return false;\n    }\n    /**\n     * @breaking-change 1.8.0\n     * Need to add `| null` in return type\n     *\n     * TODO: move to selectable? Separate directive\n     */\n    determineRowToSelect(changes) {\n        if (['load', 'page', 'filter', 'sort', 'refresh'].indexOf(changes['action']) !== -1) {\n            return this.dataSet.select(this.getRowIndexToSelect());\n        }\n        if (this.shouldSkipSelection()) {\n            return null;\n        }\n        if (changes['action'] === 'remove') {\n            if (changes['elements'].length === 0) {\n                // we have to store which one to select as the data will be reloaded\n                this.dataSet.willSelectLastRow();\n            }\n            else {\n                return this.dataSet.selectPreviousRow();\n            }\n        }\n        if (changes['action'] === 'append') {\n            // we have to store which one to select as the data will be reloaded\n            this.dataSet.willSelectLastRow();\n        }\n        if (changes['action'] === 'add') {\n            return this.dataSet.selectFirstRow();\n        }\n        if (changes['action'] === 'update') {\n            return this.dataSet.selectFirstRow();\n        }\n        if (changes['action'] === 'prepend') {\n            // we have to store which one to select as the data will be reloaded\n            this.dataSet.willSelectFirstRow();\n        }\n        return null;\n    }\n    prepareSource(source) {\n        const initialSource = this.getInitialSort();\n        if (initialSource && initialSource['field'] && initialSource['direction']) {\n            source.setSort([initialSource], false);\n        }\n        if (this.getSetting('pager.display') === true) {\n            source.setPaging(this.getPageToSelect(source), this.getSetting('pager.perPage'), false);\n        }\n        source.refresh();\n        return source;\n    }\n    getInitialSort() {\n        const sortConf = {};\n        this.getColumns().forEach((column) => {\n            if (column.isSortable && column.defaultSortDirection) {\n                sortConf['field'] = column.id;\n                sortConf['direction'] = column.defaultSortDirection;\n                sortConf['compare'] = column.getCompareFunction();\n            }\n        });\n        return sortConf;\n    }\n    getSelectedRows() {\n        return this.dataSet.getRows()\n            .filter(r => r.isSelected);\n    }\n    selectAllRows(status) {\n        this.dataSet.getRows()\n            .forEach(r => r.isSelected = status);\n    }\n    getFirstRow() {\n        return this.dataSet.getFirstRow();\n    }\n    getLastRow() {\n        return this.dataSet.getLastRow();\n    }\n    getSelectionInfo() {\n        const switchPageToSelectedRowPage = this.getSetting('switchPageToSelectedRowPage');\n        const selectedRowIndex = Number(this.getSetting('selectedRowIndex', 0)) || 0;\n        const { perPage, page } = this.getSetting('pager');\n        return { perPage, page, selectedRowIndex, switchPageToSelectedRowPage };\n    }\n    getRowIndexToSelect() {\n        const { switchPageToSelectedRowPage, selectedRowIndex, perPage } = this.getSelectionInfo();\n        const dataAmount = this.source.count();\n        /**\n         * source - contains all table data\n         * dataSet - contains data for current page\n         * selectedRowIndex - contains index for data in all data\n         *\n         * because of that, we need to count index for a specific row in page\n         * if\n         * `switchPageToSelectedRowPage` - we need to change page automatically\n         * `selectedRowIndex < dataAmount && selectedRowIndex >= 0` - index points to existing data\n         * (if index points to non-existing data and we calculate index for current page - we will get wrong selected row.\n         *  if we return index witch not points to existing data - no line will be highlighted)\n         */\n        return (switchPageToSelectedRowPage &&\n            selectedRowIndex < dataAmount &&\n            selectedRowIndex >= 0) ?\n            selectedRowIndex % perPage :\n            selectedRowIndex;\n    }\n    getPageToSelect(source) {\n        const { switchPageToSelectedRowPage, selectedRowIndex, perPage, page } = this.getSelectionInfo();\n        let pageToSelect = Math.max(1, page);\n        if (switchPageToSelectedRowPage && selectedRowIndex >= 0) {\n            pageToSelect = getPageForRowIndex(selectedRowIndex, perPage);\n        }\n        const maxPageAmount = Math.ceil(source.count() / perPage);\n        return maxPageAmount ? Math.min(pageToSelect, maxPageAmount) : pageToSelect;\n    }\n    shouldSkipSelection() {\n        /**\n         * For backward compatibility when using `selectedRowIndex` with non-number values - ignored.\n         *\n         * Therefore, in order to select a row after some changes,\n         * the `selectedRowIndex` value must be invalid or >= 0 (< 0 means that no row is selected).\n         *\n         * `Number(value)` returns `NaN` on all invalid cases, and comparisons with `NaN` always return `false`.\n         *\n         * !!! We should skip a row only in cases when `selectedRowIndex` < 0\n         * because when < 0 all lines must be deselected\n         */\n        const selectedRowIndex = Number(this.getSetting('selectedRowIndex'));\n        return selectedRowIndex < 0;\n    }\n}\n\nclass CustomViewComponent {\n    constructor(resolver) {\n        this.resolver = resolver;\n    }\n    ngOnInit() {\n        if (this.cell && !this.customComponent) {\n            this.createCustomComponent();\n            this.callOnComponentInit();\n            this.patchInstance();\n        }\n    }\n    ngOnDestroy() {\n        if (this.customComponent) {\n            this.customComponent.destroy();\n        }\n    }\n    createCustomComponent() {\n        const componentFactory = this.resolver.resolveComponentFactory(this.cell.getColumn().renderComponent);\n        this.customComponent = this.dynamicTarget.createComponent(componentFactory);\n    }\n    callOnComponentInit() {\n        const onComponentInitFunction = this.cell.getColumn().getOnComponentInitFunction();\n        onComponentInitFunction && onComponentInitFunction(this.customComponent.instance);\n    }\n    patchInstance() {\n        Object.assign(this.customComponent.instance, this.getPatch());\n    }\n    getPatch() {\n        return {\n            value: this.cell.getValue(),\n            rowData: this.cell.getRow().getData()\n        };\n    }\n}\nCustomViewComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: CustomViewComponent, deps: [{ token: i0.ComponentFactoryResolver }], target: i0.ɵɵFactoryTarget.Component });\nCustomViewComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.3.11\", type: CustomViewComponent, selector: \"custom-view-component\", inputs: { cell: \"cell\" }, viewQueries: [{ propertyName: \"dynamicTarget\", first: true, predicate: [\"dynamicTarget\"], descendants: true, read: ViewContainerRef, static: true }], ngImport: i0, template: `\n    <ng-template #dynamicTarget></ng-template>\n  `, isInline: true });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: CustomViewComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'custom-view-component',\n                    template: `\n    <ng-template #dynamicTarget></ng-template>\n  `,\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ComponentFactoryResolver }]; }, propDecorators: { cell: [{\n                type: Input\n            }], dynamicTarget: [{\n                type: ViewChild,\n                args: ['dynamicTarget', { read: ViewContainerRef, static: true }]\n            }] } });\n\nclass ViewCellComponent {\n}\nViewCellComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: ViewCellComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\nViewCellComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.3.11\", type: ViewCellComponent, selector: \"table-cell-view-mode\", inputs: { cell: \"cell\" }, ngImport: i0, template: `\n    <div [ngSwitch]=\"cell.getColumn().type\">\n        <custom-view-component *ngSwitchCase=\"'custom'\" [cell]=\"cell\"></custom-view-component>\n        <div *ngSwitchCase=\"'html'\" [innerHTML]=\"cell.getValue()\"></div>\n        <div *ngSwitchDefault>{{ cell.getValue() }}</div>\n    </div>\n    `, isInline: true, components: [{ type: CustomViewComponent, selector: \"custom-view-component\", inputs: [\"cell\"] }], directives: [{ type: i2.NgSwitch, selector: \"[ngSwitch]\", inputs: [\"ngSwitch\"] }, { type: i2.NgSwitchCase, selector: \"[ngSwitchCase]\", inputs: [\"ngSwitchCase\"] }, { type: i2.NgSwitchDefault, selector: \"[ngSwitchDefault]\" }], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: ViewCellComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'table-cell-view-mode',\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    template: `\n    <div [ngSwitch]=\"cell.getColumn().type\">\n        <custom-view-component *ngSwitchCase=\"'custom'\" [cell]=\"cell\"></custom-view-component>\n        <div *ngSwitchCase=\"'html'\" [innerHTML]=\"cell.getValue()\"></div>\n        <div *ngSwitchDefault>{{ cell.getValue() }}</div>\n    </div>\n    `,\n                }]\n        }], propDecorators: { cell: [{\n                type: Input\n            }] } });\n\nclass EditCellDefault {\n    constructor() {\n        this.inputClass = '';\n        this.edited = new EventEmitter();\n    }\n    onEdited(event) {\n        this.edited.next(event);\n        return false;\n    }\n    onStopEditing() {\n        this.cell.getRow().isInEditing = false;\n        return false;\n    }\n    onClick(event) {\n        event.stopPropagation();\n    }\n}\nEditCellDefault.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: EditCellDefault, deps: [], target: i0.ɵɵFactoryTarget.Component });\nEditCellDefault.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.3.11\", type: EditCellDefault, selector: \"ng-component\", inputs: { cell: \"cell\", inputClass: \"inputClass\" }, outputs: { edited: \"edited\" }, ngImport: i0, template: '', isInline: true });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: EditCellDefault, decorators: [{\n            type: Component,\n            args: [{\n                    template: ''\n                }]\n        }], propDecorators: { cell: [{\n                type: Input\n            }], inputClass: [{\n                type: Input\n            }], edited: [{\n                type: Output\n            }] } });\n\nclass CustomEditComponent extends EditCellDefault {\n    constructor(resolver) {\n        super();\n        this.resolver = resolver;\n    }\n    ngOnChanges(changes) {\n        if (this.cell && !this.customComponent) {\n            const componentFactory = this.resolver.resolveComponentFactory(this.cell.getColumn().editor.component);\n            this.customComponent = this.dynamicTarget.createComponent(componentFactory);\n            // set @Inputs and @Outputs of custom component\n            this.customComponent.instance.cell = this.cell;\n            this.customComponent.instance.inputClass = this.inputClass;\n            this.customComponent.instance.onStopEditing.subscribe(() => this.onStopEditing());\n            this.customComponent.instance.onEdited.subscribe((event) => this.onEdited(event));\n            this.customComponent.instance.onClick.subscribe((event) => this.onClick(event));\n        }\n    }\n    ngOnDestroy() {\n        if (this.customComponent) {\n            this.customComponent.destroy();\n        }\n    }\n}\nCustomEditComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: CustomEditComponent, deps: [{ token: i0.ComponentFactoryResolver }], target: i0.ɵɵFactoryTarget.Component });\nCustomEditComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.3.11\", type: CustomEditComponent, selector: \"table-cell-custom-editor\", viewQueries: [{ propertyName: \"dynamicTarget\", first: true, predicate: [\"dynamicTarget\"], descendants: true, read: ViewContainerRef, static: true }], usesInheritance: true, usesOnChanges: true, ngImport: i0, template: `\n    <ng-template #dynamicTarget></ng-template>\n  `, isInline: true });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: CustomEditComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'table-cell-custom-editor',\n                    template: `\n    <ng-template #dynamicTarget></ng-template>\n  `,\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ComponentFactoryResolver }]; }, propDecorators: { dynamicTarget: [{\n                type: ViewChild,\n                args: ['dynamicTarget', { read: ViewContainerRef, static: true }]\n            }] } });\n\nclass DefaultEditor {\n    constructor() {\n        this.onStopEditing = new EventEmitter();\n        this.onEdited = new EventEmitter();\n        this.onClick = new EventEmitter();\n    }\n}\nDefaultEditor.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: DefaultEditor, deps: [], target: i0.ɵɵFactoryTarget.Component });\nDefaultEditor.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.3.11\", type: DefaultEditor, selector: \"ng-component\", inputs: { cell: \"cell\", inputClass: \"inputClass\" }, outputs: { onStopEditing: \"onStopEditing\", onEdited: \"onEdited\", onClick: \"onClick\" }, ngImport: i0, template: '', isInline: true });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: DefaultEditor, decorators: [{\n            type: Component,\n            args: [{\n                    template: '',\n                }]\n        }], propDecorators: { cell: [{\n                type: Input\n            }], inputClass: [{\n                type: Input\n            }], onStopEditing: [{\n                type: Output\n            }], onEdited: [{\n                type: Output\n            }], onClick: [{\n                type: Output\n            }] } });\n\nclass SelectEditorComponent extends DefaultEditor {\n    constructor() {\n        super();\n    }\n}\nSelectEditorComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: SelectEditorComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\nSelectEditorComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.3.11\", type: SelectEditorComponent, selector: \"select-editor\", usesInheritance: true, ngImport: i0, template: `\n    <select [ngClass]=\"inputClass\"\n            class=\"form-control\"\n            [(ngModel)]=\"cell.newValue\"\n            [name]=\"cell.getId()\"\n            [disabled]=\"!cell.isEditable()\"\n            (click)=\"onClick.emit($event)\"\n            (keydown.enter)=\"onEdited.emit($event)\"\n            (keydown.esc)=\"onStopEditing.emit()\">\n\n        <option *ngFor=\"let option of cell.getColumn().getConfig()?.list\" [value]=\"option.value\"\n                [selected]=\"option.value === cell.getValue()\">{{ option.title }}\n        </option>\n    </select>\n    `, isInline: true, directives: [{ type: i1.SelectControlValueAccessor, selector: \"select:not([multiple])[formControlName],select:not([multiple])[formControl],select:not([multiple])[ngModel]\", inputs: [\"compareWith\"] }, { type: i2.NgClass, selector: \"[ngClass]\", inputs: [\"class\", \"ngClass\"] }, { type: i1.NgControlStatus, selector: \"[formControlName],[ngModel],[formControl]\" }, { type: i1.NgModel, selector: \"[ngModel]:not([formControlName]):not([formControl])\", inputs: [\"name\", \"disabled\", \"ngModel\", \"ngModelOptions\"], outputs: [\"ngModelChange\"], exportAs: [\"ngModel\"] }, { type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }, { type: i1.NgSelectOption, selector: \"option\", inputs: [\"ngValue\", \"value\"] }, { type: i1.ɵNgSelectMultipleOption, selector: \"option\", inputs: [\"ngValue\", \"value\"] }] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: SelectEditorComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'select-editor',\n                    template: `\n    <select [ngClass]=\"inputClass\"\n            class=\"form-control\"\n            [(ngModel)]=\"cell.newValue\"\n            [name]=\"cell.getId()\"\n            [disabled]=\"!cell.isEditable()\"\n            (click)=\"onClick.emit($event)\"\n            (keydown.enter)=\"onEdited.emit($event)\"\n            (keydown.esc)=\"onStopEditing.emit()\">\n\n        <option *ngFor=\"let option of cell.getColumn().getConfig()?.list\" [value]=\"option.value\"\n                [selected]=\"option.value === cell.getValue()\">{{ option.title }}\n        </option>\n    </select>\n    `,\n                }]\n        }], ctorParameters: function () { return []; } });\n\nclass TextareaEditorComponent extends DefaultEditor {\n    constructor() {\n        super();\n    }\n}\nTextareaEditorComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: TextareaEditorComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\nTextareaEditorComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.3.11\", type: TextareaEditorComponent, selector: \"textarea-editor\", usesInheritance: true, ngImport: i0, template: `\n    <textarea [ngClass]=\"inputClass\"\n              class=\"form-control\"\n              [(ngModel)]=\"cell.newValue\"\n              [name]=\"cell.getId()\"\n              [disabled]=\"!cell.isEditable()\"\n              [placeholder]=\"cell.getTitle()\"\n              (click)=\"onClick.emit($event)\"\n              (keydown.enter)=\"onEdited.emit($event)\"\n              (keydown.esc)=\"onStopEditing.emit()\">\n    </textarea>\n    `, isInline: true, styles: [\":host input,:host textarea{width:100%;line-height:normal;padding:.375em .75em}\\n\"], directives: [{ type: i1.DefaultValueAccessor, selector: \"input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]\" }, { type: i2.NgClass, selector: \"[ngClass]\", inputs: [\"class\", \"ngClass\"] }, { type: i1.NgControlStatus, selector: \"[formControlName],[ngModel],[formControl]\" }, { type: i1.NgModel, selector: \"[ngModel]:not([formControlName]):not([formControl])\", inputs: [\"name\", \"disabled\", \"ngModel\", \"ngModelOptions\"], outputs: [\"ngModelChange\"], exportAs: [\"ngModel\"] }] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: TextareaEditorComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'textarea-editor', template: `\n    <textarea [ngClass]=\"inputClass\"\n              class=\"form-control\"\n              [(ngModel)]=\"cell.newValue\"\n              [name]=\"cell.getId()\"\n              [disabled]=\"!cell.isEditable()\"\n              [placeholder]=\"cell.getTitle()\"\n              (click)=\"onClick.emit($event)\"\n              (keydown.enter)=\"onEdited.emit($event)\"\n              (keydown.esc)=\"onStopEditing.emit()\">\n    </textarea>\n    `, styles: [\":host input,:host textarea{width:100%;line-height:normal;padding:.375em .75em}\\n\"] }]\n        }], ctorParameters: function () { return []; } });\n\nclass CheckboxEditorComponent extends DefaultEditor {\n    constructor() {\n        super();\n    }\n    onChange(event) {\n        const trueVal = (this.cell.getColumn().getConfig() && this.cell.getColumn().getConfig().true) || true;\n        const falseVal = (this.cell.getColumn().getConfig() && this.cell.getColumn().getConfig().false) || false;\n        this.cell.newValue = event.target.checked ? trueVal : falseVal;\n    }\n}\nCheckboxEditorComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: CheckboxEditorComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\nCheckboxEditorComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.3.11\", type: CheckboxEditorComponent, selector: \"checkbox-editor\", usesInheritance: true, ngImport: i0, template: `\n    <input [ngClass]=\"inputClass\"\n           type=\"checkbox\"\n           class=\"form-control\"\n           [name]=\"cell.getId()\"\n           [disabled]=\"!cell.isEditable()\"\n           [checked]=\"cell.getValue() == (cell.getColumn().getConfig()?.true || true)\"\n           (click)=\"onClick.emit($event)\"\n           (change)=\"onChange($event)\">\n    `, isInline: true, styles: [\":host input,:host textarea{width:100%;line-height:normal;padding:.375em .75em}\\n\"], directives: [{ type: i2.NgClass, selector: \"[ngClass]\", inputs: [\"class\", \"ngClass\"] }] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: CheckboxEditorComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'checkbox-editor', template: `\n    <input [ngClass]=\"inputClass\"\n           type=\"checkbox\"\n           class=\"form-control\"\n           [name]=\"cell.getId()\"\n           [disabled]=\"!cell.isEditable()\"\n           [checked]=\"cell.getValue() == (cell.getColumn().getConfig()?.true || true)\"\n           (click)=\"onClick.emit($event)\"\n           (change)=\"onChange($event)\">\n    `, styles: [\":host input,:host textarea{width:100%;line-height:normal;padding:.375em .75em}\\n\"] }]\n        }], ctorParameters: function () { return []; } });\n\nclass CompleterEditorComponent extends DefaultEditor {\n    constructor(completerService) {\n        super();\n        this.completerService = completerService;\n        this.completerStr = '';\n    }\n    ngOnInit() {\n        if (this.cell.getColumn().editor && this.cell.getColumn().editor.type === 'completer') {\n            const config = this.cell.getColumn().getConfig().completer;\n            config.dataService = this.completerService.local(config.data, config.searchFields, config.titleField);\n            config.dataService.descriptionField(config.descriptionField);\n        }\n    }\n    onEditedCompleter(event) {\n        this.cell.newValue = event.title;\n        return false;\n    }\n}\nCompleterEditorComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: CompleterEditorComponent, deps: [{ token: i1$1.CompleterService }], target: i0.ɵɵFactoryTarget.Component });\nCompleterEditorComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.3.11\", type: CompleterEditorComponent, selector: \"completer-editor\", usesInheritance: true, ngImport: i0, template: `\n    <ng2-completer [(ngModel)]=\"completerStr\"\n                   [dataService]=\"cell.getColumn().getConfig().completer.dataService\"\n                   [minSearchLength]=\"cell.getColumn().getConfig().completer.minSearchLength || 0\"\n                   [pause]=\"cell.getColumn().getConfig().completer.pause || 0\"\n                   [placeholder]=\"cell.getColumn().getConfig().completer.placeholder || 'Start typing...'\"\n                   (selected)=\"onEditedCompleter($event)\">\n    </ng2-completer>\n    `, isInline: true, components: [{ type: i1$1.CompleterCmp, selector: \"ng2-completer\", inputs: [\"inputName\", \"inputId\", \"pause\", \"minSearchLength\", \"maxChars\", \"overrideSuggested\", \"clearSelected\", \"clearUnselected\", \"fillHighlighted\", \"placeholder\", \"autoMatch\", \"disableInput\", \"autofocus\", \"openOnFocus\", \"openOnClick\", \"selectOnClick\", \"selectOnFocus\", \"autoHighlight\", \"datasource\", \"dataService\", \"textNoResults\", \"textSearching\", \"matchClass\", \"fieldTabindex\", \"inputClass\", \"initialValue\"], outputs: [\"selected\", \"highlighted\", \"blur\", \"click\", \"focus\", \"opened\", \"keyup\", \"keydown\"] }], directives: [{ type: i1.NgControlStatus, selector: \"[formControlName],[ngModel],[formControl]\" }, { type: i1.NgModel, selector: \"[ngModel]:not([formControlName]):not([formControl])\", inputs: [\"name\", \"disabled\", \"ngModel\", \"ngModelOptions\"], outputs: [\"ngModelChange\"], exportAs: [\"ngModel\"] }] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: CompleterEditorComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'completer-editor',\n                    template: `\n    <ng2-completer [(ngModel)]=\"completerStr\"\n                   [dataService]=\"cell.getColumn().getConfig().completer.dataService\"\n                   [minSearchLength]=\"cell.getColumn().getConfig().completer.minSearchLength || 0\"\n                   [pause]=\"cell.getColumn().getConfig().completer.pause || 0\"\n                   [placeholder]=\"cell.getColumn().getConfig().completer.placeholder || 'Start typing...'\"\n                   (selected)=\"onEditedCompleter($event)\">\n    </ng2-completer>\n    `,\n                }]\n        }], ctorParameters: function () { return [{ type: i1$1.CompleterService }]; } });\n\nclass InputEditorComponent extends DefaultEditor {\n    constructor() {\n        super();\n    }\n}\nInputEditorComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: InputEditorComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\nInputEditorComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.3.11\", type: InputEditorComponent, selector: \"input-editor\", usesInheritance: true, ngImport: i0, template: `\n    <input [ngClass]=\"inputClass\"\n           class=\"form-control\"\n           [(ngModel)]=\"cell.newValue\"\n           [name]=\"cell.getId()\"\n           [placeholder]=\"cell.getTitle()\"\n           [disabled]=\"!cell.isEditable()\"\n           (click)=\"onClick.emit($event)\"\n           (keydown.enter)=\"onEdited.emit($event)\"\n           (keydown.esc)=\"onStopEditing.emit()\">\n    `, isInline: true, styles: [\":host input,:host textarea{width:100%;line-height:normal;padding:.375em .75em}\\n\"], directives: [{ type: i1.DefaultValueAccessor, selector: \"input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]\" }, { type: i2.NgClass, selector: \"[ngClass]\", inputs: [\"class\", \"ngClass\"] }, { type: i1.NgControlStatus, selector: \"[formControlName],[ngModel],[formControl]\" }, { type: i1.NgModel, selector: \"[ngModel]:not([formControlName]):not([formControl])\", inputs: [\"name\", \"disabled\", \"ngModel\", \"ngModelOptions\"], outputs: [\"ngModelChange\"], exportAs: [\"ngModel\"] }] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: InputEditorComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'input-editor', template: `\n    <input [ngClass]=\"inputClass\"\n           class=\"form-control\"\n           [(ngModel)]=\"cell.newValue\"\n           [name]=\"cell.getId()\"\n           [placeholder]=\"cell.getTitle()\"\n           [disabled]=\"!cell.isEditable()\"\n           (click)=\"onClick.emit($event)\"\n           (keydown.enter)=\"onEdited.emit($event)\"\n           (keydown.esc)=\"onStopEditing.emit()\">\n    `, styles: [\":host input,:host textarea{width:100%;line-height:normal;padding:.375em .75em}\\n\"] }]\n        }], ctorParameters: function () { return []; } });\n\nclass DefaultEditComponent extends EditCellDefault {\n    constructor() {\n        super();\n    }\n    getEditorType() {\n        return this.cell.getColumn().editor && this.cell.getColumn().editor.type;\n    }\n}\nDefaultEditComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: DefaultEditComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\nDefaultEditComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.3.11\", type: DefaultEditComponent, selector: \"table-cell-default-editor\", usesInheritance: true, ngImport: i0, template: \"<div [ngSwitch]=\\\"getEditorType()\\\">\\n    <select-editor *ngSwitchCase=\\\"'list'\\\"\\n                   [cell]=\\\"cell\\\"\\n                   [inputClass]=\\\"inputClass\\\"\\n                   (onClick)=\\\"onClick($event)\\\"\\n                   (onEdited)=\\\"onEdited($event)\\\"\\n                   (onStopEditing)=\\\"onStopEditing()\\\">\\n    </select-editor>\\n\\n    <textarea-editor *ngSwitchCase=\\\"'textarea'\\\"\\n                     [cell]=\\\"cell\\\"\\n                     [inputClass]=\\\"inputClass\\\"\\n                     (onClick)=\\\"onClick($event)\\\"\\n                     (onEdited)=\\\"onEdited($event)\\\"\\n                     (onStopEditing)=\\\"onStopEditing()\\\">\\n    </textarea-editor>\\n\\n    <checkbox-editor *ngSwitchCase=\\\"'checkbox'\\\"\\n                     [cell]=\\\"cell\\\"\\n                     [inputClass]=\\\"inputClass\\\"\\n                     (onClick)=\\\"onClick($event)\\\">\\n    </checkbox-editor>\\n\\n    <completer-editor *ngSwitchCase=\\\"'completer'\\\"\\n                      [cell]=\\\"cell\\\">\\n    </completer-editor>\\n\\n    <input-editor *ngSwitchDefault\\n                  [cell]=\\\"cell\\\"\\n                  [inputClass]=\\\"inputClass\\\"\\n                  (onClick)=\\\"onClick($event)\\\"\\n                  (onEdited)=\\\"onEdited($event)\\\"\\n                  (onStopEditing)=\\\"onStopEditing()\\\">\\n    </input-editor>\\n</div>\", components: [{ type: SelectEditorComponent, selector: \"select-editor\" }, { type: TextareaEditorComponent, selector: \"textarea-editor\" }, { type: CheckboxEditorComponent, selector: \"checkbox-editor\" }, { type: CompleterEditorComponent, selector: \"completer-editor\" }, { type: InputEditorComponent, selector: \"input-editor\" }], directives: [{ type: i2.NgSwitch, selector: \"[ngSwitch]\", inputs: [\"ngSwitch\"] }, { type: i2.NgSwitchCase, selector: \"[ngSwitchCase]\", inputs: [\"ngSwitchCase\"] }, { type: i2.NgSwitchDefault, selector: \"[ngSwitchDefault]\" }] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: DefaultEditComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'table-cell-default-editor', template: \"<div [ngSwitch]=\\\"getEditorType()\\\">\\n    <select-editor *ngSwitchCase=\\\"'list'\\\"\\n                   [cell]=\\\"cell\\\"\\n                   [inputClass]=\\\"inputClass\\\"\\n                   (onClick)=\\\"onClick($event)\\\"\\n                   (onEdited)=\\\"onEdited($event)\\\"\\n                   (onStopEditing)=\\\"onStopEditing()\\\">\\n    </select-editor>\\n\\n    <textarea-editor *ngSwitchCase=\\\"'textarea'\\\"\\n                     [cell]=\\\"cell\\\"\\n                     [inputClass]=\\\"inputClass\\\"\\n                     (onClick)=\\\"onClick($event)\\\"\\n                     (onEdited)=\\\"onEdited($event)\\\"\\n                     (onStopEditing)=\\\"onStopEditing()\\\">\\n    </textarea-editor>\\n\\n    <checkbox-editor *ngSwitchCase=\\\"'checkbox'\\\"\\n                     [cell]=\\\"cell\\\"\\n                     [inputClass]=\\\"inputClass\\\"\\n                     (onClick)=\\\"onClick($event)\\\">\\n    </checkbox-editor>\\n\\n    <completer-editor *ngSwitchCase=\\\"'completer'\\\"\\n                      [cell]=\\\"cell\\\">\\n    </completer-editor>\\n\\n    <input-editor *ngSwitchDefault\\n                  [cell]=\\\"cell\\\"\\n                  [inputClass]=\\\"inputClass\\\"\\n                  (onClick)=\\\"onClick($event)\\\"\\n                  (onEdited)=\\\"onEdited($event)\\\"\\n                  (onStopEditing)=\\\"onStopEditing()\\\">\\n    </input-editor>\\n</div>\" }]\n        }], ctorParameters: function () { return []; } });\n\nclass EditCellComponent {\n    constructor() {\n        this.inputClass = '';\n        this.edited = new EventEmitter();\n    }\n    onEdited(event) {\n        this.edited.next(event);\n        return false;\n    }\n    getEditorType() {\n        return this.cell.getColumn().editor && this.cell.getColumn().editor.type;\n    }\n}\nEditCellComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: EditCellComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\nEditCellComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.3.11\", type: EditCellComponent, selector: \"table-cell-edit-mode\", inputs: { cell: \"cell\", inputClass: \"inputClass\" }, outputs: { edited: \"edited\" }, ngImport: i0, template: `\n      <div [ngSwitch]=\"getEditorType()\">\n        <table-cell-custom-editor *ngSwitchCase=\"'custom'\"\n                                  [cell]=\"cell\"\n                                  [inputClass]=\"inputClass\"\n                                  (edited)=\"onEdited($event)\">\n        </table-cell-custom-editor>\n        <table-cell-default-editor *ngSwitchDefault\n                                  [cell]=\"cell\"\n                                  [inputClass]=\"inputClass\"\n                                  (edited)=\"onEdited($event)\">\n        </table-cell-default-editor>\n      </div>\n    `, isInline: true, components: [{ type: CustomEditComponent, selector: \"table-cell-custom-editor\" }, { type: DefaultEditComponent, selector: \"table-cell-default-editor\" }], directives: [{ type: i2.NgSwitch, selector: \"[ngSwitch]\", inputs: [\"ngSwitch\"] }, { type: i2.NgSwitchCase, selector: \"[ngSwitchCase]\", inputs: [\"ngSwitchCase\"] }, { type: i2.NgSwitchDefault, selector: \"[ngSwitchDefault]\" }] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: EditCellComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'table-cell-edit-mode',\n                    template: `\n      <div [ngSwitch]=\"getEditorType()\">\n        <table-cell-custom-editor *ngSwitchCase=\"'custom'\"\n                                  [cell]=\"cell\"\n                                  [inputClass]=\"inputClass\"\n                                  (edited)=\"onEdited($event)\">\n        </table-cell-custom-editor>\n        <table-cell-default-editor *ngSwitchDefault\n                                  [cell]=\"cell\"\n                                  [inputClass]=\"inputClass\"\n                                  (edited)=\"onEdited($event)\">\n        </table-cell-default-editor>\n      </div>\n    `,\n                }]\n        }], propDecorators: { cell: [{\n                type: Input\n            }], inputClass: [{\n                type: Input\n            }], edited: [{\n                type: Output\n            }] } });\n\nclass CellComponent {\n    constructor() {\n        this.inputClass = '';\n        this.mode = 'inline';\n        this.isInEditing = false;\n        this.edited = new EventEmitter();\n    }\n    onEdited(event) {\n        if (this.isNew) {\n            this.grid.create(this.grid.getNewRow(), this.createConfirm);\n        }\n        else {\n            this.grid.save(this.row, this.editConfirm);\n        }\n    }\n}\nCellComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: CellComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\nCellComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.3.11\", type: CellComponent, selector: \"ng2-smart-table-cell\", inputs: { grid: \"grid\", row: \"row\", editConfirm: \"editConfirm\", createConfirm: \"createConfirm\", isNew: \"isNew\", cell: \"cell\", inputClass: \"inputClass\", mode: \"mode\", isInEditing: \"isInEditing\" }, outputs: { edited: \"edited\" }, ngImport: i0, template: `\n    <table-cell-view-mode *ngIf=\"!isInEditing\" [cell]=\"cell\"></table-cell-view-mode>\n    <table-cell-edit-mode *ngIf=\"isInEditing\" [cell]=\"cell\"\n                          [inputClass]=\"inputClass\"\n                          (edited)=\"onEdited($event)\">\n    </table-cell-edit-mode>\n  `, isInline: true, components: [{ type: ViewCellComponent, selector: \"table-cell-view-mode\", inputs: [\"cell\"] }, { type: EditCellComponent, selector: \"table-cell-edit-mode\", inputs: [\"cell\", \"inputClass\"], outputs: [\"edited\"] }], directives: [{ type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: CellComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'ng2-smart-table-cell',\n                    template: `\n    <table-cell-view-mode *ngIf=\"!isInEditing\" [cell]=\"cell\"></table-cell-view-mode>\n    <table-cell-edit-mode *ngIf=\"isInEditing\" [cell]=\"cell\"\n                          [inputClass]=\"inputClass\"\n                          (edited)=\"onEdited($event)\">\n    </table-cell-edit-mode>\n  `,\n                }]\n        }], propDecorators: { grid: [{\n                type: Input\n            }], row: [{\n                type: Input\n            }], editConfirm: [{\n                type: Input\n            }], createConfirm: [{\n                type: Input\n            }], isNew: [{\n                type: Input\n            }], cell: [{\n                type: Input\n            }], inputClass: [{\n                type: Input\n            }], mode: [{\n                type: Input\n            }], isInEditing: [{\n                type: Input\n            }], edited: [{\n                type: Output\n            }] } });\n\nconst CELL_COMPONENTS = [\n    CellComponent,\n    EditCellDefault,\n    DefaultEditor,\n    CustomEditComponent,\n    DefaultEditComponent,\n    EditCellComponent,\n    CheckboxEditorComponent,\n    CompleterEditorComponent,\n    InputEditorComponent,\n    SelectEditorComponent,\n    TextareaEditorComponent,\n    CustomViewComponent,\n    ViewCellComponent,\n];\nclass CellModule {\n}\nCellModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: CellModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nCellModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: CellModule, declarations: [CellComponent,\n        EditCellDefault,\n        DefaultEditor,\n        CustomEditComponent,\n        DefaultEditComponent,\n        EditCellComponent,\n        CheckboxEditorComponent,\n        CompleterEditorComponent,\n        InputEditorComponent,\n        SelectEditorComponent,\n        TextareaEditorComponent,\n        CustomViewComponent,\n        ViewCellComponent], imports: [CommonModule,\n        FormsModule,\n        Ng2CompleterModule], exports: [CellComponent,\n        EditCellDefault,\n        DefaultEditor,\n        CustomEditComponent,\n        DefaultEditComponent,\n        EditCellComponent,\n        CheckboxEditorComponent,\n        CompleterEditorComponent,\n        InputEditorComponent,\n        SelectEditorComponent,\n        TextareaEditorComponent,\n        CustomViewComponent,\n        ViewCellComponent] });\nCellModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: CellModule, imports: [[\n            CommonModule,\n            FormsModule,\n            Ng2CompleterModule,\n        ]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: CellModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [\n                        CommonModule,\n                        FormsModule,\n                        Ng2CompleterModule,\n                    ],\n                    declarations: [\n                        ...CELL_COMPONENTS,\n                    ],\n                    exports: [\n                        ...CELL_COMPONENTS,\n                    ],\n                }]\n        }] });\n\nclass DataSource {\n    constructor() {\n        this.onChangedSource = new Subject();\n        this.onAddedSource = new Subject();\n        this.onUpdatedSource = new Subject();\n        this.onRemovedSource = new Subject();\n    }\n    refresh() {\n        this.emitOnChanged('refresh');\n    }\n    load(data) {\n        this.emitOnChanged('load');\n        return Promise.resolve();\n    }\n    onChanged() {\n        return this.onChangedSource.asObservable();\n    }\n    onAdded() {\n        return this.onAddedSource.asObservable();\n    }\n    onUpdated() {\n        return this.onUpdatedSource.asObservable();\n    }\n    onRemoved() {\n        return this.onRemovedSource.asObservable();\n    }\n    prepend(element) {\n        this.emitOnAdded(element);\n        this.emitOnChanged('prepend');\n        return Promise.resolve();\n    }\n    append(element) {\n        this.emitOnAdded(element);\n        this.emitOnChanged('append');\n        return Promise.resolve();\n    }\n    add(element) {\n        this.emitOnAdded(element);\n        this.emitOnChanged('add');\n        return Promise.resolve();\n    }\n    remove(element) {\n        this.emitOnRemoved(element);\n        this.emitOnChanged('remove');\n        return Promise.resolve();\n    }\n    update(element, values) {\n        this.emitOnUpdated(element);\n        this.emitOnChanged('update');\n        return Promise.resolve();\n    }\n    empty() {\n        this.emitOnChanged('empty');\n        return Promise.resolve();\n    }\n    setSort(conf, doEmit) {\n        if (doEmit) {\n            this.emitOnChanged('sort');\n        }\n    }\n    setFilter(conf, andOperator, doEmit) {\n        if (doEmit) {\n            this.emitOnChanged('filter');\n        }\n    }\n    addFilter(fieldConf, andOperator, doEmit) {\n        if (doEmit) {\n            this.emitOnChanged('filter');\n        }\n    }\n    setPaging(page, perPage, doEmit) {\n        if (doEmit) {\n            this.emitOnChanged('paging');\n        }\n    }\n    setPage(page, doEmit) {\n        if (doEmit) {\n            this.emitOnChanged('page');\n        }\n    }\n    emitOnRemoved(element) {\n        this.onRemovedSource.next(element);\n    }\n    emitOnUpdated(element) {\n        this.onUpdatedSource.next(element);\n    }\n    emitOnAdded(element) {\n        this.onAddedSource.next(element);\n    }\n    emitOnChanged(action) {\n        this.getElements().then((elements) => this.onChangedSource.next({\n            action: action,\n            elements: elements,\n            paging: this.getPaging(),\n            filter: this.getFilter(),\n            sort: this.getSort(),\n        }));\n    }\n}\n\nclass FilterDefault {\n    constructor() {\n        this.inputClass = '';\n        this.filter = new EventEmitter();\n        this.query = '';\n    }\n    onFilter(query) {\n        this.source.addFilter({\n            field: this.column.id,\n            search: query,\n            filter: this.column.getFilterFunction(),\n        });\n    }\n}\nFilterDefault.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: FilterDefault, deps: [], target: i0.ɵɵFactoryTarget.Component });\nFilterDefault.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.3.11\", type: FilterDefault, selector: \"ng-component\", inputs: { column: \"column\", source: \"source\", inputClass: \"inputClass\" }, outputs: { filter: \"filter\" }, ngImport: i0, template: '', isInline: true });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: FilterDefault, decorators: [{\n            type: Component,\n            args: [{\n                    template: '',\n                }]\n        }], propDecorators: { column: [{\n                type: Input\n            }], source: [{\n                type: Input\n            }], inputClass: [{\n                type: Input\n            }], filter: [{\n                type: Output\n            }] } });\n\nclass CustomFilterComponent extends FilterDefault {\n    constructor(resolver) {\n        super();\n        this.resolver = resolver;\n    }\n    ngOnChanges(changes) {\n        if (this.column && !this.customComponent) {\n            const componentFactory = this.resolver.resolveComponentFactory(this.column.filter.component);\n            this.customComponent = this.dynamicTarget.createComponent(componentFactory);\n            // set @Inputs and @Outputs of custom component\n            this.customComponent.instance.query = this.query;\n            this.customComponent.instance.column = this.column;\n            this.customComponent.instance.source = this.source;\n            this.customComponent.instance.inputClass = this.inputClass;\n            this.customComponent.instance.filter.subscribe((event) => this.onFilter(event));\n        }\n        if (this.customComponent) {\n            this.customComponent.instance.ngOnChanges(changes);\n        }\n    }\n    ngOnDestroy() {\n        if (this.customComponent) {\n            this.customComponent.destroy();\n        }\n    }\n}\nCustomFilterComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: CustomFilterComponent, deps: [{ token: i0.ComponentFactoryResolver }], target: i0.ɵɵFactoryTarget.Component });\nCustomFilterComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.3.11\", type: CustomFilterComponent, selector: \"custom-table-filter\", inputs: { query: \"query\" }, viewQueries: [{ propertyName: \"dynamicTarget\", first: true, predicate: [\"dynamicTarget\"], descendants: true, read: ViewContainerRef, static: true }], usesInheritance: true, usesOnChanges: true, ngImport: i0, template: `<ng-template #dynamicTarget></ng-template>`, isInline: true });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: CustomFilterComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'custom-table-filter',\n                    template: `<ng-template #dynamicTarget></ng-template>`,\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ComponentFactoryResolver }]; }, propDecorators: { query: [{\n                type: Input\n            }], dynamicTarget: [{\n                type: ViewChild,\n                args: ['dynamicTarget', { read: ViewContainerRef, static: true }]\n            }] } });\n\nclass DefaultFilter {\n    constructor() {\n        this.delay = 300;\n        this.filter = new EventEmitter();\n    }\n    ngOnDestroy() {\n        if (this.changesSubscription) {\n            this.changesSubscription.unsubscribe();\n        }\n    }\n    setFilter() {\n        this.filter.emit(this.query);\n    }\n}\nDefaultFilter.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: DefaultFilter, deps: [], target: i0.ɵɵFactoryTarget.Component });\nDefaultFilter.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.3.11\", type: DefaultFilter, selector: \"ng-component\", inputs: { query: \"query\", inputClass: \"inputClass\", column: \"column\" }, outputs: { filter: \"filter\" }, ngImport: i0, template: '', isInline: true });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: DefaultFilter, decorators: [{\n            type: Component,\n            args: [{\n                    template: '',\n                }]\n        }], propDecorators: { query: [{\n                type: Input\n            }], inputClass: [{\n                type: Input\n            }], column: [{\n                type: Input\n            }], filter: [{\n                type: Output\n            }] } });\n\nclass SelectFilterComponent extends DefaultFilter {\n    constructor() {\n        super();\n    }\n    ngOnInit() {\n        this.inputControl.valueChanges\n            .pipe(skip(1), distinctUntilChanged(), debounceTime(this.delay))\n            .subscribe((value) => this.setFilter());\n    }\n}\nSelectFilterComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: SelectFilterComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\nSelectFilterComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.3.11\", type: SelectFilterComponent, selector: \"select-filter\", viewQueries: [{ propertyName: \"inputControl\", first: true, predicate: [\"inputControl\"], descendants: true, read: NgControl, static: true }], usesInheritance: true, ngImport: i0, template: `\n    <select [ngClass]=\"inputClass\"\n            class=\"form-control\"\n            #inputControl\n            [(ngModel)]=\"query\">\n\n        <option value=\"\">{{ column.getFilterConfig().selectText }}</option>\n        <option *ngFor=\"let option of column.getFilterConfig().list\" [value]=\"option.value\">\n          {{ option.title }}\n        </option>\n    </select>\n  `, isInline: true, directives: [{ type: i1.SelectControlValueAccessor, selector: \"select:not([multiple])[formControlName],select:not([multiple])[formControl],select:not([multiple])[ngModel]\", inputs: [\"compareWith\"] }, { type: i2.NgClass, selector: \"[ngClass]\", inputs: [\"class\", \"ngClass\"] }, { type: i1.NgControlStatus, selector: \"[formControlName],[ngModel],[formControl]\" }, { type: i1.NgModel, selector: \"[ngModel]:not([formControlName]):not([formControl])\", inputs: [\"name\", \"disabled\", \"ngModel\", \"ngModelOptions\"], outputs: [\"ngModelChange\"], exportAs: [\"ngModel\"] }, { type: i1.NgSelectOption, selector: \"option\", inputs: [\"ngValue\", \"value\"] }, { type: i1.ɵNgSelectMultipleOption, selector: \"option\", inputs: [\"ngValue\", \"value\"] }, { type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: SelectFilterComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'select-filter',\n                    template: `\n    <select [ngClass]=\"inputClass\"\n            class=\"form-control\"\n            #inputControl\n            [(ngModel)]=\"query\">\n\n        <option value=\"\">{{ column.getFilterConfig().selectText }}</option>\n        <option *ngFor=\"let option of column.getFilterConfig().list\" [value]=\"option.value\">\n          {{ option.title }}\n        </option>\n    </select>\n  `,\n                }]\n        }], ctorParameters: function () { return []; }, propDecorators: { inputControl: [{\n                type: ViewChild,\n                args: ['inputControl', { read: NgControl, static: true }]\n            }] } });\n\nclass CheckboxFilterComponent extends DefaultFilter {\n    constructor() {\n        super();\n        this.filterActive = false;\n        this.inputControl = new FormControl();\n    }\n    ngOnInit() {\n        this.changesSubscription = this.inputControl.valueChanges\n            .pipe(debounceTime(this.delay))\n            .subscribe((checked) => {\n            this.filterActive = true;\n            const trueVal = (this.column.getFilterConfig() && this.column.getFilterConfig().true) || true;\n            const falseVal = (this.column.getFilterConfig() && this.column.getFilterConfig().false) || false;\n            this.query = checked ? trueVal : falseVal;\n            this.setFilter();\n        });\n    }\n    resetFilter(event) {\n        event.preventDefault();\n        this.query = '';\n        this.inputControl.setValue(false, { emitEvent: false });\n        this.filterActive = false;\n        this.setFilter();\n    }\n}\nCheckboxFilterComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: CheckboxFilterComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\nCheckboxFilterComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.3.11\", type: CheckboxFilterComponent, selector: \"checkbox-filter\", usesInheritance: true, ngImport: i0, template: `\n    <input type=\"checkbox\" [formControl]=\"inputControl\" [ngClass]=\"inputClass\" class=\"form-control\">\n    <a href=\"#\" *ngIf=\"filterActive\"\n                (click)=\"resetFilter($event)\">{{column.getFilterConfig()?.resetText || 'reset'}}</a>\n  `, isInline: true, directives: [{ type: i1.CheckboxControlValueAccessor, selector: \"input[type=checkbox][formControlName],input[type=checkbox][formControl],input[type=checkbox][ngModel]\" }, { type: i1.NgControlStatus, selector: \"[formControlName],[ngModel],[formControl]\" }, { type: i1.FormControlDirective, selector: \"[formControl]\", inputs: [\"formControl\", \"disabled\", \"ngModel\"], outputs: [\"ngModelChange\"], exportAs: [\"ngForm\"] }, { type: i2.NgClass, selector: \"[ngClass]\", inputs: [\"class\", \"ngClass\"] }, { type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: CheckboxFilterComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'checkbox-filter',\n                    template: `\n    <input type=\"checkbox\" [formControl]=\"inputControl\" [ngClass]=\"inputClass\" class=\"form-control\">\n    <a href=\"#\" *ngIf=\"filterActive\"\n                (click)=\"resetFilter($event)\">{{column.getFilterConfig()?.resetText || 'reset'}}</a>\n  `,\n                }]\n        }], ctorParameters: function () { return []; } });\n\nclass CompleterFilterComponent extends DefaultFilter {\n    constructor(completerService) {\n        super();\n        this.completerService = completerService;\n        this.completerContent = new Subject();\n    }\n    ngOnInit() {\n        const config = this.column.getFilterConfig().completer;\n        config.dataService = this.completerService.local(config.data, config.searchFields, config.titleField);\n        config.dataService.descriptionField(config.descriptionField);\n        this.changesSubscription = this.completerContent\n            .pipe(map((ev) => (ev && ev.title) || ev || ''), distinctUntilChanged(), debounceTime(this.delay))\n            .subscribe((search) => {\n            this.query = search;\n            this.setFilter();\n        });\n    }\n    inputTextChanged(event) {\n        // workaround to trigger the search event when the home/end buttons are clicked\n        // when this happens the [(ngModel)]=\"query\" is set to \"\" but the (selected) method is not called\n        // so here it gets called manually\n        if (event === '') {\n            this.completerContent.next(event);\n        }\n    }\n}\nCompleterFilterComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: CompleterFilterComponent, deps: [{ token: i1$1.CompleterService }], target: i0.ɵɵFactoryTarget.Component });\nCompleterFilterComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.3.11\", type: CompleterFilterComponent, selector: \"completer-filter\", usesInheritance: true, ngImport: i0, template: `\n    <ng2-completer [(ngModel)]=\"query\"\n                   (ngModelChange)=\"inputTextChanged($event)\"\n                   [dataService]=\"column.getFilterConfig().completer.dataService\"\n                   [minSearchLength]=\"column.getFilterConfig().completer.minSearchLength || 0\"\n                   [pause]=\"column.getFilterConfig().completer.pause || 0\"\n                   [placeholder]=\"column.getFilterConfig().completer.placeholder || 'Start typing...'\"\n                   (selected)=\"completerContent.next($event)\">\n    </ng2-completer>\n  `, isInline: true, components: [{ type: i1$1.CompleterCmp, selector: \"ng2-completer\", inputs: [\"inputName\", \"inputId\", \"pause\", \"minSearchLength\", \"maxChars\", \"overrideSuggested\", \"clearSelected\", \"clearUnselected\", \"fillHighlighted\", \"placeholder\", \"autoMatch\", \"disableInput\", \"autofocus\", \"openOnFocus\", \"openOnClick\", \"selectOnClick\", \"selectOnFocus\", \"autoHighlight\", \"datasource\", \"dataService\", \"textNoResults\", \"textSearching\", \"matchClass\", \"fieldTabindex\", \"inputClass\", \"initialValue\"], outputs: [\"selected\", \"highlighted\", \"blur\", \"click\", \"focus\", \"opened\", \"keyup\", \"keydown\"] }], directives: [{ type: i1.NgControlStatus, selector: \"[formControlName],[ngModel],[formControl]\" }, { type: i1.NgModel, selector: \"[ngModel]:not([formControlName]):not([formControl])\", inputs: [\"name\", \"disabled\", \"ngModel\", \"ngModelOptions\"], outputs: [\"ngModelChange\"], exportAs: [\"ngModel\"] }] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: CompleterFilterComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'completer-filter',\n                    template: `\n    <ng2-completer [(ngModel)]=\"query\"\n                   (ngModelChange)=\"inputTextChanged($event)\"\n                   [dataService]=\"column.getFilterConfig().completer.dataService\"\n                   [minSearchLength]=\"column.getFilterConfig().completer.minSearchLength || 0\"\n                   [pause]=\"column.getFilterConfig().completer.pause || 0\"\n                   [placeholder]=\"column.getFilterConfig().completer.placeholder || 'Start typing...'\"\n                   (selected)=\"completerContent.next($event)\">\n    </ng2-completer>\n  `,\n                }]\n        }], ctorParameters: function () { return [{ type: i1$1.CompleterService }]; } });\n\nclass InputFilterComponent extends DefaultFilter {\n    constructor() {\n        super();\n        this.inputControl = new FormControl();\n    }\n    ngOnInit() {\n        if (this.query) {\n            this.inputControl.setValue(this.query);\n        }\n        this.inputControl.valueChanges\n            .pipe(distinctUntilChanged(), debounceTime(this.delay))\n            .subscribe((value) => {\n            this.query = this.inputControl.value;\n            this.setFilter();\n        });\n    }\n    ngOnChanges(changes) {\n        if (changes.query) {\n            this.inputControl.setValue(this.query);\n        }\n    }\n}\nInputFilterComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: InputFilterComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\nInputFilterComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.3.11\", type: InputFilterComponent, selector: \"input-filter\", usesInheritance: true, usesOnChanges: true, ngImport: i0, template: `\n    <input\n      [ngClass]=\"inputClass\"\n      [formControl]=\"inputControl\"\n      class=\"form-control\"\n      type=\"text\"\n      placeholder=\"{{ column.title }}\"/>\n  `, isInline: true, directives: [{ type: i1.DefaultValueAccessor, selector: \"input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]\" }, { type: i2.NgClass, selector: \"[ngClass]\", inputs: [\"class\", \"ngClass\"] }, { type: i1.NgControlStatus, selector: \"[formControlName],[ngModel],[formControl]\" }, { type: i1.FormControlDirective, selector: \"[formControl]\", inputs: [\"formControl\", \"disabled\", \"ngModel\"], outputs: [\"ngModelChange\"], exportAs: [\"ngForm\"] }] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: InputFilterComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'input-filter',\n                    template: `\n    <input\n      [ngClass]=\"inputClass\"\n      [formControl]=\"inputControl\"\n      class=\"form-control\"\n      type=\"text\"\n      placeholder=\"{{ column.title }}\"/>\n  `,\n                }]\n        }], ctorParameters: function () { return []; } });\n\nclass DefaultFilterComponent extends FilterDefault {\n}\nDefaultFilterComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: DefaultFilterComponent, deps: null, target: i0.ɵɵFactoryTarget.Component });\nDefaultFilterComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.3.11\", type: DefaultFilterComponent, selector: \"default-table-filter\", inputs: { query: \"query\" }, usesInheritance: true, ngImport: i0, template: `\n    <ng-container [ngSwitch]=\"column.getFilterType()\">\n      <select-filter *ngSwitchCase=\"'list'\"\n                     [query]=\"query\"\n                     [ngClass]=\"inputClass\"\n                     [column]=\"column\"\n                     (filter)=\"onFilter($event)\">\n      </select-filter>\n      <checkbox-filter *ngSwitchCase=\"'checkbox'\"\n                       [query]=\"query\"\n                       [ngClass]=\"inputClass\"\n                       [column]=\"column\"\n                       (filter)=\"onFilter($event)\">\n      </checkbox-filter>\n      <completer-filter *ngSwitchCase=\"'completer'\"\n                        [query]=\"query\"\n                        [ngClass]=\"inputClass\"\n                        [column]=\"column\"\n                        (filter)=\"onFilter($event)\">\n      </completer-filter>\n      <input-filter *ngSwitchDefault\n                    [query]=\"query\"\n                    [ngClass]=\"inputClass\"\n                    [column]=\"column\"\n                    (filter)=\"onFilter($event)\">\n      </input-filter>\n    </ng-container>\n  `, isInline: true, components: [{ type: SelectFilterComponent, selector: \"select-filter\" }, { type: CheckboxFilterComponent, selector: \"checkbox-filter\" }, { type: CompleterFilterComponent, selector: \"completer-filter\" }, { type: InputFilterComponent, selector: \"input-filter\" }], directives: [{ type: i2.NgSwitch, selector: \"[ngSwitch]\", inputs: [\"ngSwitch\"] }, { type: i2.NgSwitchCase, selector: \"[ngSwitchCase]\", inputs: [\"ngSwitchCase\"] }, { type: i2.NgClass, selector: \"[ngClass]\", inputs: [\"class\", \"ngClass\"] }, { type: i2.NgSwitchDefault, selector: \"[ngSwitchDefault]\" }] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: DefaultFilterComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'default-table-filter',\n                    template: `\n    <ng-container [ngSwitch]=\"column.getFilterType()\">\n      <select-filter *ngSwitchCase=\"'list'\"\n                     [query]=\"query\"\n                     [ngClass]=\"inputClass\"\n                     [column]=\"column\"\n                     (filter)=\"onFilter($event)\">\n      </select-filter>\n      <checkbox-filter *ngSwitchCase=\"'checkbox'\"\n                       [query]=\"query\"\n                       [ngClass]=\"inputClass\"\n                       [column]=\"column\"\n                       (filter)=\"onFilter($event)\">\n      </checkbox-filter>\n      <completer-filter *ngSwitchCase=\"'completer'\"\n                        [query]=\"query\"\n                        [ngClass]=\"inputClass\"\n                        [column]=\"column\"\n                        (filter)=\"onFilter($event)\">\n      </completer-filter>\n      <input-filter *ngSwitchDefault\n                    [query]=\"query\"\n                    [ngClass]=\"inputClass\"\n                    [column]=\"column\"\n                    (filter)=\"onFilter($event)\">\n      </input-filter>\n    </ng-container>\n  `,\n                }]\n        }], propDecorators: { query: [{\n                type: Input\n            }] } });\n\nclass FilterComponent extends FilterDefault {\n    constructor() {\n        super(...arguments);\n        this.query = '';\n    }\n    ngOnChanges(changes) {\n        if (changes.source) {\n            if (!changes.source.firstChange) {\n                this.dataChangedSub.unsubscribe();\n            }\n            this.dataChangedSub = this.source.onChanged().subscribe((dataChanges) => {\n                const filterConf = this.source.getFilter();\n                if (filterConf && filterConf.filters && filterConf.filters.length === 0) {\n                    this.query = '';\n                    // add a check for existing filters an set the query if one exists for this column\n                    // this covers instances where the filter is set by user code while maintaining existing functionality\n                }\n                else if (filterConf && filterConf.filters && filterConf.filters.length > 0) {\n                    filterConf.filters.forEach((k, v) => {\n                        if (k.field == this.column.id) {\n                            this.query = k.search;\n                        }\n                    });\n                }\n            });\n        }\n    }\n}\nFilterComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: FilterComponent, deps: null, target: i0.ɵɵFactoryTarget.Component });\nFilterComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.3.11\", type: FilterComponent, selector: \"ng2-smart-table-filter\", usesInheritance: true, usesOnChanges: true, ngImport: i0, template: `\n      <div class=\"ng2-smart-filter\" *ngIf=\"column.isFilterable\" [ngSwitch]=\"column.getFilterType()\">\n        <custom-table-filter *ngSwitchCase=\"'custom'\"\n                             [query]=\"query\"\n                             [column]=\"column\"\n                             [source]=\"source\"\n                             [inputClass]=\"inputClass\"\n                             (filter)=\"onFilter($event)\">\n        </custom-table-filter>\n        <default-table-filter *ngSwitchDefault\n                              [query]=\"query\"\n                              [column]=\"column\"\n                              [source]=\"source\"\n                              [inputClass]=\"inputClass\"\n                              (filter)=\"onFilter($event)\">\n        </default-table-filter>\n      </div>\n    `, isInline: true, styles: [\":host .ng2-smart-filter ::ng-deep input,:host .ng2-smart-filter ::ng-deep select{width:100%;line-height:normal;padding:.375em .75em;font-weight:400}:host .ng2-smart-filter ::ng-deep input[type=search]{box-sizing:inherit}:host .ng2-smart-filter ::ng-deep .completer-dropdown-holder{font-weight:400}:host .ng2-smart-filter ::ng-deep a{font-weight:400}\\n\"], components: [{ type: CustomFilterComponent, selector: \"custom-table-filter\", inputs: [\"query\"] }, { type: DefaultFilterComponent, selector: \"default-table-filter\", inputs: [\"query\"] }], directives: [{ type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { type: i2.NgSwitch, selector: \"[ngSwitch]\", inputs: [\"ngSwitch\"] }, { type: i2.NgSwitchCase, selector: \"[ngSwitchCase]\", inputs: [\"ngSwitchCase\"] }, { type: i2.NgSwitchDefault, selector: \"[ngSwitchDefault]\" }] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: FilterComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'ng2-smart-table-filter', template: `\n      <div class=\"ng2-smart-filter\" *ngIf=\"column.isFilterable\" [ngSwitch]=\"column.getFilterType()\">\n        <custom-table-filter *ngSwitchCase=\"'custom'\"\n                             [query]=\"query\"\n                             [column]=\"column\"\n                             [source]=\"source\"\n                             [inputClass]=\"inputClass\"\n                             (filter)=\"onFilter($event)\">\n        </custom-table-filter>\n        <default-table-filter *ngSwitchDefault\n                              [query]=\"query\"\n                              [column]=\"column\"\n                              [source]=\"source\"\n                              [inputClass]=\"inputClass\"\n                              (filter)=\"onFilter($event)\">\n        </default-table-filter>\n      </div>\n    `, styles: [\":host .ng2-smart-filter ::ng-deep input,:host .ng2-smart-filter ::ng-deep select{width:100%;line-height:normal;padding:.375em .75em;font-weight:400}:host .ng2-smart-filter ::ng-deep input[type=search]{box-sizing:inherit}:host .ng2-smart-filter ::ng-deep .completer-dropdown-holder{font-weight:400}:host .ng2-smart-filter ::ng-deep a{font-weight:400}\\n\"] }]\n        }] });\n\nconst FILTER_COMPONENTS = [\n    FilterDefault,\n    DefaultFilter,\n    FilterComponent,\n    DefaultFilterComponent,\n    CustomFilterComponent,\n    CheckboxFilterComponent,\n    CompleterFilterComponent,\n    InputFilterComponent,\n    SelectFilterComponent,\n];\nclass FilterModule {\n}\nFilterModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: FilterModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nFilterModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: FilterModule, declarations: [FilterDefault,\n        DefaultFilter,\n        FilterComponent,\n        DefaultFilterComponent,\n        CustomFilterComponent,\n        CheckboxFilterComponent,\n        CompleterFilterComponent,\n        InputFilterComponent,\n        SelectFilterComponent], imports: [CommonModule,\n        FormsModule,\n        ReactiveFormsModule,\n        Ng2CompleterModule], exports: [FilterDefault,\n        DefaultFilter,\n        FilterComponent,\n        DefaultFilterComponent,\n        CustomFilterComponent,\n        CheckboxFilterComponent,\n        CompleterFilterComponent,\n        InputFilterComponent,\n        SelectFilterComponent] });\nFilterModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: FilterModule, imports: [[\n            CommonModule,\n            FormsModule,\n            ReactiveFormsModule,\n            Ng2CompleterModule,\n        ]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: FilterModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [\n                        CommonModule,\n                        FormsModule,\n                        ReactiveFormsModule,\n                        Ng2CompleterModule,\n                    ],\n                    declarations: [\n                        ...FILTER_COMPONENTS,\n                    ],\n                    exports: [\n                        ...FILTER_COMPONENTS,\n                    ],\n                }]\n        }] });\n\nclass PagerComponent {\n    constructor() {\n        this.perPageSelect = [];\n        this.changePage = new EventEmitter();\n        this.count = 0;\n    }\n    ngOnChanges(changes) {\n        if (changes.source) {\n            if (!changes.source.firstChange) {\n                this.dataChangedSub.unsubscribe();\n            }\n            this.dataChangedSub = this.source.onChanged().subscribe((dataChanges) => {\n                this.page = this.source.getPaging().page;\n                this.perPage = this.source.getPaging().perPage;\n                this.currentPerPage = this.perPage;\n                this.count = this.source.count();\n                if (this.isPageOutOfBounce()) {\n                    this.source.setPage(--this.page);\n                }\n                this.processPageChange(dataChanges);\n                this.initPages();\n            });\n        }\n    }\n    /**\n     * We change the page here depending on the action performed against data source\n     * if a new element was added to the end of the table - then change the page to the last\n     * if a new element was added to the beginning of the table - then to the first page\n     * @param changes\n     */\n    processPageChange(changes) {\n        if (changes['action'] === 'prepend') {\n            this.source.setPage(1);\n        }\n        if (changes['action'] === 'append') {\n            this.source.setPage(this.getLast());\n        }\n    }\n    shouldShow() {\n        return this.source.count() > this.perPage;\n    }\n    paginate(page) {\n        this.source.setPage(page);\n        this.page = page;\n        this.changePage.emit({ page });\n        return false;\n    }\n    next() {\n        return this.paginate(this.getPage() + 1);\n    }\n    prev() {\n        return this.paginate(this.getPage() - 1);\n    }\n    getPage() {\n        return this.page;\n    }\n    getPages() {\n        return this.pages;\n    }\n    getLast() {\n        return Math.ceil(this.count / this.perPage);\n    }\n    isPageOutOfBounce() {\n        return (this.page * this.perPage) >= (this.count + this.perPage) && this.page > 1;\n    }\n    initPages() {\n        const pagesCount = this.getLast();\n        let showPagesCount = 4;\n        showPagesCount = pagesCount < showPagesCount ? pagesCount : showPagesCount;\n        this.pages = [];\n        if (this.shouldShow()) {\n            let middleOne = Math.ceil(showPagesCount / 2);\n            middleOne = this.page >= middleOne ? this.page : middleOne;\n            let lastOne = middleOne + Math.floor(showPagesCount / 2);\n            lastOne = lastOne >= pagesCount ? pagesCount : lastOne;\n            const firstOne = lastOne - showPagesCount + 1;\n            for (let i = firstOne; i <= lastOne; i++) {\n                this.pages.push(i);\n            }\n        }\n    }\n    onChangePerPage(event) {\n        if (this.currentPerPage) {\n            if (typeof this.currentPerPage === 'string' && this.currentPerPage.toLowerCase() === 'all') {\n                this.source.getPaging().perPage = null;\n            }\n            else {\n                this.source.getPaging().perPage = this.currentPerPage * 1;\n                this.source.refresh();\n            }\n            this.initPages();\n        }\n    }\n}\nPagerComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: PagerComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\nPagerComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.3.11\", type: PagerComponent, selector: \"ng2-smart-table-pager\", inputs: { source: \"source\", perPageSelect: \"perPageSelect\" }, outputs: { changePage: \"changePage\" }, usesOnChanges: true, ngImport: i0, template: `\n    <nav *ngIf=\"shouldShow()\" class=\"ng2-smart-pagination-nav\">\n      <ul class=\"ng2-smart-pagination pagination\">\n        <li class=\"ng2-smart-page-item page-item\" [ngClass]=\"{disabled: getPage() == 1}\">\n          <a class=\"ng2-smart-page-link page-link\" href=\"#\"\n          (click)=\"getPage() == 1 ? false : paginate(1)\" aria-label=\"First\">\n            <span aria-hidden=\"true\">&laquo;</span>\n            <span class=\"sr-only\">First</span>\n          </a>\n        </li>\n        <li class=\"ng2-smart-page-item page-item\" [ngClass]=\"{disabled: getPage() == 1}\">\n          <a class=\"ng2-smart-page-link page-link page-link-prev\" href=\"#\"\n             (click)=\"getPage() == 1 ? false : prev()\" aria-label=\"Prev\">\n            <span aria-hidden=\"true\">&lt;</span>\n            <span class=\"sr-only\">Prev</span>\n          </a>\n        </li>\n        <li class=\"ng2-smart-page-item page-item\"\n        [ngClass]=\"{active: getPage() == page}\" *ngFor=\"let page of getPages()\">\n          <span class=\"ng2-smart-page-link page-link\"\n          *ngIf=\"getPage() == page\">{{ page }} <span class=\"sr-only\">(current)</span></span>\n          <a class=\"ng2-smart-page-link page-link\" href=\"#\"\n          (click)=\"paginate(page)\" *ngIf=\"getPage() != page\">{{ page }}</a>\n        </li>\n\n        <li class=\"ng2-smart-page-item page-item\"\n            [ngClass]=\"{disabled: getPage() == getLast()}\">\n          <a class=\"ng2-smart-page-link page-link page-link-next\" href=\"#\"\n             (click)=\"getPage() == getLast() ? false : next()\" aria-label=\"Next\">\n            <span aria-hidden=\"true\">&gt;</span>\n            <span class=\"sr-only\">Next</span>\n          </a>\n        </li>\n        \n        <li class=\"ng2-smart-page-item page-item\"\n        [ngClass]=\"{disabled: getPage() == getLast()}\">\n          <a class=\"ng2-smart-page-link page-link\" href=\"#\"\n          (click)=\"getPage() == getLast() ? false : paginate(getLast())\" aria-label=\"Last\">\n            <span aria-hidden=\"true\">&raquo;</span>\n            <span class=\"sr-only\">Last</span>\n          </a>\n        </li>\n      </ul>\n    </nav>\n    \n    <nav *ngIf=\"perPageSelect && perPageSelect.length > 0\" class=\"ng2-smart-pagination-per-page\">\n      <label for=\"per-page\">\n        Per Page:\n      </label>\n      <select (change)=\"onChangePerPage($event)\" [(ngModel)]=\"currentPerPage\" id=\"per-page\">\n        <option *ngFor=\"let item of perPageSelect\" [value]=\"item\">{{ item }}</option>\n      </select>\n    </nav>\n  `, isInline: true, styles: [\".ng2-smart-pagination{display:inline-flex;font-size:.875em;padding:0}.ng2-smart-pagination .sr-only{position:absolute;width:1px;height:1px;padding:0;margin:-1px;overflow:hidden;clip:rect(0,0,0,0);border:0}.ng2-smart-pagination .ng2-smart-page-item{display:inline}.ng2-smart-pagination .page-link-next,.ng2-smart-pagination .page-link-prev{font-size:10px}:host{display:flex;justify-content:space-between}:host select{margin:1rem 0 1rem 1rem}:host label{margin:1rem 0 1rem 1rem;line-height:2.5rem}\\n\"], directives: [{ type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { type: i2.NgClass, selector: \"[ngClass]\", inputs: [\"class\", \"ngClass\"] }, { type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }, { type: i1.SelectControlValueAccessor, selector: \"select:not([multiple])[formControlName],select:not([multiple])[formControl],select:not([multiple])[ngModel]\", inputs: [\"compareWith\"] }, { type: i1.NgControlStatus, selector: \"[formControlName],[ngModel],[formControl]\" }, { type: i1.NgModel, selector: \"[ngModel]:not([formControlName]):not([formControl])\", inputs: [\"name\", \"disabled\", \"ngModel\", \"ngModelOptions\"], outputs: [\"ngModelChange\"], exportAs: [\"ngModel\"] }, { type: i1.NgSelectOption, selector: \"option\", inputs: [\"ngValue\", \"value\"] }, { type: i1.ɵNgSelectMultipleOption, selector: \"option\", inputs: [\"ngValue\", \"value\"] }] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: PagerComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'ng2-smart-table-pager', template: `\n    <nav *ngIf=\"shouldShow()\" class=\"ng2-smart-pagination-nav\">\n      <ul class=\"ng2-smart-pagination pagination\">\n        <li class=\"ng2-smart-page-item page-item\" [ngClass]=\"{disabled: getPage() == 1}\">\n          <a class=\"ng2-smart-page-link page-link\" href=\"#\"\n          (click)=\"getPage() == 1 ? false : paginate(1)\" aria-label=\"First\">\n            <span aria-hidden=\"true\">&laquo;</span>\n            <span class=\"sr-only\">First</span>\n          </a>\n        </li>\n        <li class=\"ng2-smart-page-item page-item\" [ngClass]=\"{disabled: getPage() == 1}\">\n          <a class=\"ng2-smart-page-link page-link page-link-prev\" href=\"#\"\n             (click)=\"getPage() == 1 ? false : prev()\" aria-label=\"Prev\">\n            <span aria-hidden=\"true\">&lt;</span>\n            <span class=\"sr-only\">Prev</span>\n          </a>\n        </li>\n        <li class=\"ng2-smart-page-item page-item\"\n        [ngClass]=\"{active: getPage() == page}\" *ngFor=\"let page of getPages()\">\n          <span class=\"ng2-smart-page-link page-link\"\n          *ngIf=\"getPage() == page\">{{ page }} <span class=\"sr-only\">(current)</span></span>\n          <a class=\"ng2-smart-page-link page-link\" href=\"#\"\n          (click)=\"paginate(page)\" *ngIf=\"getPage() != page\">{{ page }}</a>\n        </li>\n\n        <li class=\"ng2-smart-page-item page-item\"\n            [ngClass]=\"{disabled: getPage() == getLast()}\">\n          <a class=\"ng2-smart-page-link page-link page-link-next\" href=\"#\"\n             (click)=\"getPage() == getLast() ? false : next()\" aria-label=\"Next\">\n            <span aria-hidden=\"true\">&gt;</span>\n            <span class=\"sr-only\">Next</span>\n          </a>\n        </li>\n        \n        <li class=\"ng2-smart-page-item page-item\"\n        [ngClass]=\"{disabled: getPage() == getLast()}\">\n          <a class=\"ng2-smart-page-link page-link\" href=\"#\"\n          (click)=\"getPage() == getLast() ? false : paginate(getLast())\" aria-label=\"Last\">\n            <span aria-hidden=\"true\">&raquo;</span>\n            <span class=\"sr-only\">Last</span>\n          </a>\n        </li>\n      </ul>\n    </nav>\n    \n    <nav *ngIf=\"perPageSelect && perPageSelect.length > 0\" class=\"ng2-smart-pagination-per-page\">\n      <label for=\"per-page\">\n        Per Page:\n      </label>\n      <select (change)=\"onChangePerPage($event)\" [(ngModel)]=\"currentPerPage\" id=\"per-page\">\n        <option *ngFor=\"let item of perPageSelect\" [value]=\"item\">{{ item }}</option>\n      </select>\n    </nav>\n  `, styles: [\".ng2-smart-pagination{display:inline-flex;font-size:.875em;padding:0}.ng2-smart-pagination .sr-only{position:absolute;width:1px;height:1px;padding:0;margin:-1px;overflow:hidden;clip:rect(0,0,0,0);border:0}.ng2-smart-pagination .ng2-smart-page-item{display:inline}.ng2-smart-pagination .page-link-next,.ng2-smart-pagination .page-link-prev{font-size:10px}:host{display:flex;justify-content:space-between}:host select{margin:1rem 0 1rem 1rem}:host label{margin:1rem 0 1rem 1rem;line-height:2.5rem}\\n\"] }]\n        }], propDecorators: { source: [{\n                type: Input\n            }], perPageSelect: [{\n                type: Input\n            }], changePage: [{\n                type: Output\n            }] } });\n\nclass PagerModule {\n}\nPagerModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: PagerModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nPagerModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: PagerModule, declarations: [PagerComponent], imports: [CommonModule,\n        FormsModule], exports: [PagerComponent] });\nPagerModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: PagerModule, imports: [[\n            CommonModule,\n            FormsModule,\n        ]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: PagerModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [\n                        CommonModule,\n                        FormsModule,\n                    ],\n                    declarations: [\n                        PagerComponent,\n                    ],\n                    exports: [\n                        PagerComponent,\n                    ],\n                }]\n        }] });\n\nclass TbodyCustomComponent {\n    constructor() {\n        this.custom = new EventEmitter();\n    }\n    onCustom(action, event) {\n        event.preventDefault();\n        event.stopPropagation();\n        this.custom.emit({\n            action: action.name,\n            data: this.row.getData(),\n            source: this.source\n        });\n    }\n}\nTbodyCustomComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: TbodyCustomComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\nTbodyCustomComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.3.11\", type: TbodyCustomComponent, selector: \"ng2-st-tbody-custom\", inputs: { grid: \"grid\", row: \"row\", source: \"source\" }, outputs: { custom: \"custom\" }, ngImport: i0, template: `\n      <a *ngFor=\"let action of grid.getSetting('actions.custom')\" href=\"#\"\n         class=\"ng2-smart-action ng2-smart-action-custom-custom\" \n         [innerHTML]=\"action.title\"\n         (click)=\"onCustom(action, $event)\"></a>\n        `, isInline: true, directives: [{ type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: TbodyCustomComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'ng2-st-tbody-custom',\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    template: `\n      <a *ngFor=\"let action of grid.getSetting('actions.custom')\" href=\"#\"\n         class=\"ng2-smart-action ng2-smart-action-custom-custom\" \n         [innerHTML]=\"action.title\"\n         (click)=\"onCustom(action, $event)\"></a>\n        `\n                }]\n        }], propDecorators: { grid: [{\n                type: Input\n            }], row: [{\n                type: Input\n            }], source: [{\n                type: Input\n            }], custom: [{\n                type: Output\n            }] } });\n\nclass TbodyEditDeleteComponent {\n    constructor() {\n        this.edit = new EventEmitter();\n        this.delete = new EventEmitter();\n        this.editRowSelect = new EventEmitter();\n    }\n    onEdit(event) {\n        event.preventDefault();\n        event.stopPropagation();\n        this.editRowSelect.emit(this.row);\n        if (this.grid.getSetting('mode') === 'external') {\n            this.edit.emit({\n                data: this.row.getData(),\n                source: this.source,\n            });\n        }\n        else {\n            this.grid.edit(this.row);\n        }\n    }\n    onDelete(event) {\n        event.preventDefault();\n        event.stopPropagation();\n        if (this.grid.getSetting('mode') === 'external') {\n            this.delete.emit({\n                data: this.row.getData(),\n                source: this.source,\n            });\n        }\n        else {\n            this.grid.delete(this.row, this.deleteConfirm);\n        }\n    }\n    ngOnChanges() {\n        this.isActionEdit = this.grid.getSetting('actions.edit');\n        this.isActionDelete = this.grid.getSetting('actions.delete');\n        this.editRowButtonContent = this.grid.getSetting('edit.editButtonContent');\n        this.deleteRowButtonContent = this.grid.getSetting('delete.deleteButtonContent');\n    }\n}\nTbodyEditDeleteComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: TbodyEditDeleteComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\nTbodyEditDeleteComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.3.11\", type: TbodyEditDeleteComponent, selector: \"ng2-st-tbody-edit-delete\", inputs: { grid: \"grid\", row: \"row\", source: \"source\", deleteConfirm: \"deleteConfirm\", editConfirm: \"editConfirm\" }, outputs: { edit: \"edit\", delete: \"delete\", editRowSelect: \"editRowSelect\" }, usesOnChanges: true, ngImport: i0, template: `\n    <a href=\"#\" *ngIf=\"isActionEdit\" class=\"ng2-smart-action ng2-smart-action-edit-edit\"\n        [innerHTML]=\"editRowButtonContent\" (click)=\"onEdit($event)\"></a>\n    <a href=\"#\" *ngIf=\"isActionDelete\" class=\"ng2-smart-action ng2-smart-action-delete-delete\"\n        [innerHTML]=\"deleteRowButtonContent\" (click)=\"onDelete($event)\"></a>\n  `, isInline: true, directives: [{ type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: TbodyEditDeleteComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'ng2-st-tbody-edit-delete',\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    template: `\n    <a href=\"#\" *ngIf=\"isActionEdit\" class=\"ng2-smart-action ng2-smart-action-edit-edit\"\n        [innerHTML]=\"editRowButtonContent\" (click)=\"onEdit($event)\"></a>\n    <a href=\"#\" *ngIf=\"isActionDelete\" class=\"ng2-smart-action ng2-smart-action-delete-delete\"\n        [innerHTML]=\"deleteRowButtonContent\" (click)=\"onDelete($event)\"></a>\n  `,\n                }]\n        }], propDecorators: { grid: [{\n                type: Input\n            }], row: [{\n                type: Input\n            }], source: [{\n                type: Input\n            }], deleteConfirm: [{\n                type: Input\n            }], editConfirm: [{\n                type: Input\n            }], edit: [{\n                type: Output\n            }], delete: [{\n                type: Output\n            }], editRowSelect: [{\n                type: Output\n            }] } });\n\nclass TbodyCreateCancelComponent {\n    onSave(event) {\n        event.preventDefault();\n        event.stopPropagation();\n        this.grid.save(this.row, this.editConfirm);\n    }\n    onCancelEdit(event) {\n        event.preventDefault();\n        event.stopPropagation();\n        this.row.isInEditing = false;\n    }\n    ngOnChanges() {\n        this.saveButtonContent = this.grid.getSetting('edit.saveButtonContent');\n        this.cancelButtonContent = this.grid.getSetting('edit.cancelButtonContent');\n    }\n}\nTbodyCreateCancelComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: TbodyCreateCancelComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\nTbodyCreateCancelComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.3.11\", type: TbodyCreateCancelComponent, selector: \"ng2-st-tbody-create-cancel\", inputs: { grid: \"grid\", row: \"row\", editConfirm: \"editConfirm\" }, usesOnChanges: true, ngImport: i0, template: `\n    <a href=\"#\" class=\"ng2-smart-action ng2-smart-action-edit-save\"\n        [innerHTML]=\"saveButtonContent\" (click)=\"onSave($event)\"></a>\n    <a href=\"#\" class=\"ng2-smart-action ng2-smart-action-edit-cancel\"\n        [innerHTML]=\"cancelButtonContent\" (click)=\"onCancelEdit($event)\"></a>\n  `, isInline: true });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: TbodyCreateCancelComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'ng2-st-tbody-create-cancel',\n                    template: `\n    <a href=\"#\" class=\"ng2-smart-action ng2-smart-action-edit-save\"\n        [innerHTML]=\"saveButtonContent\" (click)=\"onSave($event)\"></a>\n    <a href=\"#\" class=\"ng2-smart-action ng2-smart-action-edit-cancel\"\n        [innerHTML]=\"cancelButtonContent\" (click)=\"onCancelEdit($event)\"></a>\n  `,\n                }]\n        }], propDecorators: { grid: [{\n                type: Input\n            }], row: [{\n                type: Input\n            }], editConfirm: [{\n                type: Input\n            }] } });\n\nclass Ng2SmartTableTbodyComponent {\n    constructor() {\n        this.save = new EventEmitter();\n        this.cancel = new EventEmitter();\n        this.edit = new EventEmitter();\n        this.delete = new EventEmitter();\n        this.custom = new EventEmitter();\n        this.edited = new EventEmitter();\n        this.userSelectRow = new EventEmitter();\n        this.editRowSelect = new EventEmitter();\n        this.multipleSelectRow = new EventEmitter();\n        this.rowHover = new EventEmitter();\n    }\n    get tableColumnsCount() {\n        const actionColumns = this.isActionAdd || this.isActionEdit || this.isActionDelete ? 1 : 0;\n        return this.grid.getColumns().length + actionColumns;\n    }\n    ngOnChanges() {\n        this.isMultiSelectVisible = this.grid.isMultiSelectVisible();\n        this.showActionColumnLeft = this.grid.showActionColumn('left');\n        this.mode = this.grid.getSetting('mode');\n        this.editInputClass = this.grid.getSetting('edit.inputClass');\n        this.showActionColumnRight = this.grid.showActionColumn('right');\n        this.isActionAdd = this.grid.getSetting('actions.add');\n        this.isActionEdit = this.grid.getSetting('actions.edit');\n        this.isActionDelete = this.grid.getSetting('actions.delete');\n        this.noDataMessage = this.grid.getSetting('noDataMessage');\n    }\n    getVisibleCells(cells) {\n        return (cells || []).filter((cell) => !cell.getColumn().hide);\n    }\n}\nNg2SmartTableTbodyComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: Ng2SmartTableTbodyComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\nNg2SmartTableTbodyComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.3.11\", type: Ng2SmartTableTbodyComponent, selector: \"[ng2-st-tbody]\", inputs: { grid: \"grid\", source: \"source\", deleteConfirm: \"deleteConfirm\", editConfirm: \"editConfirm\", rowClassFunction: \"rowClassFunction\" }, outputs: { save: \"save\", cancel: \"cancel\", edit: \"edit\", delete: \"delete\", custom: \"custom\", edited: \"edited\", userSelectRow: \"userSelectRow\", editRowSelect: \"editRowSelect\", multipleSelectRow: \"multipleSelectRow\", rowHover: \"rowHover\" }, usesOnChanges: true, ngImport: i0, template: \"<tr *ngFor=\\\"let row of grid.getRows()\\\" (click)=\\\"userSelectRow.emit(row)\\\" (mouseover)=\\\"rowHover.emit(row)\\\" class=\\\"ng2-smart-row\\\" [className]=\\\"rowClassFunction(row)\\\" [ngClass]=\\\"{selected: row.isSelected}\\\">\\n  <td *ngIf=\\\"isMultiSelectVisible\\\" class=\\\"ng2-smart-actions ng2-smart-action-multiple-select\\\" (click)=\\\"multipleSelectRow.emit(row)\\\">\\n    <input type=\\\"checkbox\\\" class=\\\"form-control\\\" [ngModel]=\\\"row.isSelected\\\">\\n  </td>\\n  <td *ngIf=\\\"!row.isInEditing && showActionColumnLeft\\\" class=\\\"ng2-smart-actions\\\">\\n    <ng2-st-tbody-custom [grid]=\\\"grid\\\" (custom)=\\\"custom.emit($event)\\\" [row]=\\\"row\\\" [source]=\\\"source\\\"></ng2-st-tbody-custom>\\n\\n    <ng2-st-tbody-edit-delete [grid]=\\\"grid\\\"\\n                              [deleteConfirm]=\\\"deleteConfirm\\\"\\n                              [editConfirm]=\\\"editConfirm\\\"\\n                              (edit)=\\\"edit.emit(row)\\\"\\n                              (delete)=\\\"delete.emit(row)\\\"\\n                              (editRowSelect)=\\\"editRowSelect.emit($event)\\\"\\n                              [row]=\\\"row\\\"\\n                              [source]=\\\"source\\\">\\n    </ng2-st-tbody-edit-delete>\\n  </td>\\n   <td *ngIf=\\\"row.isInEditing && showActionColumnLeft\\\"  class=\\\"ng2-smart-actions\\\">\\n    <ng2-st-tbody-create-cancel [grid]=\\\"grid\\\" [row]=\\\"row\\\" [editConfirm]=\\\"editConfirm\\\"></ng2-st-tbody-create-cancel>\\n  </td>\\n  <td *ngFor=\\\"let cell of getVisibleCells(row.cells)\\\">\\n    <ng2-smart-table-cell [cell]=\\\"cell\\\"\\n                          [grid]=\\\"grid\\\"\\n                          [row]=\\\"row\\\"\\n                          [isNew]=\\\"false\\\"\\n                          [mode]=\\\"mode\\\"\\n                          [editConfirm]=\\\"editConfirm\\\"\\n                          [inputClass]=\\\"editInputClass\\\"\\n                          [isInEditing]=\\\"row.isInEditing\\\">\\n    </ng2-smart-table-cell>\\n  </td>\\n\\n  <td *ngIf=\\\"row.isInEditing && showActionColumnRight\\\"  class=\\\"ng2-smart-actions\\\">\\n    <ng2-st-tbody-create-cancel [grid]=\\\"grid\\\" [row]=\\\"row\\\" [editConfirm]=\\\"editConfirm\\\"></ng2-st-tbody-create-cancel>\\n  </td>\\n\\n  <td *ngIf=\\\"!row.isInEditing && showActionColumnRight\\\" class=\\\"ng2-smart-actions\\\">\\n    <ng2-st-tbody-custom [grid]=\\\"grid\\\" (custom)=\\\"custom.emit($event)\\\" [row]=\\\"row\\\" [source]=\\\"source\\\"></ng2-st-tbody-custom>\\n\\n    <ng2-st-tbody-edit-delete [grid]=\\\"grid\\\"\\n                              [deleteConfirm]=\\\"deleteConfirm\\\"\\n                              [editConfirm]=\\\"editConfirm\\\"\\n                              [row]=\\\"row\\\"\\n                              [source]=\\\"source\\\"\\n                              (edit)=\\\"edit.emit(row)\\\"\\n                              (delete)=\\\"delete.emit(row)\\\"\\n                              (editRowSelect)=\\\"editRowSelect.emit($event)\\\">\\n    </ng2-st-tbody-edit-delete>\\n  </td>\\n</tr>\\n\\n<tr *ngIf=\\\"grid.getRows().length == 0\\\">\\n  <td [attr.colspan]=\\\"tableColumnsCount\\\">\\n    {{ noDataMessage }}\\n  </td>\\n</tr>\\n\", styles: [\":host .ng2-smart-row.selected{background:rgba(0,0,0,.05)}:host .ng2-smart-row .ng2-smart-actions.ng2-smart-action-multiple-select{text-align:center}:host ::ng-deep ng2-st-tbody-edit-delete a:first-child,:host ::ng-deep ng2-st-tbody-create-cancel a:first-child{margin-right:.25rem}\\n\"], components: [{ type: TbodyCustomComponent, selector: \"ng2-st-tbody-custom\", inputs: [\"grid\", \"row\", \"source\"], outputs: [\"custom\"] }, { type: TbodyEditDeleteComponent, selector: \"ng2-st-tbody-edit-delete\", inputs: [\"grid\", \"row\", \"source\", \"deleteConfirm\", \"editConfirm\"], outputs: [\"edit\", \"delete\", \"editRowSelect\"] }, { type: TbodyCreateCancelComponent, selector: \"ng2-st-tbody-create-cancel\", inputs: [\"grid\", \"row\", \"editConfirm\"] }, { type: CellComponent, selector: \"ng2-smart-table-cell\", inputs: [\"grid\", \"row\", \"editConfirm\", \"createConfirm\", \"isNew\", \"cell\", \"inputClass\", \"mode\", \"isInEditing\"], outputs: [\"edited\"] }], directives: [{ type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }, { type: i2.NgClass, selector: \"[ngClass]\", inputs: [\"class\", \"ngClass\"] }, { type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { type: i1.CheckboxControlValueAccessor, selector: \"input[type=checkbox][formControlName],input[type=checkbox][formControl],input[type=checkbox][ngModel]\" }, { type: i1.NgControlStatus, selector: \"[formControlName],[ngModel],[formControl]\" }, { type: i1.NgModel, selector: \"[ngModel]:not([formControlName]):not([formControl])\", inputs: [\"name\", \"disabled\", \"ngModel\", \"ngModelOptions\"], outputs: [\"ngModelChange\"], exportAs: [\"ngModel\"] }] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: Ng2SmartTableTbodyComponent, decorators: [{\n            type: Component,\n            args: [{ selector: '[ng2-st-tbody]', template: \"<tr *ngFor=\\\"let row of grid.getRows()\\\" (click)=\\\"userSelectRow.emit(row)\\\" (mouseover)=\\\"rowHover.emit(row)\\\" class=\\\"ng2-smart-row\\\" [className]=\\\"rowClassFunction(row)\\\" [ngClass]=\\\"{selected: row.isSelected}\\\">\\n  <td *ngIf=\\\"isMultiSelectVisible\\\" class=\\\"ng2-smart-actions ng2-smart-action-multiple-select\\\" (click)=\\\"multipleSelectRow.emit(row)\\\">\\n    <input type=\\\"checkbox\\\" class=\\\"form-control\\\" [ngModel]=\\\"row.isSelected\\\">\\n  </td>\\n  <td *ngIf=\\\"!row.isInEditing && showActionColumnLeft\\\" class=\\\"ng2-smart-actions\\\">\\n    <ng2-st-tbody-custom [grid]=\\\"grid\\\" (custom)=\\\"custom.emit($event)\\\" [row]=\\\"row\\\" [source]=\\\"source\\\"></ng2-st-tbody-custom>\\n\\n    <ng2-st-tbody-edit-delete [grid]=\\\"grid\\\"\\n                              [deleteConfirm]=\\\"deleteConfirm\\\"\\n                              [editConfirm]=\\\"editConfirm\\\"\\n                              (edit)=\\\"edit.emit(row)\\\"\\n                              (delete)=\\\"delete.emit(row)\\\"\\n                              (editRowSelect)=\\\"editRowSelect.emit($event)\\\"\\n                              [row]=\\\"row\\\"\\n                              [source]=\\\"source\\\">\\n    </ng2-st-tbody-edit-delete>\\n  </td>\\n   <td *ngIf=\\\"row.isInEditing && showActionColumnLeft\\\"  class=\\\"ng2-smart-actions\\\">\\n    <ng2-st-tbody-create-cancel [grid]=\\\"grid\\\" [row]=\\\"row\\\" [editConfirm]=\\\"editConfirm\\\"></ng2-st-tbody-create-cancel>\\n  </td>\\n  <td *ngFor=\\\"let cell of getVisibleCells(row.cells)\\\">\\n    <ng2-smart-table-cell [cell]=\\\"cell\\\"\\n                          [grid]=\\\"grid\\\"\\n                          [row]=\\\"row\\\"\\n                          [isNew]=\\\"false\\\"\\n                          [mode]=\\\"mode\\\"\\n                          [editConfirm]=\\\"editConfirm\\\"\\n                          [inputClass]=\\\"editInputClass\\\"\\n                          [isInEditing]=\\\"row.isInEditing\\\">\\n    </ng2-smart-table-cell>\\n  </td>\\n\\n  <td *ngIf=\\\"row.isInEditing && showActionColumnRight\\\"  class=\\\"ng2-smart-actions\\\">\\n    <ng2-st-tbody-create-cancel [grid]=\\\"grid\\\" [row]=\\\"row\\\" [editConfirm]=\\\"editConfirm\\\"></ng2-st-tbody-create-cancel>\\n  </td>\\n\\n  <td *ngIf=\\\"!row.isInEditing && showActionColumnRight\\\" class=\\\"ng2-smart-actions\\\">\\n    <ng2-st-tbody-custom [grid]=\\\"grid\\\" (custom)=\\\"custom.emit($event)\\\" [row]=\\\"row\\\" [source]=\\\"source\\\"></ng2-st-tbody-custom>\\n\\n    <ng2-st-tbody-edit-delete [grid]=\\\"grid\\\"\\n                              [deleteConfirm]=\\\"deleteConfirm\\\"\\n                              [editConfirm]=\\\"editConfirm\\\"\\n                              [row]=\\\"row\\\"\\n                              [source]=\\\"source\\\"\\n                              (edit)=\\\"edit.emit(row)\\\"\\n                              (delete)=\\\"delete.emit(row)\\\"\\n                              (editRowSelect)=\\\"editRowSelect.emit($event)\\\">\\n    </ng2-st-tbody-edit-delete>\\n  </td>\\n</tr>\\n\\n<tr *ngIf=\\\"grid.getRows().length == 0\\\">\\n  <td [attr.colspan]=\\\"tableColumnsCount\\\">\\n    {{ noDataMessage }}\\n  </td>\\n</tr>\\n\", styles: [\":host .ng2-smart-row.selected{background:rgba(0,0,0,.05)}:host .ng2-smart-row .ng2-smart-actions.ng2-smart-action-multiple-select{text-align:center}:host ::ng-deep ng2-st-tbody-edit-delete a:first-child,:host ::ng-deep ng2-st-tbody-create-cancel a:first-child{margin-right:.25rem}\\n\"] }]\n        }], propDecorators: { grid: [{\n                type: Input\n            }], source: [{\n                type: Input\n            }], deleteConfirm: [{\n                type: Input\n            }], editConfirm: [{\n                type: Input\n            }], rowClassFunction: [{\n                type: Input\n            }], save: [{\n                type: Output\n            }], cancel: [{\n                type: Output\n            }], edit: [{\n                type: Output\n            }], delete: [{\n                type: Output\n            }], custom: [{\n                type: Output\n            }], edited: [{\n                type: Output\n            }], userSelectRow: [{\n                type: Output\n            }], editRowSelect: [{\n                type: Output\n            }], multipleSelectRow: [{\n                type: Output\n            }], rowHover: [{\n                type: Output\n            }] } });\n\nconst TBODY_COMPONENTS = [\n    TbodyCreateCancelComponent,\n    TbodyEditDeleteComponent,\n    TbodyCustomComponent,\n    Ng2SmartTableTbodyComponent\n];\nclass TBodyModule {\n}\nTBodyModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: TBodyModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nTBodyModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: TBodyModule, declarations: [TbodyCreateCancelComponent,\n        TbodyEditDeleteComponent,\n        TbodyCustomComponent,\n        Ng2SmartTableTbodyComponent], imports: [CommonModule,\n        FormsModule,\n        CellModule], exports: [TbodyCreateCancelComponent,\n        TbodyEditDeleteComponent,\n        TbodyCustomComponent,\n        Ng2SmartTableTbodyComponent] });\nTBodyModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: TBodyModule, imports: [[\n            CommonModule,\n            FormsModule,\n            CellModule,\n        ]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: TBodyModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [\n                        CommonModule,\n                        FormsModule,\n                        CellModule,\n                    ],\n                    declarations: [\n                        ...TBODY_COMPONENTS,\n                    ],\n                    exports: [\n                        ...TBODY_COMPONENTS,\n                    ],\n                }]\n        }] });\n\nclass CheckboxSelectAllComponent {\n}\nCheckboxSelectAllComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: CheckboxSelectAllComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\nCheckboxSelectAllComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.3.11\", type: CheckboxSelectAllComponent, selector: \"[ng2-st-checkbox-select-all]\", inputs: { grid: \"grid\", source: \"source\", isAllSelected: \"isAllSelected\" }, ngImport: i0, template: `\n    <input type=\"checkbox\" [ngModel]=\"isAllSelected\">\n  `, isInline: true, directives: [{ type: i1.CheckboxControlValueAccessor, selector: \"input[type=checkbox][formControlName],input[type=checkbox][formControl],input[type=checkbox][ngModel]\" }, { type: i1.NgControlStatus, selector: \"[formControlName],[ngModel],[formControl]\" }, { type: i1.NgModel, selector: \"[ngModel]:not([formControlName]):not([formControl])\", inputs: [\"name\", \"disabled\", \"ngModel\", \"ngModelOptions\"], outputs: [\"ngModelChange\"], exportAs: [\"ngModel\"] }] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: CheckboxSelectAllComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: '[ng2-st-checkbox-select-all]',\n                    template: `\n    <input type=\"checkbox\" [ngModel]=\"isAllSelected\">\n  `,\n                }]\n        }], propDecorators: { grid: [{\n                type: Input\n            }], source: [{\n                type: Input\n            }], isAllSelected: [{\n                type: Input\n            }] } });\n\nclass ActionsTitleComponent {\n    constructor(ref) {\n        this.ref = ref;\n    }\n    ngAfterViewInit() {\n        this.ref.nativeElement.classList.add('ng2-smart-actions');\n    }\n    ngOnChanges() {\n        this.actionsColumnTitle = this.grid.getSetting('actions.columnTitle');\n    }\n}\nActionsTitleComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: ActionsTitleComponent, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Component });\nActionsTitleComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.3.11\", type: ActionsTitleComponent, selector: \"[ng2-st-actions-title]\", inputs: { grid: \"grid\" }, usesOnChanges: true, ngImport: i0, template: `\n    <div class=\"ng2-smart-title\">{{ actionsColumnTitle }}</div>\n  `, isInline: true });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: ActionsTitleComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: '[ng2-st-actions-title]',\n                    template: `\n    <div class=\"ng2-smart-title\">{{ actionsColumnTitle }}</div>\n  `,\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }]; }, propDecorators: { grid: [{\n                type: Input\n            }] } });\n\nclass TitleComponent {\n    constructor() {\n        this.currentDirection = '';\n        this.sort = new EventEmitter();\n    }\n    ngOnChanges(changes) {\n        if (changes.source) {\n            if (!changes.source.firstChange) {\n                this.dataChangedSub.unsubscribe();\n            }\n            this.dataChangedSub = this.source.onChanged().subscribe((dataChanges) => {\n                const sortConf = this.source.getSort();\n                if (sortConf.length > 0 && sortConf[0]['field'] === this.column.id) {\n                    this.currentDirection = sortConf[0]['direction'];\n                }\n                else {\n                    this.currentDirection = '';\n                }\n                sortConf.forEach((fieldConf) => {\n                });\n            });\n        }\n    }\n    _sort(event) {\n        event.preventDefault();\n        this.changeSortDirection();\n        this.source.setSort([\n            {\n                field: this.column.id,\n                direction: this.currentDirection,\n                compare: this.column.getCompareFunction(),\n            },\n        ]);\n        this.sort.emit(null);\n    }\n    changeSortDirection() {\n        if (this.currentDirection) {\n            const newDirection = this.currentDirection === 'asc' ? 'desc' : 'asc';\n            this.currentDirection = newDirection;\n        }\n        else {\n            this.currentDirection = this.column.sortDirection;\n        }\n        return this.currentDirection;\n    }\n}\nTitleComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: TitleComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\nTitleComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.3.11\", type: TitleComponent, selector: \"ng2-smart-table-title\", inputs: { column: \"column\", source: \"source\" }, outputs: { sort: \"sort\" }, usesOnChanges: true, ngImport: i0, template: `\n    <a href=\"#\" *ngIf=\"column.isSortable\"\n                (click)=\"_sort($event)\"\n                class=\"ng2-smart-sort-link sort\"\n                [ngClass]=\"currentDirection\">\n      {{ column.title }}\n    </a>\n    <span class=\"ng2-smart-sort\" *ngIf=\"!column.isSortable\">{{ column.title }}</span>\n  `, isInline: true, styles: [\"a.sort.asc,a.sort.desc{font-weight:700}a.sort.asc:after,a.sort.desc:after{content:\\\"\\\";display:inline-block;width:0;height:0;border-bottom:4px solid rgba(0,0,0,.3);border-top:4px solid transparent;border-left:4px solid transparent;border-right:4px solid transparent;margin-bottom:2px}a.sort.desc:after{transform:rotate(-180deg);margin-bottom:-2px}\\n\"], directives: [{ type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { type: i2.NgClass, selector: \"[ngClass]\", inputs: [\"class\", \"ngClass\"] }] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: TitleComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'ng2-smart-table-title', template: `\n    <a href=\"#\" *ngIf=\"column.isSortable\"\n                (click)=\"_sort($event)\"\n                class=\"ng2-smart-sort-link sort\"\n                [ngClass]=\"currentDirection\">\n      {{ column.title }}\n    </a>\n    <span class=\"ng2-smart-sort\" *ngIf=\"!column.isSortable\">{{ column.title }}</span>\n  `, styles: [\"a.sort.asc,a.sort.desc{font-weight:700}a.sort.asc:after,a.sort.desc:after{content:\\\"\\\";display:inline-block;width:0;height:0;border-bottom:4px solid rgba(0,0,0,.3);border-top:4px solid transparent;border-left:4px solid transparent;border-right:4px solid transparent;margin-bottom:2px}a.sort.desc:after{transform:rotate(-180deg);margin-bottom:-2px}\\n\"] }]\n        }], propDecorators: { column: [{\n                type: Input\n            }], source: [{\n                type: Input\n            }], sort: [{\n                type: Output\n            }] } });\n\nclass ColumnTitleComponent {\n    constructor() {\n        this.sort = new EventEmitter();\n    }\n}\nColumnTitleComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: ColumnTitleComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\nColumnTitleComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.3.11\", type: ColumnTitleComponent, selector: \"ng2-st-column-title\", inputs: { column: \"column\", source: \"source\" }, outputs: { sort: \"sort\" }, ngImport: i0, template: `\n    <div class=\"ng2-smart-title\">\n      <ng2-smart-table-title [source]=\"source\" [column]=\"column\" (sort)=\"sort.emit($event)\"></ng2-smart-table-title>\n    </div>\n  `, isInline: true, components: [{ type: TitleComponent, selector: \"ng2-smart-table-title\", inputs: [\"column\", \"source\"], outputs: [\"sort\"] }] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: ColumnTitleComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'ng2-st-column-title',\n                    template: `\n    <div class=\"ng2-smart-title\">\n      <ng2-smart-table-title [source]=\"source\" [column]=\"column\" (sort)=\"sort.emit($event)\"></ng2-smart-table-title>\n    </div>\n  `,\n                }]\n        }], propDecorators: { column: [{\n                type: Input\n            }], source: [{\n                type: Input\n            }], sort: [{\n                type: Output\n            }] } });\n\nclass TheadTitlesRowComponent {\n    constructor() {\n        this.sort = new EventEmitter();\n        this.selectAllRows = new EventEmitter();\n    }\n    ngOnChanges() {\n        this.isMultiSelectVisible = this.grid.isMultiSelectVisible();\n        this.showActionColumnLeft = this.grid.showActionColumn('left');\n        this.showActionColumnRight = this.grid.showActionColumn('right');\n    }\n    getVisibleColumns(columns) {\n        return (columns || []).filter((column) => !column.hide);\n    }\n}\nTheadTitlesRowComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: TheadTitlesRowComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\nTheadTitlesRowComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.3.11\", type: TheadTitlesRowComponent, selector: \"[ng2-st-thead-titles-row]\", inputs: { grid: \"grid\", isAllSelected: \"isAllSelected\", source: \"source\" }, outputs: { sort: \"sort\", selectAllRows: \"selectAllRows\" }, usesOnChanges: true, ngImport: i0, template: `\n    <th ng2-st-checkbox-select-all *ngIf=\"isMultiSelectVisible\"\n                                   [grid]=\"grid\"\n                                   [source]=\"source\"\n                                   [isAllSelected]=\"isAllSelected\"\n                                   (click)=\"selectAllRows.emit($event)\">\n    </th>\n    <th ng2-st-actions-title *ngIf=\"showActionColumnLeft\" [grid]=\"grid\"></th>\n    <th *ngFor=\"let column of getVisibleColumns(grid.getColumns())\"\n        class=\"ng2-smart-th {{ column.id }}\"\n        [ngClass]=\"column.class\"\n        [style.width]=\"column.width\">\n      <ng2-st-column-title [source]=\"source\" [column]=\"column\" (sort)=\"sort.emit($event)\"></ng2-st-column-title>\n    </th>\n    <th ng2-st-actions-title *ngIf=\"showActionColumnRight\" [grid]=\"grid\"></th>\n  `, isInline: true, components: [{ type: CheckboxSelectAllComponent, selector: \"[ng2-st-checkbox-select-all]\", inputs: [\"grid\", \"source\", \"isAllSelected\"] }, { type: ActionsTitleComponent, selector: \"[ng2-st-actions-title]\", inputs: [\"grid\"] }, { type: ColumnTitleComponent, selector: \"ng2-st-column-title\", inputs: [\"column\", \"source\"], outputs: [\"sort\"] }], directives: [{ type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }, { type: i2.NgClass, selector: \"[ngClass]\", inputs: [\"class\", \"ngClass\"] }] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: TheadTitlesRowComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: '[ng2-st-thead-titles-row]',\n                    template: `\n    <th ng2-st-checkbox-select-all *ngIf=\"isMultiSelectVisible\"\n                                   [grid]=\"grid\"\n                                   [source]=\"source\"\n                                   [isAllSelected]=\"isAllSelected\"\n                                   (click)=\"selectAllRows.emit($event)\">\n    </th>\n    <th ng2-st-actions-title *ngIf=\"showActionColumnLeft\" [grid]=\"grid\"></th>\n    <th *ngFor=\"let column of getVisibleColumns(grid.getColumns())\"\n        class=\"ng2-smart-th {{ column.id }}\"\n        [ngClass]=\"column.class\"\n        [style.width]=\"column.width\">\n      <ng2-st-column-title [source]=\"source\" [column]=\"column\" (sort)=\"sort.emit($event)\"></ng2-st-column-title>\n    </th>\n    <th ng2-st-actions-title *ngIf=\"showActionColumnRight\" [grid]=\"grid\"></th>\n  `,\n                }]\n        }], propDecorators: { grid: [{\n                type: Input\n            }], isAllSelected: [{\n                type: Input\n            }], source: [{\n                type: Input\n            }], sort: [{\n                type: Output\n            }], selectAllRows: [{\n                type: Output\n            }] } });\n\nclass AddButtonComponent {\n    constructor(ref) {\n        this.ref = ref;\n        this.create = new EventEmitter();\n    }\n    ngAfterViewInit() {\n        this.ref.nativeElement.classList.add('ng2-smart-actions-title', 'ng2-smart-actions-title-add');\n    }\n    ngOnChanges() {\n        this.isActionAdd = this.grid.getSetting('actions.add');\n        this.addNewButtonContent = this.grid.getSetting('add.addButtonContent');\n    }\n    onAdd(event) {\n        event.preventDefault();\n        event.stopPropagation();\n        if (this.grid.getSetting('mode') === 'external') {\n            this.create.emit({\n                source: this.source,\n            });\n        }\n        else {\n            this.grid.createFormShown = true;\n        }\n    }\n}\nAddButtonComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: AddButtonComponent, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Component });\nAddButtonComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.3.11\", type: AddButtonComponent, selector: \"[ng2-st-add-button]\", inputs: { grid: \"grid\", source: \"source\" }, outputs: { create: \"create\" }, usesOnChanges: true, ngImport: i0, template: `\n    <a *ngIf=\"isActionAdd\" href=\"#\" class=\"ng2-smart-action ng2-smart-action-add-add\"\n        [innerHTML]=\"addNewButtonContent\" (click)=\"onAdd($event)\"></a>\n  `, isInline: true, directives: [{ type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: AddButtonComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: '[ng2-st-add-button]',\n                    template: `\n    <a *ngIf=\"isActionAdd\" href=\"#\" class=\"ng2-smart-action ng2-smart-action-add-add\"\n        [innerHTML]=\"addNewButtonContent\" (click)=\"onAdd($event)\"></a>\n  `,\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }]; }, propDecorators: { grid: [{\n                type: Input\n            }], source: [{\n                type: Input\n            }], create: [{\n                type: Output\n            }] } });\n\nclass TheadFitlersRowComponent {\n    constructor() {\n        this.create = new EventEmitter();\n        this.filter = new EventEmitter();\n    }\n    ngOnChanges() {\n        this.isMultiSelectVisible = this.grid.isMultiSelectVisible();\n        this.showActionColumnLeft = this.grid.showActionColumn('left');\n        this.showActionColumnRight = this.grid.showActionColumn('right');\n        this.filterInputClass = this.grid.getSetting('filter.inputClass');\n    }\n    getVisibleColumns(columns) {\n        return (columns || []).filter((column) => !column.hide);\n    }\n}\nTheadFitlersRowComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: TheadFitlersRowComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\nTheadFitlersRowComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.3.11\", type: TheadFitlersRowComponent, selector: \"[ng2-st-thead-filters-row]\", inputs: { grid: \"grid\", source: \"source\" }, outputs: { create: \"create\", filter: \"filter\" }, usesOnChanges: true, ngImport: i0, template: `\n    <th *ngIf=\"isMultiSelectVisible\"></th>\n    <th ng2-st-add-button *ngIf=\"showActionColumnLeft\"\n                          [grid]=\"grid\"\n                          (create)=\"create.emit($event)\">\n    </th>\n    <th *ngFor=\"let column of getVisibleColumns(grid.getColumns())\" class=\"ng2-smart-th {{ column.id }}\">\n      <ng2-smart-table-filter [source]=\"source\"\n                              [column]=\"column\"\n                              [inputClass]=\"filterInputClass\"\n                              (filter)=\"filter.emit($event)\">\n      </ng2-smart-table-filter>\n    </th>\n    <th ng2-st-add-button *ngIf=\"showActionColumnRight\"\n                          [grid]=\"grid\"\n                          [source]=\"source\"\n                          (create)=\"create.emit($event)\">\n    </th>\n  `, isInline: true, components: [{ type: AddButtonComponent, selector: \"[ng2-st-add-button]\", inputs: [\"grid\", \"source\"], outputs: [\"create\"] }, { type: FilterComponent, selector: \"ng2-smart-table-filter\" }], directives: [{ type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: TheadFitlersRowComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: '[ng2-st-thead-filters-row]',\n                    template: `\n    <th *ngIf=\"isMultiSelectVisible\"></th>\n    <th ng2-st-add-button *ngIf=\"showActionColumnLeft\"\n                          [grid]=\"grid\"\n                          (create)=\"create.emit($event)\">\n    </th>\n    <th *ngFor=\"let column of getVisibleColumns(grid.getColumns())\" class=\"ng2-smart-th {{ column.id }}\">\n      <ng2-smart-table-filter [source]=\"source\"\n                              [column]=\"column\"\n                              [inputClass]=\"filterInputClass\"\n                              (filter)=\"filter.emit($event)\">\n      </ng2-smart-table-filter>\n    </th>\n    <th ng2-st-add-button *ngIf=\"showActionColumnRight\"\n                          [grid]=\"grid\"\n                          [source]=\"source\"\n                          (create)=\"create.emit($event)\">\n    </th>\n  `,\n                }]\n        }], propDecorators: { grid: [{\n                type: Input\n            }], source: [{\n                type: Input\n            }], create: [{\n                type: Output\n            }], filter: [{\n                type: Output\n            }] } });\n\nclass ActionsComponent {\n    constructor() {\n        this.create = new EventEmitter();\n    }\n    ngOnChanges() {\n        this.createButtonContent = this.grid.getSetting('add.createButtonContent');\n        this.cancelButtonContent = this.grid.getSetting('add.cancelButtonContent');\n    }\n}\nActionsComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: ActionsComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\nActionsComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.3.11\", type: ActionsComponent, selector: \"ng2-st-actions\", inputs: { grid: \"grid\" }, outputs: { create: \"create\" }, usesOnChanges: true, ngImport: i0, template: `\n    <a href=\"#\" class=\"ng2-smart-action ng2-smart-action-add-create\"\n        [innerHTML]=\"createButtonContent\"\n        (click)=\"$event.preventDefault();create.emit($event)\"></a>\n    <a href=\"#\" class=\"ng2-smart-action ng2-smart-action-add-cancel\"\n        [innerHTML]=\"cancelButtonContent\"\n        (click)=\"$event.preventDefault();grid.createFormShown = false;\"></a>\n  `, isInline: true });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: ActionsComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'ng2-st-actions',\n                    template: `\n    <a href=\"#\" class=\"ng2-smart-action ng2-smart-action-add-create\"\n        [innerHTML]=\"createButtonContent\"\n        (click)=\"$event.preventDefault();create.emit($event)\"></a>\n    <a href=\"#\" class=\"ng2-smart-action ng2-smart-action-add-cancel\"\n        [innerHTML]=\"cancelButtonContent\"\n        (click)=\"$event.preventDefault();grid.createFormShown = false;\"></a>\n  `,\n                }]\n        }], propDecorators: { grid: [{\n                type: Input\n            }], create: [{\n                type: Output\n            }] } });\n\nclass TheadFormRowComponent {\n    constructor() {\n        this.create = new EventEmitter();\n    }\n    onCreate(event) {\n        event.stopPropagation();\n        this.grid.create(this.grid.getNewRow(), this.createConfirm);\n    }\n    ngOnChanges() {\n        this.isMultiSelectVisible = this.grid.isMultiSelectVisible();\n        this.showActionColumnLeft = this.grid.showActionColumn('left');\n        this.showActionColumnRight = this.grid.showActionColumn('right');\n        this.addInputClass = this.grid.getSetting('add.inputClass');\n    }\n    getVisibleCells(cells) {\n        return (cells || []).filter((cell) => !cell.getColumn().hide);\n    }\n}\nTheadFormRowComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: TheadFormRowComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\nTheadFormRowComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.3.11\", type: TheadFormRowComponent, selector: \"[ng2-st-thead-form-row]\", inputs: { grid: \"grid\", row: \"row\", createConfirm: \"createConfirm\" }, outputs: { create: \"create\" }, usesOnChanges: true, ngImport: i0, template: `\n      <td *ngIf=\"\"></td>\n      <td  *ngIf=\"showActionColumnLeft\"  class=\"ng2-smart-actions\">\n        <ng2-st-actions [grid]=\"grid\" (create)=\"onCreate($event)\"></ng2-st-actions>\n      </td>\n      <td *ngFor=\"let cell of getVisibleCells(grid.getNewRow().getCells())\">\n        <ng2-smart-table-cell [cell]=\"cell\"\n                              [grid]=\"grid\"\n                              [isNew]=\"true\"\n                              [createConfirm]=\"createConfirm\"\n                              [inputClass]=\"addInputClass\"\n                              [isInEditing]=\"grid.getNewRow().isInEditing\"\n                              (edited)=\"onCreate($event)\">\n        </ng2-smart-table-cell>\n      </td>\n      <td  *ngIf=\"showActionColumnRight\"  class=\"ng2-smart-actions\">\n        <ng2-st-actions [grid]=\"grid\" (create)=\"onCreate($event)\"></ng2-st-actions>\n      </td>\n  `, isInline: true, components: [{ type: ActionsComponent, selector: \"ng2-st-actions\", inputs: [\"grid\"], outputs: [\"create\"] }, { type: CellComponent, selector: \"ng2-smart-table-cell\", inputs: [\"grid\", \"row\", \"editConfirm\", \"createConfirm\", \"isNew\", \"cell\", \"inputClass\", \"mode\", \"isInEditing\"], outputs: [\"edited\"] }], directives: [{ type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: TheadFormRowComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: '[ng2-st-thead-form-row]',\n                    template: `\n      <td *ngIf=\"\"></td>\n      <td  *ngIf=\"showActionColumnLeft\"  class=\"ng2-smart-actions\">\n        <ng2-st-actions [grid]=\"grid\" (create)=\"onCreate($event)\"></ng2-st-actions>\n      </td>\n      <td *ngFor=\"let cell of getVisibleCells(grid.getNewRow().getCells())\">\n        <ng2-smart-table-cell [cell]=\"cell\"\n                              [grid]=\"grid\"\n                              [isNew]=\"true\"\n                              [createConfirm]=\"createConfirm\"\n                              [inputClass]=\"addInputClass\"\n                              [isInEditing]=\"grid.getNewRow().isInEditing\"\n                              (edited)=\"onCreate($event)\">\n        </ng2-smart-table-cell>\n      </td>\n      <td  *ngIf=\"showActionColumnRight\"  class=\"ng2-smart-actions\">\n        <ng2-st-actions [grid]=\"grid\" (create)=\"onCreate($event)\"></ng2-st-actions>\n      </td>\n  `,\n                }]\n        }], propDecorators: { grid: [{\n                type: Input\n            }], row: [{\n                type: Input\n            }], createConfirm: [{\n                type: Input\n            }], create: [{\n                type: Output\n            }] } });\n\nclass Ng2SmartTableTheadComponent {\n    constructor() {\n        this.sort = new EventEmitter();\n        this.selectAllRows = new EventEmitter();\n        this.create = new EventEmitter();\n        this.filter = new EventEmitter();\n    }\n    ngOnChanges() {\n        this.isHideHeader = this.grid.getSetting('hideHeader');\n        this.isHideSubHeader = this.grid.getSetting('hideSubHeader');\n    }\n}\nNg2SmartTableTheadComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: Ng2SmartTableTheadComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\nNg2SmartTableTheadComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.3.11\", type: Ng2SmartTableTheadComponent, selector: \"[ng2-st-thead]\", inputs: { grid: \"grid\", source: \"source\", isAllSelected: \"isAllSelected\", createConfirm: \"createConfirm\" }, outputs: { sort: \"sort\", selectAllRows: \"selectAllRows\", create: \"create\", filter: \"filter\" }, usesOnChanges: true, ngImport: i0, template: \"<tr ng2-st-thead-titles-row *ngIf=\\\"!isHideHeader\\\"\\n                            class=\\\"ng2-smart-titles\\\"\\n                            [grid]=\\\"grid\\\"\\n                            [isAllSelected]=\\\"isAllSelected\\\"\\n                            [source]=\\\"source\\\"\\n                            (sort)=\\\"sort.emit($event)\\\"\\n                            (selectAllRows)=\\\"selectAllRows.emit($event)\\\">\\n</tr>\\n\\n<tr ng2-st-thead-filters-row *ngIf=\\\"!isHideSubHeader\\\"\\n                              class=\\\"ng2-smart-filters\\\"\\n                              [grid]=\\\"grid\\\"\\n                              [source]=\\\"source\\\"\\n                              (create)=\\\"create.emit($event)\\\"\\n                              (filter)=\\\"filter.emit($event)\\\">\\n</tr>\\n\\n<tr ng2-st-thead-form-row *ngIf=\\\"grid.createFormShown\\\"\\n                          [grid]=\\\"grid\\\"\\n                          [createConfirm]=\\\"createConfirm\\\">\\n</tr>\\n\", components: [{ type: TheadTitlesRowComponent, selector: \"[ng2-st-thead-titles-row]\", inputs: [\"grid\", \"isAllSelected\", \"source\"], outputs: [\"sort\", \"selectAllRows\"] }, { type: TheadFitlersRowComponent, selector: \"[ng2-st-thead-filters-row]\", inputs: [\"grid\", \"source\"], outputs: [\"create\", \"filter\"] }, { type: TheadFormRowComponent, selector: \"[ng2-st-thead-form-row]\", inputs: [\"grid\", \"row\", \"createConfirm\"], outputs: [\"create\"] }], directives: [{ type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: Ng2SmartTableTheadComponent, decorators: [{\n            type: Component,\n            args: [{ selector: '[ng2-st-thead]', template: \"<tr ng2-st-thead-titles-row *ngIf=\\\"!isHideHeader\\\"\\n                            class=\\\"ng2-smart-titles\\\"\\n                            [grid]=\\\"grid\\\"\\n                            [isAllSelected]=\\\"isAllSelected\\\"\\n                            [source]=\\\"source\\\"\\n                            (sort)=\\\"sort.emit($event)\\\"\\n                            (selectAllRows)=\\\"selectAllRows.emit($event)\\\">\\n</tr>\\n\\n<tr ng2-st-thead-filters-row *ngIf=\\\"!isHideSubHeader\\\"\\n                              class=\\\"ng2-smart-filters\\\"\\n                              [grid]=\\\"grid\\\"\\n                              [source]=\\\"source\\\"\\n                              (create)=\\\"create.emit($event)\\\"\\n                              (filter)=\\\"filter.emit($event)\\\">\\n</tr>\\n\\n<tr ng2-st-thead-form-row *ngIf=\\\"grid.createFormShown\\\"\\n                          [grid]=\\\"grid\\\"\\n                          [createConfirm]=\\\"createConfirm\\\">\\n</tr>\\n\" }]\n        }], propDecorators: { grid: [{\n                type: Input\n            }], source: [{\n                type: Input\n            }], isAllSelected: [{\n                type: Input\n            }], createConfirm: [{\n                type: Input\n            }], sort: [{\n                type: Output\n            }], selectAllRows: [{\n                type: Output\n            }], create: [{\n                type: Output\n            }], filter: [{\n                type: Output\n            }] } });\n\nconst THEAD_COMPONENTS = [\n    ActionsComponent,\n    ActionsTitleComponent,\n    AddButtonComponent,\n    CheckboxSelectAllComponent,\n    ColumnTitleComponent,\n    TitleComponent,\n    TheadFitlersRowComponent,\n    TheadFormRowComponent,\n    TheadTitlesRowComponent,\n    Ng2SmartTableTheadComponent,\n];\nclass THeadModule {\n}\nTHeadModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: THeadModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nTHeadModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: THeadModule, declarations: [ActionsComponent,\n        ActionsTitleComponent,\n        AddButtonComponent,\n        CheckboxSelectAllComponent,\n        ColumnTitleComponent,\n        TitleComponent,\n        TheadFitlersRowComponent,\n        TheadFormRowComponent,\n        TheadTitlesRowComponent,\n        Ng2SmartTableTheadComponent], imports: [CommonModule,\n        FormsModule,\n        FilterModule,\n        CellModule], exports: [ActionsComponent,\n        ActionsTitleComponent,\n        AddButtonComponent,\n        CheckboxSelectAllComponent,\n        ColumnTitleComponent,\n        TitleComponent,\n        TheadFitlersRowComponent,\n        TheadFormRowComponent,\n        TheadTitlesRowComponent,\n        Ng2SmartTableTheadComponent] });\nTHeadModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: THeadModule, imports: [[\n            CommonModule,\n            FormsModule,\n            FilterModule,\n            CellModule,\n        ]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: THeadModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [\n                        CommonModule,\n                        FormsModule,\n                        FilterModule,\n                        CellModule,\n                    ],\n                    declarations: [\n                        ...THEAD_COMPONENTS,\n                    ],\n                    exports: [\n                        ...THEAD_COMPONENTS,\n                    ],\n                }]\n        }] });\n\nfunction compareValues(direction, a, b) {\n    if (a < b) {\n        return -1 * direction;\n    }\n    if (a > b) {\n        return direction;\n    }\n    return 0;\n}\nclass LocalSorter {\n    static sort(data, field, direction, customCompare) {\n        const dir = (direction === 'asc') ? 1 : -1;\n        const compare = customCompare ? customCompare : compareValues;\n        return data.sort((a, b) => {\n            return compare.call(null, dir, a[field], b[field]);\n        });\n    }\n}\n\nfunction filterValues(value, search) {\n    return value.toString().toLowerCase().includes(search.toString().toLowerCase());\n}\nclass LocalFilter {\n    static filter(data, field, search, customFilter) {\n        const filter = customFilter ? customFilter : filterValues;\n        return data.filter((el) => {\n            const value = typeof el[field] === 'undefined' || el[field] === null ? '' : el[field];\n            return filter.call(null, value, search);\n        });\n    }\n}\n\nclass LocalPager {\n    static paginate(data, page, perPage) {\n        return data.slice(perPage * (page - 1), perPage * page);\n    }\n}\n\nclass LocalDataSource extends DataSource {\n    constructor(data = []) {\n        super();\n        this.data = [];\n        this.filteredAndSorted = [];\n        this.sortConf = [];\n        this.filterConf = {\n            filters: [],\n            andOperator: true,\n        };\n        this.pagingConf = {};\n        this.data = data;\n    }\n    load(data) {\n        this.data = data;\n        return super.load(data);\n    }\n    prepend(element) {\n        this.reset(true);\n        this.data.unshift(element);\n        return super.prepend(element);\n    }\n    append(element) {\n        this.reset(true);\n        this.data.push(element);\n        return super.append(element);\n    }\n    add(element) {\n        this.data.push(element);\n        return super.add(element);\n    }\n    remove(element) {\n        this.data = this.data.filter(el => el !== element);\n        return super.remove(element);\n    }\n    update(element, values) {\n        return new Promise((resolve, reject) => {\n            this.find(element).then((found) => {\n                found = deepExtend(found, values);\n                super.update(found, values).then(resolve).catch(reject);\n            }).catch(reject);\n        });\n    }\n    find(element) {\n        const found = this.data.find(el => el === element);\n        if (found) {\n            return Promise.resolve(found);\n        }\n        return Promise.reject(new Error('Element was not found in the dataset'));\n    }\n    getElements() {\n        const data = this.data.slice(0);\n        return Promise.resolve(this.prepareData(data));\n    }\n    getFilteredAndSorted() {\n        let data = this.data.slice(0);\n        this.prepareData(data);\n        return Promise.resolve(this.filteredAndSorted);\n    }\n    getAll() {\n        const data = this.data.slice(0);\n        return Promise.resolve(data);\n    }\n    reset(silent = false) {\n        if (silent) {\n            this.filterConf = {\n                filters: [],\n                andOperator: true,\n            };\n            this.sortConf = [];\n            this.pagingConf['page'] = 1;\n        }\n        else {\n            this.setFilter([], true, false);\n            this.setSort([], false);\n            this.setPage(1);\n        }\n    }\n    empty() {\n        this.data = [];\n        return super.empty();\n    }\n    count() {\n        return this.filteredAndSorted.length;\n    }\n    /**\n     *\n     * Array of conf objects\n     * [\n     *  {field: string, direction: asc|desc|null, compare: Function|null},\n     * ]\n     * @param conf\n     * @param doEmit\n     * @returns {LocalDataSource}\n     */\n    setSort(conf, doEmit = true) {\n        if (conf !== null) {\n            conf.forEach((fieldConf) => {\n                if (!fieldConf['field'] || typeof fieldConf['direction'] === 'undefined') {\n                    throw new Error('Sort configuration object is not valid');\n                }\n            });\n            this.sortConf = conf;\n        }\n        super.setSort(conf, doEmit);\n        return this;\n    }\n    /**\n     *\n     * Array of conf objects\n     * [\n     *  {field: string, search: string, filter: Function|null},\n     * ]\n     * @param conf\n     * @param andOperator\n     * @param doEmit\n     * @returns {LocalDataSource}\n     */\n    setFilter(conf, andOperator = true, doEmit = true) {\n        if (conf && conf.length > 0) {\n            conf.forEach((fieldConf) => {\n                this.addFilter(fieldConf, andOperator, false);\n            });\n        }\n        else {\n            this.filterConf = {\n                filters: [],\n                andOperator: true,\n            };\n        }\n        this.filterConf.andOperator = andOperator;\n        this.pagingConf['page'] = 1;\n        super.setFilter(conf, andOperator, doEmit);\n        return this;\n    }\n    addFilter(fieldConf, andOperator = true, doEmit = true) {\n        if (!fieldConf['field'] || typeof fieldConf['search'] === 'undefined') {\n            throw new Error('Filter configuration object is not valid');\n        }\n        let found = false;\n        this.filterConf.filters.forEach((currentFieldConf, index) => {\n            if (currentFieldConf['field'] === fieldConf['field']) {\n                this.filterConf.filters[index] = fieldConf;\n                found = true;\n            }\n        });\n        if (!found) {\n            this.filterConf.filters.push(fieldConf);\n        }\n        this.filterConf.andOperator = andOperator;\n        super.addFilter(fieldConf, andOperator, doEmit);\n        return this;\n    }\n    setPaging(page, perPage, doEmit = true) {\n        this.pagingConf['page'] = page;\n        this.pagingConf['perPage'] = perPage;\n        super.setPaging(page, perPage, doEmit);\n        return this;\n    }\n    setPage(page, doEmit = true) {\n        this.pagingConf['page'] = page;\n        super.setPage(page, doEmit);\n        return this;\n    }\n    getSort() {\n        return this.sortConf;\n    }\n    getFilter() {\n        return this.filterConf;\n    }\n    getPaging() {\n        return this.pagingConf;\n    }\n    prepareData(data) {\n        data = this.filter(data);\n        data = this.sort(data);\n        this.filteredAndSorted = data.slice(0);\n        return this.paginate(data);\n    }\n    sort(data) {\n        if (this.sortConf) {\n            this.sortConf.forEach((fieldConf) => {\n                data = LocalSorter\n                    .sort(data, fieldConf['field'], fieldConf['direction'], fieldConf['compare']);\n            });\n        }\n        return data;\n    }\n    // TODO: refactor?\n    filter(data) {\n        if (this.filterConf.filters) {\n            if (this.filterConf.andOperator) {\n                this.filterConf.filters.forEach((fieldConf) => {\n                    if (fieldConf['search'].length > 0) {\n                        data = LocalFilter\n                            .filter(data, fieldConf['field'], fieldConf['search'], fieldConf['filter']);\n                    }\n                });\n            }\n            else {\n                let mergedData = [];\n                this.filterConf.filters.forEach((fieldConf) => {\n                    if (fieldConf['search'].length > 0) {\n                        mergedData = mergedData.concat(LocalFilter\n                            .filter(data, fieldConf['field'], fieldConf['search'], fieldConf['filter']));\n                    }\n                });\n                // remove non unique items\n                data = mergedData.filter((elem, pos, arr) => {\n                    return arr.indexOf(elem) === pos;\n                });\n            }\n        }\n        return data;\n    }\n    paginate(data) {\n        if (this.pagingConf && this.pagingConf['page'] && this.pagingConf['perPage']) {\n            data = LocalPager.paginate(data, this.pagingConf['page'], this.pagingConf['perPage']);\n        }\n        return data;\n    }\n}\n\nclass Ng2SmartTableComponent {\n    constructor() {\n        this.settings = {};\n        this.rowSelect = new EventEmitter();\n        this.rowDeselect = new EventEmitter();\n        this.userRowSelect = new EventEmitter();\n        this.delete = new EventEmitter();\n        this.edit = new EventEmitter();\n        this.create = new EventEmitter();\n        this.custom = new EventEmitter();\n        this.deleteConfirm = new EventEmitter();\n        this.editConfirm = new EventEmitter();\n        this.createConfirm = new EventEmitter();\n        this.rowHover = new EventEmitter();\n        this.defaultSettings = {\n            mode: 'inline',\n            selectMode: 'single',\n            /**\n             * Points to an element in all data\n             *\n             * when < 0 all lines must be deselected\n             */\n            selectedRowIndex: 0,\n            switchPageToSelectedRowPage: false,\n            hideHeader: false,\n            hideSubHeader: false,\n            actions: {\n                columnTitle: 'Actions',\n                add: true,\n                edit: true,\n                delete: true,\n                custom: [],\n                position: 'left', // left|right\n            },\n            filter: {\n                inputClass: '',\n            },\n            edit: {\n                inputClass: '',\n                editButtonContent: 'Edit',\n                saveButtonContent: 'Update',\n                cancelButtonContent: 'Cancel',\n                confirmSave: false,\n            },\n            add: {\n                inputClass: '',\n                addButtonContent: 'Add New',\n                createButtonContent: 'Create',\n                cancelButtonContent: 'Cancel',\n                confirmCreate: false,\n            },\n            delete: {\n                deleteButtonContent: 'Delete',\n                confirmDelete: false,\n            },\n            attr: {\n                id: '',\n                class: '',\n            },\n            noDataMessage: 'No data found',\n            columns: {},\n            pager: {\n                display: true,\n                page: 1,\n                perPage: 10,\n            },\n            rowClassFunction: () => '',\n        };\n        this.isAllSelected = false;\n        this.destroyed$ = new Subject();\n    }\n    ngOnChanges(changes) {\n        if (this.grid) {\n            if (changes['settings']) {\n                this.grid.setSettings(this.prepareSettings());\n            }\n            if (changes['source']) {\n                this.source = this.prepareSource();\n                this.grid.setSource(this.source);\n            }\n        }\n        else {\n            this.initGrid();\n        }\n        this.tableId = this.grid.getSetting('attr.id');\n        this.tableClass = this.grid.getSetting('attr.class');\n        this.isHideHeader = this.grid.getSetting('hideHeader');\n        this.isHideSubHeader = this.grid.getSetting('hideSubHeader');\n        this.isPagerDisplay = this.grid.getSetting('pager.display');\n        this.isPagerDisplay = this.grid.getSetting('pager.display');\n        this.perPageSelect = this.grid.getSetting('pager.perPageSelect');\n        this.rowClassFunction = this.grid.getSetting('rowClassFunction');\n    }\n    ngOnDestroy() {\n        this.destroyed$.next();\n    }\n    selectRow(index, switchPageToSelectedRowPage = this.grid.getSetting('switchPageToSelectedRowPage')) {\n        if (!this.grid) {\n            return;\n        }\n        this.grid.settings.selectedRowIndex = index;\n        if (this.isIndexOutOfRange(index)) {\n            // we need to deselect all rows if we got an incorrect index\n            this.deselectAllRows();\n            return;\n        }\n        if (switchPageToSelectedRowPage) {\n            const source = this.source;\n            const paging = source.getPaging();\n            const page = getPageForRowIndex(index, paging.perPage);\n            index = index % paging.perPage;\n            this.grid.settings.selectedRowIndex = index;\n            if (page !== paging.page) {\n                source.setPage(page);\n                return;\n            }\n        }\n        const row = this.grid.getRows()[index];\n        if (row) {\n            this.onSelectRow(row);\n        }\n        else {\n            // we need to deselect all rows if we got an incorrect index\n            this.deselectAllRows();\n        }\n    }\n    deselectAllRows() {\n        this.grid.dataSet.deselectAll();\n        this.emitDeselectRow(null);\n    }\n    editRowSelect(row) {\n        if (this.grid.getSetting('selectMode') === 'multi') {\n            this.onMultipleSelectRow(row);\n        }\n        else {\n            this.onSelectRow(row);\n        }\n    }\n    onUserSelectRow(row) {\n        if (this.grid.getSetting('selectMode') !== 'multi') {\n            this.grid.selectRow(row);\n            this.emitUserSelectRow(row);\n            this.emitSelectRow(row);\n        }\n    }\n    onRowHover(row) {\n        this.rowHover.emit(row);\n    }\n    multipleSelectRow(row) {\n        this.grid.multipleSelectRow(row);\n        this.emitUserSelectRow(row);\n        this.emitSelectRow(row);\n    }\n    onSelectAllRows($event) {\n        this.isAllSelected = !this.isAllSelected;\n        this.grid.selectAllRows(this.isAllSelected);\n        this.emitUserSelectRow(null);\n        this.emitSelectRow(null);\n    }\n    onSelectRow(row) {\n        this.grid.selectRow(row);\n        this.emitSelectRow(row);\n    }\n    onMultipleSelectRow(row) {\n        this.emitSelectRow(row);\n    }\n    initGrid() {\n        this.source = this.prepareSource();\n        this.grid = new Grid(this.source, this.prepareSettings());\n        this.subscribeToOnSelectRow();\n        this.subscribeToOnDeselectRow();\n    }\n    prepareSource() {\n        if (this.source instanceof DataSource) {\n            return this.source;\n        }\n        else if (this.source instanceof Array) {\n            return new LocalDataSource(this.source);\n        }\n        return new LocalDataSource();\n    }\n    prepareSettings() {\n        return deepExtend({}, this.defaultSettings, this.settings);\n    }\n    changePage($event) {\n        this.resetAllSelector();\n    }\n    sort($event) {\n        this.resetAllSelector();\n    }\n    filter($event) {\n        this.resetAllSelector();\n    }\n    resetAllSelector() {\n        this.isAllSelected = false;\n    }\n    emitUserSelectRow(row) {\n        const selectedRows = this.grid.getSelectedRows();\n        this.userRowSelect.emit({\n            data: row ? row.getData() : null,\n            isSelected: row ? row.getIsSelected() : null,\n            source: this.source,\n            selected: selectedRows && selectedRows.length ? selectedRows.map((r) => r.getData()) : [],\n        });\n    }\n    emitSelectRow(row) {\n        const data = {\n            data: row ? row.getData() : null,\n            isSelected: row ? row.getIsSelected() : null,\n            source: this.source,\n        };\n        this.rowSelect.emit(data);\n        if (!row?.isSelected) {\n            this.rowDeselect.emit(data);\n        }\n    }\n    emitDeselectRow(row) {\n        this.rowDeselect.emit({\n            data: row ? row.getData() : null,\n            isSelected: row ? row.getIsSelected() : null,\n            source: this.source,\n        });\n    }\n    isIndexOutOfRange(index) {\n        const dataAmount = this.source?.count();\n        return index < 0 || (typeof dataAmount === 'number' && index >= dataAmount);\n    }\n    subscribeToOnSelectRow() {\n        if (this.onSelectRowSubscription) {\n            this.onSelectRowSubscription.unsubscribe();\n        }\n        this.onSelectRowSubscription = this.grid.onSelectRow()\n            .pipe(takeUntil(this.destroyed$))\n            .subscribe((row) => {\n            this.emitSelectRow(row);\n        });\n    }\n    subscribeToOnDeselectRow() {\n        if (this.onDeselectRowSubscription) {\n            this.onDeselectRowSubscription.unsubscribe();\n        }\n        this.onDeselectRowSubscription = this.grid.onDeselectRow()\n            .pipe(takeUntil(this.destroyed$))\n            .subscribe((row) => {\n            this.emitDeselectRow(row);\n        });\n    }\n}\nNg2SmartTableComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: Ng2SmartTableComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\nNg2SmartTableComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.3.11\", type: Ng2SmartTableComponent, selector: \"ng2-smart-table\", inputs: { source: \"source\", settings: \"settings\" }, outputs: { rowSelect: \"rowSelect\", rowDeselect: \"rowDeselect\", userRowSelect: \"userRowSelect\", delete: \"delete\", edit: \"edit\", create: \"create\", custom: \"custom\", deleteConfirm: \"deleteConfirm\", editConfirm: \"editConfirm\", createConfirm: \"createConfirm\", rowHover: \"rowHover\" }, usesOnChanges: true, ngImport: i0, template: \"<table [id]=\\\"tableId\\\" [ngClass]=\\\"tableClass\\\">\\n\\n  <thead ng2-st-thead *ngIf=\\\"!isHideHeader || !isHideSubHeader\\\"\\n                      [grid]=\\\"grid\\\"\\n                      [isAllSelected]=\\\"isAllSelected\\\"\\n                      [source]=\\\"source\\\"\\n                      [createConfirm]=\\\"createConfirm\\\"\\n                      (create)=\\\"create.emit($event)\\\"\\n                      (selectAllRows)=\\\"onSelectAllRows($event)\\\"\\n                      (sort)=\\\"sort($event)\\\"\\n                      (filter)=\\\"filter($event)\\\">\\n  </thead>\\n\\n  <tbody ng2-st-tbody [grid]=\\\"grid\\\"\\n                      [source]=\\\"source\\\"\\n                      [deleteConfirm]=\\\"deleteConfirm\\\"\\n                      [editConfirm]=\\\"editConfirm\\\"\\n                      [rowClassFunction]=\\\"rowClassFunction\\\"\\n                      (edit)=\\\"edit.emit($event)\\\"\\n                      (delete)=\\\"delete.emit($event)\\\"\\n                      (custom)=\\\"custom.emit($event)\\\"\\n                      (userSelectRow)=\\\"onUserSelectRow($event)\\\"\\n                      (editRowSelect)=\\\"editRowSelect($event)\\\"\\n                      (multipleSelectRow)=\\\"multipleSelectRow($event)\\\"\\n                      (rowHover)=\\\"onRowHover($event)\\\">\\n  </tbody>\\n\\n</table>\\n\\n<ng2-smart-table-pager *ngIf=\\\"isPagerDisplay\\\"\\n                        [source]=\\\"source\\\"\\n                        [perPageSelect]=\\\"perPageSelect\\\"\\n                        (changePage)=\\\"changePage($event)\\\">\\n</ng2-smart-table-pager>\\n\", styles: [\":host{font-size:1rem}:host ::ng-deep *{box-sizing:border-box}:host ::ng-deep button,:host ::ng-deep input,:host ::ng-deep optgroup,:host ::ng-deep select,:host ::ng-deep textarea{color:inherit;font:inherit;margin:0}:host ::ng-deep table{line-height:1.5em;border-collapse:collapse;border-spacing:0;display:table;width:100%;max-width:100%;overflow:auto;word-break:normal;word-break:keep-all}:host ::ng-deep table tr th{font-weight:700}:host ::ng-deep table tr section{font-size:.75em;font-weight:700}:host ::ng-deep table tr td,:host ::ng-deep table tr th{font-size:.875em;margin:0;padding:.5em 1em}:host ::ng-deep a{color:#1e6bb8;text-decoration:none}:host ::ng-deep a:hover{text-decoration:underline}\\n\"], components: [{ type: Ng2SmartTableTheadComponent, selector: \"[ng2-st-thead]\", inputs: [\"grid\", \"source\", \"isAllSelected\", \"createConfirm\"], outputs: [\"sort\", \"selectAllRows\", \"create\", \"filter\"] }, { type: Ng2SmartTableTbodyComponent, selector: \"[ng2-st-tbody]\", inputs: [\"grid\", \"source\", \"deleteConfirm\", \"editConfirm\", \"rowClassFunction\"], outputs: [\"save\", \"cancel\", \"edit\", \"delete\", \"custom\", \"edited\", \"userSelectRow\", \"editRowSelect\", \"multipleSelectRow\", \"rowHover\"] }, { type: PagerComponent, selector: \"ng2-smart-table-pager\", inputs: [\"source\", \"perPageSelect\"], outputs: [\"changePage\"] }], directives: [{ type: i2.NgClass, selector: \"[ngClass]\", inputs: [\"class\", \"ngClass\"] }, { type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: Ng2SmartTableComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'ng2-smart-table', template: \"<table [id]=\\\"tableId\\\" [ngClass]=\\\"tableClass\\\">\\n\\n  <thead ng2-st-thead *ngIf=\\\"!isHideHeader || !isHideSubHeader\\\"\\n                      [grid]=\\\"grid\\\"\\n                      [isAllSelected]=\\\"isAllSelected\\\"\\n                      [source]=\\\"source\\\"\\n                      [createConfirm]=\\\"createConfirm\\\"\\n                      (create)=\\\"create.emit($event)\\\"\\n                      (selectAllRows)=\\\"onSelectAllRows($event)\\\"\\n                      (sort)=\\\"sort($event)\\\"\\n                      (filter)=\\\"filter($event)\\\">\\n  </thead>\\n\\n  <tbody ng2-st-tbody [grid]=\\\"grid\\\"\\n                      [source]=\\\"source\\\"\\n                      [deleteConfirm]=\\\"deleteConfirm\\\"\\n                      [editConfirm]=\\\"editConfirm\\\"\\n                      [rowClassFunction]=\\\"rowClassFunction\\\"\\n                      (edit)=\\\"edit.emit($event)\\\"\\n                      (delete)=\\\"delete.emit($event)\\\"\\n                      (custom)=\\\"custom.emit($event)\\\"\\n                      (userSelectRow)=\\\"onUserSelectRow($event)\\\"\\n                      (editRowSelect)=\\\"editRowSelect($event)\\\"\\n                      (multipleSelectRow)=\\\"multipleSelectRow($event)\\\"\\n                      (rowHover)=\\\"onRowHover($event)\\\">\\n  </tbody>\\n\\n</table>\\n\\n<ng2-smart-table-pager *ngIf=\\\"isPagerDisplay\\\"\\n                        [source]=\\\"source\\\"\\n                        [perPageSelect]=\\\"perPageSelect\\\"\\n                        (changePage)=\\\"changePage($event)\\\">\\n</ng2-smart-table-pager>\\n\", styles: [\":host{font-size:1rem}:host ::ng-deep *{box-sizing:border-box}:host ::ng-deep button,:host ::ng-deep input,:host ::ng-deep optgroup,:host ::ng-deep select,:host ::ng-deep textarea{color:inherit;font:inherit;margin:0}:host ::ng-deep table{line-height:1.5em;border-collapse:collapse;border-spacing:0;display:table;width:100%;max-width:100%;overflow:auto;word-break:normal;word-break:keep-all}:host ::ng-deep table tr th{font-weight:700}:host ::ng-deep table tr section{font-size:.75em;font-weight:700}:host ::ng-deep table tr td,:host ::ng-deep table tr th{font-size:.875em;margin:0;padding:.5em 1em}:host ::ng-deep a{color:#1e6bb8;text-decoration:none}:host ::ng-deep a:hover{text-decoration:underline}\\n\"] }]\n        }], propDecorators: { source: [{\n                type: Input\n            }], settings: [{\n                type: Input\n            }], rowSelect: [{\n                type: Output\n            }], rowDeselect: [{\n                type: Output\n            }], userRowSelect: [{\n                type: Output\n            }], delete: [{\n                type: Output\n            }], edit: [{\n                type: Output\n            }], create: [{\n                type: Output\n            }], custom: [{\n                type: Output\n            }], deleteConfirm: [{\n                type: Output\n            }], editConfirm: [{\n                type: Output\n            }], createConfirm: [{\n                type: Output\n            }], rowHover: [{\n                type: Output\n            }] } });\n\nclass Ng2SmartTableModule {\n}\nNg2SmartTableModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: Ng2SmartTableModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nNg2SmartTableModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: Ng2SmartTableModule, declarations: [Ng2SmartTableComponent], imports: [CommonModule,\n        FormsModule,\n        ReactiveFormsModule,\n        CellModule,\n        FilterModule,\n        PagerModule,\n        TBodyModule,\n        THeadModule], exports: [Ng2SmartTableComponent] });\nNg2SmartTableModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: Ng2SmartTableModule, imports: [[\n            CommonModule,\n            FormsModule,\n            ReactiveFormsModule,\n            CellModule,\n            FilterModule,\n            PagerModule,\n            TBodyModule,\n            THeadModule,\n        ]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: Ng2SmartTableModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [\n                        CommonModule,\n                        FormsModule,\n                        ReactiveFormsModule,\n                        CellModule,\n                        FilterModule,\n                        PagerModule,\n                        TBodyModule,\n                        THeadModule,\n                    ],\n                    declarations: [\n                        Ng2SmartTableComponent,\n                    ],\n                    exports: [\n                        Ng2SmartTableComponent,\n                    ],\n                }]\n        }] });\n\nclass ServerSourceConf {\n    constructor({ endPoint = '', sortFieldKey = '', sortDirKey = '', pagerPageKey = '', pagerLimitKey = '', filterFieldKey = '', totalKey = '', dataKey = '' } = {}) {\n        this.endPoint = endPoint ? endPoint : '';\n        this.sortFieldKey = sortFieldKey ? sortFieldKey : ServerSourceConf.SORT_FIELD_KEY;\n        this.sortDirKey = sortDirKey ? sortDirKey : ServerSourceConf.SORT_DIR_KEY;\n        this.pagerPageKey = pagerPageKey ? pagerPageKey : ServerSourceConf.PAGER_PAGE_KEY;\n        this.pagerLimitKey = pagerLimitKey ? pagerLimitKey : ServerSourceConf.PAGER_LIMIT_KEY;\n        this.filterFieldKey = filterFieldKey ? filterFieldKey : ServerSourceConf.FILTER_FIELD_KEY;\n        this.totalKey = totalKey ? totalKey : ServerSourceConf.TOTAL_KEY;\n        this.dataKey = dataKey ? dataKey : ServerSourceConf.DATA_KEY;\n    }\n}\nServerSourceConf.SORT_FIELD_KEY = '_sort';\nServerSourceConf.SORT_DIR_KEY = '_order';\nServerSourceConf.PAGER_PAGE_KEY = '_page';\nServerSourceConf.PAGER_LIMIT_KEY = '_limit';\nServerSourceConf.FILTER_FIELD_KEY = '#field#_like';\nServerSourceConf.TOTAL_KEY = 'x-total-count';\nServerSourceConf.DATA_KEY = '';\n\nclass ServerDataSource extends LocalDataSource {\n    constructor(http, conf = {}) {\n        super();\n        this.http = http;\n        this.lastRequestCount = 0;\n        this.conf = new ServerSourceConf(conf);\n        if (!this.conf.endPoint) {\n            throw new Error('At least endPoint must be specified as a configuration of the server data source.');\n        }\n    }\n    count() {\n        return this.lastRequestCount;\n    }\n    getElements() {\n        return this.requestElements()\n            .pipe(map(res => {\n            this.lastRequestCount = this.extractTotalFromResponse(res);\n            this.data = this.extractDataFromResponse(res);\n            return this.data;\n        })).toPromise();\n    }\n    /**\n     * Extracts array of data from server response\n     * @param res\n     * @returns {any}\n     */\n    extractDataFromResponse(res) {\n        const rawData = res.body;\n        const data = !!this.conf.dataKey ? getDeepFromObject(rawData, this.conf.dataKey, []) : rawData;\n        if (data instanceof Array) {\n            return data;\n        }\n        throw new Error(`Data must be an array.\n    Please check that data extracted from the server response by the key '${this.conf.dataKey}' exists and is array.`);\n    }\n    /**\n     * Extracts total rows count from the server response\n     * Looks for the count in the heders first, then in the response body\n     * @param res\n     * @returns {any}\n     */\n    extractTotalFromResponse(res) {\n        if (res.headers.has(this.conf.totalKey)) {\n            return +res.headers.get(this.conf.totalKey);\n        }\n        else {\n            const rawData = res.body;\n            return getDeepFromObject(rawData, this.conf.totalKey, 0);\n        }\n    }\n    requestElements() {\n        let httpParams = this.createRequesParams();\n        return this.http.get(this.conf.endPoint, { params: httpParams, observe: 'response' });\n    }\n    createRequesParams() {\n        let httpParams = new HttpParams();\n        httpParams = this.addSortRequestParams(httpParams);\n        httpParams = this.addFilterRequestParams(httpParams);\n        return this.addPagerRequestParams(httpParams);\n    }\n    addSortRequestParams(httpParams) {\n        if (this.sortConf) {\n            this.sortConf.forEach((fieldConf) => {\n                httpParams = httpParams.set(this.conf.sortFieldKey, fieldConf.field);\n                httpParams = httpParams.set(this.conf.sortDirKey, fieldConf.direction.toUpperCase());\n            });\n        }\n        return httpParams;\n    }\n    addFilterRequestParams(httpParams) {\n        if (this.filterConf.filters) {\n            this.filterConf.filters.forEach((fieldConf) => {\n                if (fieldConf['search']) {\n                    httpParams = httpParams.set(this.conf.filterFieldKey.replace('#field#', fieldConf['field']), fieldConf['search']);\n                }\n            });\n        }\n        return httpParams;\n    }\n    addPagerRequestParams(httpParams) {\n        if (this.pagingConf && this.pagingConf['page'] && this.pagingConf['perPage']) {\n            httpParams = httpParams.set(this.conf.pagerPageKey, this.pagingConf['page']);\n            httpParams = httpParams.set(this.conf.pagerLimitKey, this.pagingConf['perPage']);\n        }\n        return httpParams;\n    }\n}\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { Cell, DefaultEditor, DefaultFilter, LocalDataSource, Ng2SmartTableComponent, Ng2SmartTableModule, ServerDataSource };\n//# sourceMappingURL=ng2-smart-table.mjs.map\n","map":{"version":3,"file":"ng2-smart-table.mjs","sources":["../../../projects/ng2-smart-table/src/lib/lib/helpers.ts","../../../projects/ng2-smart-table/src/lib/lib/data-set/cell.ts","../../../projects/ng2-smart-table/src/lib/lib/data-set/row.ts","../../../projects/ng2-smart-table/src/lib/lib/data-set/column.ts","../../../projects/ng2-smart-table/src/lib/lib/data-set/data-set.ts","../../../projects/ng2-smart-table/src/lib/lib/grid.ts","../../../projects/ng2-smart-table/src/lib/components/cell/cell-view-mode/custom-view.component.ts","../../../projects/ng2-smart-table/src/lib/components/cell/cell-view-mode/view-cell.component.ts","../../../projects/ng2-smart-table/src/lib/components/cell/cell-edit-mode/edit-cell-default.ts","../../../projects/ng2-smart-table/src/lib/components/cell/cell-edit-mode/custom-edit.component.ts","../../../projects/ng2-smart-table/src/lib/components/cell/cell-editors/default-editor.ts","../../../projects/ng2-smart-table/src/lib/components/cell/cell-editors/select-editor.component.ts","../../../projects/ng2-smart-table/src/lib/components/cell/cell-editors/textarea-editor.component.ts","../../../projects/ng2-smart-table/src/lib/components/cell/cell-editors/checkbox-editor.component.ts","../../../projects/ng2-smart-table/src/lib/components/cell/cell-editors/completer-editor.component.ts","../../../projects/ng2-smart-table/src/lib/components/cell/cell-editors/input-editor.component.ts","../../../projects/ng2-smart-table/src/lib/components/cell/cell-edit-mode/default-edit.component.ts","../../../projects/ng2-smart-table/src/lib/components/cell/cell-edit-mode/default-edit.component.html","../../../projects/ng2-smart-table/src/lib/components/cell/cell-edit-mode/edit-cell.component.ts","../../../projects/ng2-smart-table/src/lib/components/cell/cell.component.ts","../../../projects/ng2-smart-table/src/lib/components/cell/cell.module.ts","../../../projects/ng2-smart-table/src/lib/lib/data-source/data-source.ts","../../../projects/ng2-smart-table/src/lib/components/filter/filter-default.ts","../../../projects/ng2-smart-table/src/lib/components/filter/custom-filter.component.ts","../../../projects/ng2-smart-table/src/lib/components/filter/filter-types/default-filter.ts","../../../projects/ng2-smart-table/src/lib/components/filter/filter-types/select-filter.component.ts","../../../projects/ng2-smart-table/src/lib/components/filter/filter-types/checkbox-filter.component.ts","../../../projects/ng2-smart-table/src/lib/components/filter/filter-types/completer-filter.component.ts","../../../projects/ng2-smart-table/src/lib/components/filter/filter-types/input-filter.component.ts","../../../projects/ng2-smart-table/src/lib/components/filter/default-filter.component.ts","../../../projects/ng2-smart-table/src/lib/components/filter/filter.component.ts","../../../projects/ng2-smart-table/src/lib/components/filter/filter.module.ts","../../../projects/ng2-smart-table/src/lib/components/pager/pager.component.ts","../../../projects/ng2-smart-table/src/lib/components/pager/pager.module.ts","../../../projects/ng2-smart-table/src/lib/components/tbody/cells/custom.component.ts","../../../projects/ng2-smart-table/src/lib/components/tbody/cells/edit-delete.component.ts","../../../projects/ng2-smart-table/src/lib/components/tbody/cells/create-cancel.component.ts","../../../projects/ng2-smart-table/src/lib/components/tbody/tbody.component.ts","../../../projects/ng2-smart-table/src/lib/components/tbody/tbody.component.html","../../../projects/ng2-smart-table/src/lib/components/tbody/tbody.module.ts","../../../projects/ng2-smart-table/src/lib/components/thead/cells/checkbox-select-all.component.ts","../../../projects/ng2-smart-table/src/lib/components/thead/cells/actions-title.component.ts","../../../projects/ng2-smart-table/src/lib/components/thead/cells/title/title.component.ts","../../../projects/ng2-smart-table/src/lib/components/thead/cells/column-title.component.ts","../../../projects/ng2-smart-table/src/lib/components/thead/rows/thead-titles-row.component.ts","../../../projects/ng2-smart-table/src/lib/components/thead/cells/add-button.component.ts","../../../projects/ng2-smart-table/src/lib/components/thead/rows/thead-filters-row.component.ts","../../../projects/ng2-smart-table/src/lib/components/thead/cells/actions.component.ts","../../../projects/ng2-smart-table/src/lib/components/thead/rows/thead-form-row.component.ts","../../../projects/ng2-smart-table/src/lib/components/thead/thead.component.ts","../../../projects/ng2-smart-table/src/lib/components/thead/thead.component.html","../../../projects/ng2-smart-table/src/lib/components/thead/thead.module.ts","../../../projects/ng2-smart-table/src/lib/lib/data-source/local/local.sorter.ts","../../../projects/ng2-smart-table/src/lib/lib/data-source/local/local.filter.ts","../../../projects/ng2-smart-table/src/lib/lib/data-source/local/local.pager.ts","../../../projects/ng2-smart-table/src/lib/lib/data-source/local/local.data-source.ts","../../../projects/ng2-smart-table/src/lib/ng2-smart-table.component.ts","../../../projects/ng2-smart-table/src/lib/ng2-smart-table.component.html","../../../projects/ng2-smart-table/src/lib/ng2-smart-table.module.ts","../../../projects/ng2-smart-table/src/lib/lib/data-source/server/server-source.conf.ts","../../../projects/ng2-smart-table/src/lib/lib/data-source/server/server.data-source.ts","../../../projects/ng2-smart-table/src/ng2-smart-table.ts"],"sourcesContent":["import { cloneDeep } from 'lodash';\n\n/**\n * Extending object that entered in first argument.\n *\n * Returns extended object or false if have no target object or incorrect type.\n *\n * If you wish to clone source object (without modify it), just use empty new\n * object as first argument, like this:\n *   deepExtend({}, yourObj_1, [yourObj_N]);\n */\nexport const deepExtend = function(...objects: Array<any>): any {\n  if (arguments.length < 1 || typeof arguments[0] !== 'object') {\n    return false;\n  }\n\n  if (arguments.length < 2) {\n    return arguments[0];\n  }\n\n  const target = arguments[0];\n\n  // convert arguments to array and cut off target object\n  const args = Array.prototype.slice.call(arguments, 1);\n\n  let val, src;\n\n  args.forEach((obj: any) => {\n    // skip argument if it is array or isn't object\n    if (typeof obj !== 'object' || Array.isArray(obj)) {\n      return;\n    }\n\n    Object.keys(obj).forEach(function (key) {\n      src = target[key]; // source value\n      val = obj[key]; // new value\n\n      // recursion prevention\n      if (val === target) {\n        return;\n\n        /**\n         * if new value isn't object then just overwrite by new value\n         * instead of extending.\n         */\n      } else if (typeof val !== 'object' || val === null) {\n        target[key] = val;\n        return;\n\n        // just clone arrays (and recursive clone objects inside)\n      } else if (Array.isArray(val)) {\n        target[key] = cloneDeep(val);\n        return;\n\n        // overwrite by new value if source isn't object or array\n      } else if (typeof src !== 'object' || src === null || Array.isArray(src)) {\n        target[key] = deepExtend({}, val);\n        return;\n\n        // source value and new value is objects both, extending...\n      } else {\n        target[key] = deepExtend(src, val);\n        return;\n      }\n    });\n  });\n\n  return target;\n};\n\nexport class Deferred {\n\n  promise: Promise<any>;\n\n  resolve: any;\n  reject: any;\n\n  constructor() {\n    this.promise = new Promise((resolve, reject) => {\n      this.resolve = resolve;\n      this.reject = reject;\n    });\n  }\n}\n\n// getDeepFromObject({result: {data: 1}}, 'result.data', 2); // returns 1\nexport function getDeepFromObject(object = {}, name: string, defaultValue?: any) {\n  const keys = name.split('.');\n  // clone the object\n  let level = deepExtend({}, object);\n  keys.forEach((k) => {\n    if (level && typeof level[k] !== 'undefined') {\n      level = level[k];\n    }\n  });\n\n  return typeof level === 'undefined' ? defaultValue : level;\n}\n\nexport function getPageForRowIndex(index: number, perPage: number): number {\n  // we need to add 1 to convert 0-based index to 1-based page number.\n  return Math.floor(index / perPage) + 1;\n}\n","import { Column } from './column';\nimport { DataSet } from './data-set';\nimport { Row } from './row';\n\nexport function prepareValue (value: any) { return value }\n\nexport class Cell {\n\n  newValue: any = '';\n  protected static PREPARE = prepareValue;\n\n  constructor(protected value: any, protected row: Row, protected column: any, protected dataSet: DataSet) {\n    this.newValue = value;\n  }\n\n  getColumn(): Column {\n    return this.column;\n  }\n\n  getRow(): Row {\n    return this.row;\n  }\n\n  getValue(): any {\n    const valid = this.column.getValuePrepareFunction() instanceof Function;\n    const prepare = valid ? this.column.getValuePrepareFunction() : Cell.PREPARE;\n    return prepare.call(null, this.value, this.row.getData(), this);\n  }\n\n  setValue(value: any): any {\n    this.newValue = value;\n  }\n\n  getId(): string {\n    return this.getColumn().id;\n  }\n\n  getTitle(): string {\n    return this.getColumn().title;\n  }\n\n  isEditable(): boolean {\n    if (this.getRow().index === -1) {\n      return this.getColumn().isAddable;\n    }\n    else {\n      return this.getColumn().isEditable;\n    }\n  }\n\n}\n","import { Cell } from './cell';\nimport { Column } from './column';\nimport { DataSet } from './data-set';\n\nexport class Row {\n\n  isSelected: boolean = false;\n  isInEditing: boolean = false;\n  cells: Array<Cell> = [];\n\n\n  constructor(public index: number, protected data: any, protected _dataSet: DataSet) {\n    this.process();\n  }\n\n  getCell(column: Column): Cell {\n    return this.cells.find(el => el.getColumn() === column);\n  }\n\n  getCells() {\n    return this.cells;\n  }\n\n  getData(): any {\n    return this.data;\n  }\n\n  getIsSelected(): boolean {\n    return this.isSelected;\n  }\n\n  getNewData(): any {\n    const values = Object.assign({}, this.data);\n    this.getCells().forEach((cell) => values[cell.getColumn().id] = cell.newValue);\n    return values;\n  }\n\n  setData(data: any): any {\n    this.data = data;\n    this.process();\n  }\n\n  process() {\n    this.cells = [];\n    this._dataSet.getColumns().forEach((column: Column) => {\n      const cell = this.createCell(column);\n      this.cells.push(cell);\n    });\n  }\n\n  createCell(column: Column): Cell {\n    const defValue = (column as any).settings.defaultValue ? (column as any).settings.defaultValue : '';\n    const value = typeof this.data[column.id] === 'undefined' ? defValue : this.data[column.id];\n    return new Cell(value, this, column, this._dataSet);\n  }\n}\n","import { DataSet } from './data-set';\n\nexport class Column {\n\n  title: string = '';\n  type: string = '';\n  class: string = '';\n  width: string = '';\n  hide: boolean = false;\n  isSortable: boolean = false;\n  isEditable: boolean = true;\n  isAddable: boolean = true;\n  isFilterable: boolean = false;\n  sortDirection: string = '';\n  defaultSortDirection: string = '';\n  editor: { type: string, config: any, component: any } = { type: '', config: {}, component: null };\n  filter: { type: string, config: any, component: any } = { type: '', config: {}, component: null };\n  renderComponent: any = null;\n  compareFunction: Function;\n  valuePrepareFunction: Function;\n  filterFunction: Function;\n  onComponentInitFunction: Function;\n\n  constructor(public id: string, protected settings: any, protected dataSet: DataSet) {\n    this.process();\n  }\n\n  getOnComponentInitFunction(): Function {\n    return this.onComponentInitFunction;\n  }\n\n  getCompareFunction(): Function {\n    return this.compareFunction;\n  }\n\n  getValuePrepareFunction(): Function {\n    return this.valuePrepareFunction;\n  }\n\n  getFilterFunction(): Function {\n    return this.filterFunction;\n  }\n\n  getConfig(): any {\n    return this.editor && this.editor.config;\n  }\n\n  getFilterType(): any {\n    return this.filter && this.filter.type;\n  }\n\n  getFilterConfig(): any {\n    return this.filter && this.filter.config;\n  }\n\n  protected process() {\n    this.title = this.settings['title'];\n    this.class = this.settings['class'];\n    this.width = this.settings['width'];\n    this.hide = !!this.settings['hide'];\n    this.type = this.prepareType();\n    this.editor = this.settings['editor'];\n    this.filter = this.settings['filter'];\n    this.renderComponent = this.settings['renderComponent'];\n\n    this.isFilterable = typeof this.settings['filter'] === 'undefined' ? true : !!this.settings['filter'];\n    this.defaultSortDirection = ['asc', 'desc']\n      .indexOf(this.settings['sortDirection']) !== -1 ? this.settings['sortDirection'] : '';\n    this.isSortable = typeof this.settings['sort'] === 'undefined' ? true : !!this.settings['sort'];\n    this.isEditable = typeof this.settings['editable'] === 'undefined' ? true : !!this.settings['editable'];\n    this.isAddable=typeof this.settings['addable'] === 'undefined' ? true : !!this.settings['addable'];\n    this.sortDirection = this.prepareSortDirection();\n\n    this.compareFunction = this.settings['compareFunction'];\n    this.valuePrepareFunction = this.settings['valuePrepareFunction'];\n    this.filterFunction = this.settings['filterFunction'];\n    this.onComponentInitFunction = this.settings['onComponentInitFunction'];\n  }\n\n  prepareType(): string {\n    return this.settings['type'] || this.determineType();\n  }\n\n  prepareSortDirection(): string {\n    return this.settings['sort'] === 'desc' ? 'desc' : 'asc';\n  }\n\n  determineType(): string {\n    // TODO: determine type by data\n    return 'text';\n  }\n}\n","import { Row } from './row';\nimport { Column } from './column';\n\nexport class DataSet {\n\n  newRow: Row;\n\n  protected data: Array<any> = [];\n  protected columns: Array<Column> = [];\n  protected rows: Array<Row> = [];\n  protected selectedRow: Row;\n  protected willSelect: string;\n\n  constructor(data: Array<any> = [], protected columnSettings: Object) {\n    this.createColumns(columnSettings);\n    this.setData(data);\n\n    this.createNewRow();\n  }\n\n  setData(data: Array<any>) {\n    this.data = data;\n    this.createRows();\n  }\n\n  getColumns(): Array<Column> {\n    return this.columns;\n  }\n\n  getRows(): Array<Row> {\n    return this.rows;\n  }\n\n  getFirstRow(): Row {\n    return this.rows[0];\n  }\n\n  getLastRow(): Row {\n    return this.rows[this.rows.length - 1];\n  }\n\n  findRowByData(data: any): Row {\n    return this.rows.find((row: Row) => row.getData() === data);\n  }\n\n  deselectAll() {\n    this.rows.forEach((row) => {\n      row.isSelected = false;\n    });\n    // we need to clear selectedRow field because no one row selected\n    this.selectedRow = undefined;\n  }\n\n  selectRow(row: Row): Row | undefined {\n    const previousIsSelected = row.isSelected;\n    this.deselectAll();\n\n    row.isSelected = !previousIsSelected;\n    this.selectedRow = row;\n\n    return this.selectedRow;\n  }\n\n  multipleSelectRow(row: Row): Row {\n    row.isSelected = !row.isSelected;\n    this.selectedRow = row;\n\n    return this.selectedRow;\n  }\n\n  selectPreviousRow(): Row {\n    if (this.rows.length > 0) {\n      let index = this.selectedRow ? this.selectedRow.index : 0;\n      if (index > this.rows.length - 1) {\n        index = this.rows.length - 1;\n      }\n      this.selectRow(this.rows[index]);\n      return this.selectedRow;\n    }\n  }\n\n  selectFirstRow(): Row | undefined {\n    if (this.rows.length > 0) {\n      this.selectRow(this.rows[0]);\n      return this.selectedRow;\n    }\n  }\n\n  selectLastRow(): Row | undefined {\n    if (this.rows.length > 0) {\n      this.selectRow(this.rows[this.rows.length - 1]);\n      return this.selectedRow;\n    }\n  }\n\n  selectRowByIndex(index: number): Row | undefined {\n    const rowsLength: number = this.rows.length;\n    if (rowsLength === 0) {\n      return;\n    }\n    if (!index) {\n      this.selectFirstRow();\n      return this.selectedRow;\n    }\n    if (index > 0 && index < rowsLength) {\n      this.selectRow(this.rows[index]);\n      return this.selectedRow;\n    }\n    // we need to deselect all rows if we got an incorrect index\n    this.deselectAll();\n  }\n\n  willSelectFirstRow() {\n    this.willSelect = 'first';\n  }\n\n  willSelectLastRow() {\n    this.willSelect = 'last';\n  }\n\n  select(selectedRowIndex?: number): Row | undefined {\n    if (this.getRows().length === 0) {\n      return;\n    }\n    if (this.willSelect) {\n      if (this.willSelect === 'first') {\n        this.selectFirstRow();\n      }\n      if (this.willSelect === 'last') {\n        this.selectLastRow();\n      }\n      this.willSelect = '';\n    } else {\n      this.selectRowByIndex(selectedRowIndex);\n    }\n\n    return this.selectedRow;\n  }\n\n  createNewRow() {\n    this.newRow = new Row(-1, {}, this);\n    this.newRow.isInEditing = true;\n  }\n\n  /**\n   * Create columns by mapping from the settings\n   * @param settings\n   * @private\n   */\n  createColumns(settings: any) {\n    for (const id in settings) {\n      if (settings.hasOwnProperty(id)) {\n        this.columns.push(new Column(id, settings[id], this));\n      }\n    }\n  }\n\n  /**\n   * Create rows based on current data prepared in data source\n   * @private\n   */\n  createRows() {\n    this.rows = [];\n    this.data.forEach((el, index) => {\n      this.rows.push(new Row(index, el, this));\n    });\n  }\n}\n","import { Subject, Subscription } from 'rxjs';\nimport { Observable } from 'rxjs';\nimport { EventEmitter } from '@angular/core';\n\nimport { Deferred, getDeepFromObject, getPageForRowIndex } from './helpers';\nimport { Column } from './data-set/column';\nimport { Row } from './data-set/row';\nimport { DataSet } from './data-set/data-set';\nimport { DataSource } from './data-source/data-source';\n\nexport class Grid {\n\n  createFormShown: boolean = false;\n\n  source: DataSource;\n  settings: any;\n  dataSet: DataSet;\n\n  onSelectRowSource = new Subject<any>();\n  onDeselectRowSource = new Subject<any>();\n\n  private sourceOnChangedSubscription: Subscription;\n  private sourceOnUpdatedSubscription: Subscription;\n\n  constructor(source: DataSource, settings: any) {\n    this.setSettings(settings);\n    this.setSource(source);\n  }\n\n  detach(): void {\n    if (this.sourceOnChangedSubscription) {\n      this.sourceOnChangedSubscription.unsubscribe();\n    }\n    if (this.sourceOnUpdatedSubscription) {\n      this.sourceOnUpdatedSubscription.unsubscribe();\n    }\n  }\n\n  showActionColumn(position: string): boolean {\n    return this.isCurrentActionsPosition(position) && this.isActionsVisible();\n  }\n\n  isCurrentActionsPosition(position: string): boolean {\n    return position == this.getSetting('actions.position');\n  }\n\n  isActionsVisible(): boolean {\n    return this.getSetting('actions.add') || this.getSetting('actions.edit') || this.getSetting('actions.delete') || this.getSetting('actions.custom').length;\n  }\n\n  isMultiSelectVisible(): boolean {\n    return this.getSetting('selectMode') === 'multi';\n  }\n\n  getNewRow(): Row {\n    return this.dataSet.newRow;\n  }\n\n  setSettings(settings: Object) {\n    this.settings = settings;\n    this.dataSet = new DataSet([], this.getSetting('columns'));\n\n    if (this.source) {\n      this.source.refresh();\n    }\n  }\n\n  getDataSet(): DataSet {\n    return this.dataSet;\n  }\n\n  setSource(source: DataSource) {\n    this.source = this.prepareSource(source);\n    this.detach();\n\n    this.sourceOnChangedSubscription = this.source.onChanged().subscribe((changes: any) => this.processDataChange(changes));\n\n    this.sourceOnUpdatedSubscription = this.source.onUpdated().subscribe((data: any) => {\n      const changedRow = this.dataSet.findRowByData(data);\n      changedRow.setData(data);\n    });\n  }\n\n  getSetting(name: string, defaultValue?: any): any {\n    return getDeepFromObject(this.settings, name, defaultValue);\n  }\n\n  getColumns(): Array<Column> {\n    return this.dataSet.getColumns();\n  }\n\n  getRows(): Array<Row> {\n    return this.dataSet.getRows();\n  }\n\n  selectRow(row: Row) {\n    this.dataSet.selectRow(row);\n  }\n\n  multipleSelectRow(row: Row) {\n    this.dataSet.multipleSelectRow(row);\n  }\n\n  onSelectRow(): Observable<any> {\n    return this.onSelectRowSource.asObservable();\n  }\n\n  onDeselectRow(): Observable<any> {\n    return this.onDeselectRowSource.asObservable();\n  }\n\n  edit(row: Row) {\n    row.isInEditing = true;\n  }\n\n  create(row: Row, confirmEmitter: EventEmitter<any>) {\n\n    const deferred = new Deferred();\n    deferred.promise.then((newData) => {\n      newData = newData ? newData : row.getNewData();\n      if (deferred.resolve.skipAdd) {\n        this.createFormShown = false;\n      } else {\n        this.source.prepend(newData).then(() => {\n          this.createFormShown = false;\n          this.dataSet.createNewRow();\n        });\n      }\n    }).catch((err) => {\n      // doing nothing\n    });\n\n    if (this.getSetting('add.confirmCreate')) {\n      confirmEmitter.emit({\n        newData: row.getNewData(),\n        source: this.source,\n        confirm: deferred,\n      });\n    } else {\n      deferred.resolve();\n    }\n  }\n\n  save(row: Row, confirmEmitter: EventEmitter<any>) {\n\n    const deferred = new Deferred();\n    deferred.promise.then((newData) => {\n      newData = newData ? newData : row.getNewData();\n      if (deferred.resolve.skipEdit) {\n        row.isInEditing = false;\n      } else {\n        this.source.update(row.getData(), newData).then(() => {\n          row.isInEditing = false;\n        });\n      }\n    }).catch((err) => {\n      // doing nothing\n    });\n\n    if (this.getSetting('edit.confirmSave')) {\n      confirmEmitter.emit({\n        data: row.getData(),\n        newData: row.getNewData(),\n        source: this.source,\n        confirm: deferred,\n      });\n    } else {\n      deferred.resolve();\n    }\n  }\n\n  delete(row: Row, confirmEmitter: EventEmitter<any>) {\n\n    const deferred = new Deferred();\n    deferred.promise.then(() => {\n      this.source.remove(row.getData());\n    }).catch((err) => {\n      // doing nothing\n    });\n\n    if (this.getSetting('delete.confirmDelete')) {\n      confirmEmitter.emit({\n        data: row.getData(),\n        source: this.source,\n        confirm: deferred,\n      });\n    } else {\n      deferred.resolve();\n    }\n  }\n\n  processDataChange(changes: any) {\n    if (this.shouldProcessChange(changes)) {\n      this.dataSet.setData(changes['elements']);\n      if (this.getSetting('selectMode') !== 'multi') {\n        const row = this.determineRowToSelect(changes);\n\n        if (row) {\n          this.onSelectRowSource.next(row);\n        } else {\n          this.onDeselectRowSource.next(null);\n        }\n      }\n    }\n  }\n\n  shouldProcessChange(changes: any): boolean {\n    if (['filter', 'sort', 'page', 'remove', 'refresh', 'load', 'paging'].indexOf(changes['action']) !== -1) {\n      return true;\n    } else if (['prepend', 'append'].indexOf(changes['action']) !== -1 && !this.getSetting('pager.display')) {\n      return true;\n    }\n\n    return false;\n  }\n\n  /**\n   * @breaking-change 1.8.0\n   * Need to add `| null` in return type\n   *\n   * TODO: move to selectable? Separate directive\n   */\n  determineRowToSelect(changes: any): Row {\n\n    if (['load', 'page', 'filter', 'sort', 'refresh'].indexOf(changes['action']) !== -1) {\n      return this.dataSet.select(this.getRowIndexToSelect());\n    }\n\n    if (this.shouldSkipSelection()) {\n      return null;\n    }\n\n    if (changes['action'] === 'remove') {\n      if (changes['elements'].length === 0) {\n        // we have to store which one to select as the data will be reloaded\n        this.dataSet.willSelectLastRow();\n      } else {\n        return this.dataSet.selectPreviousRow();\n      }\n    }\n    if (changes['action'] === 'append') {\n      // we have to store which one to select as the data will be reloaded\n      this.dataSet.willSelectLastRow();\n    }\n    if (changes['action'] === 'add') {\n      return this.dataSet.selectFirstRow();\n    }\n    if (changes['action'] === 'update') {\n      return this.dataSet.selectFirstRow();\n    }\n    if (changes['action'] === 'prepend') {\n      // we have to store which one to select as the data will be reloaded\n      this.dataSet.willSelectFirstRow();\n    }\n    return null;\n  }\n\n  prepareSource(source: any): DataSource {\n    const initialSource: any = this.getInitialSort();\n    if (initialSource && initialSource['field'] && initialSource['direction']) {\n      source.setSort([initialSource], false);\n    }\n    if (this.getSetting('pager.display') === true) {\n      source.setPaging(this.getPageToSelect(source), this.getSetting('pager.perPage'), false);\n    }\n\n    source.refresh();\n    return source;\n  }\n\n  getInitialSort() {\n    const sortConf: any = {};\n    this.getColumns().forEach((column: Column) => {\n      if (column.isSortable && column.defaultSortDirection) {\n        sortConf['field'] = column.id;\n        sortConf['direction'] = column.defaultSortDirection;\n        sortConf['compare'] = column.getCompareFunction();\n      }\n    });\n    return sortConf;\n  }\n\n  getSelectedRows(): Array<any> {\n    return this.dataSet.getRows()\n      .filter(r => r.isSelected);\n  }\n\n  selectAllRows(status: any) {\n    this.dataSet.getRows()\n      .forEach(r => r.isSelected = status);\n  }\n\n  getFirstRow(): Row {\n    return this.dataSet.getFirstRow();\n  }\n\n  getLastRow(): Row {\n    return this.dataSet.getLastRow();\n  }\n\n  private getSelectionInfo(): { perPage: number, page: number, selectedRowIndex: number, switchPageToSelectedRowPage: boolean } {\n    const switchPageToSelectedRowPage: boolean = this.getSetting('switchPageToSelectedRowPage');\n    const selectedRowIndex: number = Number(this.getSetting('selectedRowIndex', 0)) || 0;\n    const { perPage, page }: { perPage: number, page: number } = this.getSetting('pager');\n    return { perPage, page, selectedRowIndex, switchPageToSelectedRowPage };\n  }\n\n  private getRowIndexToSelect(): number {\n    const { switchPageToSelectedRowPage, selectedRowIndex, perPage } = this.getSelectionInfo();\n    const dataAmount: number = this.source.count();\n    /**\n     * source - contains all table data\n     * dataSet - contains data for current page\n     * selectedRowIndex - contains index for data in all data\n     *\n     * because of that, we need to count index for a specific row in page\n     * if\n     * `switchPageToSelectedRowPage` - we need to change page automatically\n     * `selectedRowIndex < dataAmount && selectedRowIndex >= 0` - index points to existing data\n     * (if index points to non-existing data and we calculate index for current page - we will get wrong selected row.\n     *  if we return index witch not points to existing data - no line will be highlighted)\n     */\n    return (\n      switchPageToSelectedRowPage &&\n      selectedRowIndex < dataAmount &&\n      selectedRowIndex >= 0\n    ) ?\n      selectedRowIndex % perPage :\n      selectedRowIndex;\n  }\n\n  private getPageToSelect(source: DataSource): number {\n    const { switchPageToSelectedRowPage, selectedRowIndex, perPage, page } = this.getSelectionInfo();\n    let pageToSelect: number = Math.max(1, page);\n    if (switchPageToSelectedRowPage && selectedRowIndex >= 0) {\n      pageToSelect = getPageForRowIndex(selectedRowIndex, perPage);\n    }\n    const maxPageAmount: number = Math.ceil(source.count() / perPage);\n    return maxPageAmount ? Math.min(pageToSelect, maxPageAmount) : pageToSelect;\n  }\n\n  private shouldSkipSelection(): boolean {\n    /**\n     * For backward compatibility when using `selectedRowIndex` with non-number values - ignored.\n     *\n     * Therefore, in order to select a row after some changes,\n     * the `selectedRowIndex` value must be invalid or >= 0 (< 0 means that no row is selected).\n     *\n     * `Number(value)` returns `NaN` on all invalid cases, and comparisons with `NaN` always return `false`.\n     *\n     * !!! We should skip a row only in cases when `selectedRowIndex` < 0\n     * because when < 0 all lines must be deselected\n     */\n    const selectedRowIndex = Number(this.getSetting('selectedRowIndex'));\n    return selectedRowIndex < 0;\n  }\n}\n","import {\n  Component,\n  Input,\n  ComponentFactoryResolver,\n  ViewChild,\n  ViewContainerRef,\n  OnInit,\n  OnDestroy,\n} from '@angular/core';\n\nimport { Cell } from '../../../lib/data-set/cell';\nimport { ViewCell } from './view-cell';\n\n@Component({\n  selector: 'custom-view-component',\n  template: `\n    <ng-template #dynamicTarget></ng-template>\n  `,\n})\nexport class CustomViewComponent implements OnInit, OnDestroy {\n\n  customComponent: any;\n  @Input() cell: Cell;\n  @ViewChild('dynamicTarget', { read: ViewContainerRef, static: true }) dynamicTarget: any;\n\n  constructor(private resolver: ComponentFactoryResolver) {\n  }\n\n  ngOnInit() {\n    if (this.cell && !this.customComponent) {\n      this.createCustomComponent();\n      this.callOnComponentInit();\n      this.patchInstance();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this.customComponent) {\n      this.customComponent.destroy();\n    }\n  }\n\n  protected createCustomComponent() {\n    const componentFactory = this.resolver.resolveComponentFactory(this.cell.getColumn().renderComponent);\n    this.customComponent = this.dynamicTarget.createComponent(componentFactory);\n  }\n\n  protected callOnComponentInit() {\n    const onComponentInitFunction = this.cell.getColumn().getOnComponentInitFunction();\n    onComponentInitFunction && onComponentInitFunction(this.customComponent.instance);\n  }\n\n  protected patchInstance() {\n    Object.assign(this.customComponent.instance, this.getPatch());\n  }\n\n  protected getPatch(): ViewCell {\n    return {\n      value: this.cell.getValue(),\n      rowData: this.cell.getRow().getData()\n    }\n  }\n}\n","import {Component, Input, ChangeDetectionStrategy } from '@angular/core';\n\nimport { Cell } from '../../../lib/data-set/cell';\n\n@Component({\n  selector: 'table-cell-view-mode',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  template: `\n    <div [ngSwitch]=\"cell.getColumn().type\">\n        <custom-view-component *ngSwitchCase=\"'custom'\" [cell]=\"cell\"></custom-view-component>\n        <div *ngSwitchCase=\"'html'\" [innerHTML]=\"cell.getValue()\"></div>\n        <div *ngSwitchDefault>{{ cell.getValue() }}</div>\n    </div>\n    `,\n})\nexport class ViewCellComponent {\n\n  @Input() cell: Cell;\n}\n","import { Component, Output, EventEmitter, Input } from '@angular/core';\n\nimport { Cell } from '../../../lib/data-set/cell';\n\n@Component({\n  template: ''\n})\nexport class EditCellDefault {\n\n  @Input() cell: Cell;\n  @Input() inputClass: string = '';\n\n  @Output() edited = new EventEmitter<any>();\n\n  onEdited(event: any): boolean {\n    this.edited.next(event);\n    return false;\n  }\n\n  onStopEditing(): boolean {\n    this.cell.getRow().isInEditing = false;\n    return false;\n  }\n\n  onClick(event: any) {\n    event.stopPropagation();\n  }\n}\n","import {\n  Component,\n  ComponentFactoryResolver,\n  ViewChild,\n  ViewContainerRef,\n  SimpleChanges,\n  OnChanges,\n  OnDestroy,\n} from '@angular/core';\n\nimport { EditCellDefault } from './edit-cell-default';\n\n@Component({\n  selector: 'table-cell-custom-editor',\n  template: `\n    <ng-template #dynamicTarget></ng-template>\n  `,\n})\nexport class CustomEditComponent extends EditCellDefault implements OnChanges, OnDestroy {\n\n  customComponent: any;\n  @ViewChild('dynamicTarget', { read: ViewContainerRef, static: true }) dynamicTarget: any;\n\n  constructor(private resolver: ComponentFactoryResolver) {\n    super();\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (this.cell && !this.customComponent) {\n      const componentFactory = this.resolver.resolveComponentFactory(this.cell.getColumn().editor.component);\n      this.customComponent = this.dynamicTarget.createComponent(componentFactory);\n\n      // set @Inputs and @Outputs of custom component\n      this.customComponent.instance.cell = this.cell;\n      this.customComponent.instance.inputClass = this.inputClass;\n      this.customComponent.instance.onStopEditing.subscribe(() => this.onStopEditing());\n      this.customComponent.instance.onEdited.subscribe((event: any) => this.onEdited(event));\n      this.customComponent.instance.onClick.subscribe((event: any) => this.onClick(event));\n    }\n  }\n\n  ngOnDestroy() {\n    if (this.customComponent) {\n      this.customComponent.destroy();\n    }\n  }\n}\n","import { Component, Output, EventEmitter, Input } from '@angular/core';\n\nimport { Cell } from '../../../lib/data-set/cell';\n\n@Component({\n  template: '',\n})\nexport class DefaultEditor implements Editor {\n  @Input() cell: Cell;\n  @Input() inputClass: string;\n\n  @Output() onStopEditing = new EventEmitter<any>();\n  @Output() onEdited = new EventEmitter<any>();\n  @Output() onClick = new EventEmitter<any>();\n}\n\nexport interface Editor {\n  cell: Cell;\n  inputClass: string;\n  onStopEditing: EventEmitter<any>;\n  onEdited: EventEmitter<any>;\n  onClick: EventEmitter<any>;\n}\n","import { Component } from '@angular/core';\n\nimport { DefaultEditor } from './default-editor';\n\n@Component({\n  selector: 'select-editor',\n  template: `\n    <select [ngClass]=\"inputClass\"\n            class=\"form-control\"\n            [(ngModel)]=\"cell.newValue\"\n            [name]=\"cell.getId()\"\n            [disabled]=\"!cell.isEditable()\"\n            (click)=\"onClick.emit($event)\"\n            (keydown.enter)=\"onEdited.emit($event)\"\n            (keydown.esc)=\"onStopEditing.emit()\">\n\n        <option *ngFor=\"let option of cell.getColumn().getConfig()?.list\" [value]=\"option.value\"\n                [selected]=\"option.value === cell.getValue()\">{{ option.title }}\n        </option>\n    </select>\n    `,\n})\nexport class SelectEditorComponent extends DefaultEditor {\n\n  constructor() {\n    super();\n  }\n}\n","import { Component } from '@angular/core';\n\nimport { DefaultEditor } from './default-editor';\n\n@Component({\n  selector: 'textarea-editor',\n  styleUrls: ['./editor.component.scss'],\n  template: `\n    <textarea [ngClass]=\"inputClass\"\n              class=\"form-control\"\n              [(ngModel)]=\"cell.newValue\"\n              [name]=\"cell.getId()\"\n              [disabled]=\"!cell.isEditable()\"\n              [placeholder]=\"cell.getTitle()\"\n              (click)=\"onClick.emit($event)\"\n              (keydown.enter)=\"onEdited.emit($event)\"\n              (keydown.esc)=\"onStopEditing.emit()\">\n    </textarea>\n    `,\n})\nexport class TextareaEditorComponent extends DefaultEditor {\n\n  constructor() {\n    super();\n  }\n}\n","import { Component } from '@angular/core';\n\nimport { DefaultEditor } from './default-editor';\n\n@Component({\n  selector: 'checkbox-editor',\n  styleUrls: ['./editor.component.scss'],\n  template: `\n    <input [ngClass]=\"inputClass\"\n           type=\"checkbox\"\n           class=\"form-control\"\n           [name]=\"cell.getId()\"\n           [disabled]=\"!cell.isEditable()\"\n           [checked]=\"cell.getValue() == (cell.getColumn().getConfig()?.true || true)\"\n           (click)=\"onClick.emit($event)\"\n           (change)=\"onChange($event)\">\n    `,\n})\nexport class CheckboxEditorComponent extends DefaultEditor {\n\n  constructor() {\n    super();\n  }\n\n  onChange(event: any) {\n    const trueVal = (this.cell.getColumn().getConfig() && this.cell.getColumn().getConfig().true) || true;\n    const falseVal = (this.cell.getColumn().getConfig() && this.cell.getColumn().getConfig().false) || false;\n    this.cell.newValue = event.target.checked ? trueVal : falseVal;\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { CompleterService } from 'ng2-completer';\n\nimport { DefaultEditor } from './default-editor';\n\n@Component({\n  selector: 'completer-editor',\n  template: `\n    <ng2-completer [(ngModel)]=\"completerStr\"\n                   [dataService]=\"cell.getColumn().getConfig().completer.dataService\"\n                   [minSearchLength]=\"cell.getColumn().getConfig().completer.minSearchLength || 0\"\n                   [pause]=\"cell.getColumn().getConfig().completer.pause || 0\"\n                   [placeholder]=\"cell.getColumn().getConfig().completer.placeholder || 'Start typing...'\"\n                   (selected)=\"onEditedCompleter($event)\">\n    </ng2-completer>\n    `,\n})\nexport class CompleterEditorComponent extends DefaultEditor implements OnInit {\n\n  completerStr: string = '';\n\n  constructor(private completerService: CompleterService) {\n    super();\n  }\n\n  ngOnInit() {\n    if (this.cell.getColumn().editor && this.cell.getColumn().editor.type === 'completer') {\n      const config = this.cell.getColumn().getConfig().completer;\n      config.dataService = this.completerService.local(config.data, config.searchFields, config.titleField);\n      config.dataService.descriptionField(config.descriptionField);\n    }\n  }\n\n  onEditedCompleter(event: { title: '' }): boolean {\n    this.cell.newValue = event.title;\n    return false;\n  }\n}\n","import { Component } from '@angular/core';\n\nimport { DefaultEditor } from './default-editor';\n\n@Component({\n  selector: 'input-editor',\n  styleUrls: ['./editor.component.scss'],\n  template: `\n    <input [ngClass]=\"inputClass\"\n           class=\"form-control\"\n           [(ngModel)]=\"cell.newValue\"\n           [name]=\"cell.getId()\"\n           [placeholder]=\"cell.getTitle()\"\n           [disabled]=\"!cell.isEditable()\"\n           (click)=\"onClick.emit($event)\"\n           (keydown.enter)=\"onEdited.emit($event)\"\n           (keydown.esc)=\"onStopEditing.emit()\">\n    `,\n})\nexport class InputEditorComponent extends DefaultEditor {\n\n  constructor() {\n    super();\n  }\n}\n","import { Component } from '@angular/core';\n\nimport { EditCellDefault } from './edit-cell-default';\nimport { Cell } from '../../../lib/data-set/cell';\n\n@Component({\n  selector: 'table-cell-default-editor',\n  templateUrl: './default-edit.component.html',\n})\nexport class DefaultEditComponent extends EditCellDefault {\n\n  constructor() {\n    super();\n  }\n\n  getEditorType(): string {\n    return this.cell.getColumn().editor && this.cell.getColumn().editor.type;\n  }\n}\n","<div [ngSwitch]=\"getEditorType()\">\n    <select-editor *ngSwitchCase=\"'list'\"\n                   [cell]=\"cell\"\n                   [inputClass]=\"inputClass\"\n                   (onClick)=\"onClick($event)\"\n                   (onEdited)=\"onEdited($event)\"\n                   (onStopEditing)=\"onStopEditing()\">\n    </select-editor>\n\n    <textarea-editor *ngSwitchCase=\"'textarea'\"\n                     [cell]=\"cell\"\n                     [inputClass]=\"inputClass\"\n                     (onClick)=\"onClick($event)\"\n                     (onEdited)=\"onEdited($event)\"\n                     (onStopEditing)=\"onStopEditing()\">\n    </textarea-editor>\n\n    <checkbox-editor *ngSwitchCase=\"'checkbox'\"\n                     [cell]=\"cell\"\n                     [inputClass]=\"inputClass\"\n                     (onClick)=\"onClick($event)\">\n    </checkbox-editor>\n\n    <completer-editor *ngSwitchCase=\"'completer'\"\n                      [cell]=\"cell\">\n    </completer-editor>\n\n    <input-editor *ngSwitchDefault\n                  [cell]=\"cell\"\n                  [inputClass]=\"inputClass\"\n                  (onClick)=\"onClick($event)\"\n                  (onEdited)=\"onEdited($event)\"\n                  (onStopEditing)=\"onStopEditing()\">\n    </input-editor>\n</div>","import { Component, Input, Output, EventEmitter } from '@angular/core';\n\nimport { Cell } from '../../../lib/data-set/cell';\n\n@Component({\n  selector: 'table-cell-edit-mode',\n  template: `\n      <div [ngSwitch]=\"getEditorType()\">\n        <table-cell-custom-editor *ngSwitchCase=\"'custom'\"\n                                  [cell]=\"cell\"\n                                  [inputClass]=\"inputClass\"\n                                  (edited)=\"onEdited($event)\">\n        </table-cell-custom-editor>\n        <table-cell-default-editor *ngSwitchDefault\n                                  [cell]=\"cell\"\n                                  [inputClass]=\"inputClass\"\n                                  (edited)=\"onEdited($event)\">\n        </table-cell-default-editor>\n      </div>\n    `,\n})\nexport class EditCellComponent {\n\n  @Input() cell: Cell;\n  @Input() inputClass: string = '';\n\n  @Output() edited = new EventEmitter<any>();\n\n  onEdited(event: any): boolean {\n    this.edited.next(event);\n    return false;\n  }\n\n  getEditorType(): string {\n    return this.cell.getColumn().editor && this.cell.getColumn().editor.type;\n  }\n}\n","import { Component, Input, Output, EventEmitter } from '@angular/core';\n\nimport { Grid } from '../../lib/grid';\nimport { Cell } from '../../lib/data-set/cell';\nimport { Row } from '../../lib/data-set/row';\n\n@Component({\n  selector: 'ng2-smart-table-cell',\n  template: `\n    <table-cell-view-mode *ngIf=\"!isInEditing\" [cell]=\"cell\"></table-cell-view-mode>\n    <table-cell-edit-mode *ngIf=\"isInEditing\" [cell]=\"cell\"\n                          [inputClass]=\"inputClass\"\n                          (edited)=\"onEdited($event)\">\n    </table-cell-edit-mode>\n  `,\n})\nexport class CellComponent {\n\n  @Input() grid: Grid;\n  @Input() row: Row;\n  @Input() editConfirm: EventEmitter<any>;\n  @Input() createConfirm: EventEmitter<any>;\n  @Input() isNew: boolean;\n  @Input() cell: Cell;\n  @Input() inputClass: string = '';\n  @Input() mode: string = 'inline';\n  @Input() isInEditing: boolean = false;\n\n  @Output() edited = new EventEmitter<any>();\n\n  onEdited(event: any) {\n    if (this.isNew) {\n      this.grid.create(this.grid.getNewRow(), this.createConfirm);\n    } else {\n      this.grid.save(this.row, this.editConfirm);\n    }\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { Ng2CompleterModule } from 'ng2-completer';\n\nimport { CellComponent } from './cell.component';\nimport { CustomEditComponent } from './cell-edit-mode/custom-edit.component';\nimport { DefaultEditComponent } from './cell-edit-mode/default-edit.component';\nimport { EditCellComponent } from './cell-edit-mode/edit-cell.component';\nimport { CheckboxEditorComponent } from './cell-editors/checkbox-editor.component';\nimport { CompleterEditorComponent } from './cell-editors/completer-editor.component';\nimport { InputEditorComponent } from './cell-editors/input-editor.component';\nimport { SelectEditorComponent } from './cell-editors/select-editor.component';\nimport { TextareaEditorComponent } from './cell-editors/textarea-editor.component';\nimport { CustomViewComponent } from './cell-view-mode/custom-view.component';\nimport { ViewCellComponent } from './cell-view-mode/view-cell.component';\nimport { EditCellDefault } from './cell-edit-mode/edit-cell-default';\nimport { DefaultEditor } from './cell-editors/default-editor';\n\nconst CELL_COMPONENTS = [\n  CellComponent,\n  EditCellDefault,\n  DefaultEditor,\n  CustomEditComponent,\n  DefaultEditComponent,\n  EditCellComponent,\n  CheckboxEditorComponent,\n  CompleterEditorComponent,\n  InputEditorComponent,\n  SelectEditorComponent,\n  TextareaEditorComponent,\n  CustomViewComponent,\n  ViewCellComponent,\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    Ng2CompleterModule,\n  ],\n  declarations: [\n    ...CELL_COMPONENTS,\n  ],\n  exports: [\n    ...CELL_COMPONENTS,\n  ],\n})\nexport class CellModule { }\n","import { Subject } from 'rxjs';\nimport { Observable } from 'rxjs';\n\nexport abstract class DataSource {\n\n  protected onChangedSource = new Subject<any>();\n  protected onAddedSource = new Subject<any>();\n  protected onUpdatedSource = new Subject<any>();\n  protected onRemovedSource = new Subject<any>();\n\n  abstract getAll(): Promise<any>;\n  abstract getElements(): Promise<any>;\n  abstract getSort(): any;\n  abstract getFilter(): any;\n  abstract getPaging(): any;\n  abstract count(): number;\n\n  refresh() {\n    this.emitOnChanged('refresh');\n  }\n\n  load(data: Array<any>): Promise<any> {\n    this.emitOnChanged('load');\n    return Promise.resolve();\n  }\n\n  onChanged(): Observable<any> {\n    return this.onChangedSource.asObservable();\n  }\n\n  onAdded(): Observable<any> {\n    return this.onAddedSource.asObservable();\n  }\n\n  onUpdated(): Observable<any> {\n    return this.onUpdatedSource.asObservable();\n  }\n\n  onRemoved(): Observable<any> {\n    return this.onRemovedSource.asObservable();\n  }\n\n  prepend(element: any): Promise<any> {\n    this.emitOnAdded(element);\n    this.emitOnChanged('prepend');\n    return Promise.resolve();\n  }\n\n  append(element: any): Promise<any> {\n    this.emitOnAdded(element);\n    this.emitOnChanged('append');\n    return Promise.resolve();\n  }\n\n  add(element: any): Promise<any> {\n    this.emitOnAdded(element);\n    this.emitOnChanged('add');\n    return Promise.resolve();\n  }\n\n  remove(element: any): Promise<any> {\n    this.emitOnRemoved(element);\n    this.emitOnChanged('remove');\n    return Promise.resolve();\n  }\n\n  update(element: any, values: any): Promise<any> {\n    this.emitOnUpdated(element);\n    this.emitOnChanged('update');\n    return Promise.resolve();\n  }\n\n  empty(): Promise<any> {\n    this.emitOnChanged('empty');\n    return Promise.resolve();\n  }\n\n  setSort(conf: Array<any>, doEmit?: boolean) {\n    if (doEmit) {\n      this.emitOnChanged('sort');\n    }\n  }\n\n  setFilter(conf: Array<any>, andOperator?: boolean, doEmit?: boolean) {\n    if (doEmit) {\n      this.emitOnChanged('filter');\n    }\n  }\n\n  addFilter(fieldConf: {}, andOperator?: boolean, doEmit?: boolean) {\n    if (doEmit) {\n      this.emitOnChanged('filter');\n    }\n  }\n\n  setPaging(page: number, perPage: number, doEmit?: boolean) {\n    if (doEmit) {\n      this.emitOnChanged('paging');\n    }\n  }\n\n  setPage(page: number, doEmit?: boolean) {\n    if (doEmit) {\n      this.emitOnChanged('page');\n    }\n  }\n\n  protected emitOnRemoved(element: any) {\n    this.onRemovedSource.next(element);\n  }\n\n  protected emitOnUpdated(element: any) {\n    this.onUpdatedSource.next(element);\n  }\n\n  protected emitOnAdded(element: any) {\n    this.onAddedSource.next(element);\n  }\n\n  protected emitOnChanged(action: string) {\n    this.getElements().then((elements) => this.onChangedSource.next({\n      action: action,\n      elements: elements,\n      paging: this.getPaging(),\n      filter: this.getFilter(),\n      sort: this.getSort(),\n    }));\n  }\n}\n","import { Output, EventEmitter, Input, Component } from '@angular/core';\n\nimport { Column } from '../../lib/data-set/column';\nimport { DataSource } from '../../lib/data-source/data-source';\n\n@Component({\n  template: '',\n})\nexport class FilterDefault {\n\n  @Input() column: Column;\n  @Input() source: DataSource;\n  @Input() inputClass: string = '';\n\n  @Output() filter = new EventEmitter<any>();\n\n  query: string = '';\n\n  onFilter(query: string) {\n    this.source.addFilter({\n      field: this.column.id,\n      search: query,\n      filter: this.column.getFilterFunction(),\n    });\n  }\n}\n","import {\n  Component,\n  ComponentFactoryResolver, Input,\n  OnChanges,\n  OnDestroy,\n  SimpleChanges,\n  ViewChild,\n  ViewContainerRef\n} from '@angular/core';\n\nimport { FilterDefault } from './filter-default';\n\n@Component({\n  selector: 'custom-table-filter',\n  template: `<ng-template #dynamicTarget></ng-template>`,\n})\nexport class CustomFilterComponent extends FilterDefault implements OnChanges, OnDestroy {\n  @Input() query: string;\n  customComponent: any;\n  @ViewChild('dynamicTarget', { read: ViewContainerRef, static: true }) dynamicTarget: any;\n\n  constructor(private resolver: ComponentFactoryResolver) {\n    super();\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (this.column && !this.customComponent) {\n      const componentFactory = this.resolver.resolveComponentFactory(this.column.filter.component);\n      this.customComponent = this.dynamicTarget.createComponent(componentFactory);\n\n      // set @Inputs and @Outputs of custom component\n      this.customComponent.instance.query = this.query;\n      this.customComponent.instance.column = this.column;\n      this.customComponent.instance.source = this.source;\n      this.customComponent.instance.inputClass = this.inputClass;\n      this.customComponent.instance.filter.subscribe((event: any) => this.onFilter(event));\n    }\n    if (this.customComponent) {\n      this.customComponent.instance.ngOnChanges(changes);\n    }\n  }\n\n  ngOnDestroy() {\n    if (this.customComponent) {\n      this.customComponent.destroy();\n    }\n  }\n}\n","import { Input, Output, EventEmitter, OnDestroy, Component } from '@angular/core';\nimport { Subscription } from 'rxjs';\n\nimport { Column } from '../../../lib/data-set/column';\n\n@Component({\n  template: '',\n})\nexport class DefaultFilter implements Filter, OnDestroy {\n\n  delay: number = 300;\n  changesSubscription: Subscription;\n  @Input() query: string;\n  @Input() inputClass: string;\n  @Input() column: Column;\n  @Output() filter = new EventEmitter<string>();\n\n  ngOnDestroy() {\n    if (this.changesSubscription) {\n      this.changesSubscription.unsubscribe();\n    }\n  }\n\n  setFilter() {\n    this.filter.emit(this.query);\n  }\n}\n\nexport interface Filter {\n\n  delay?: number;\n  changesSubscription?: Subscription;\n  query: string;\n  inputClass: string;\n  column: Column;\n  filter: EventEmitter<string>;\n}\n","import { Component, OnInit, ViewChild } from '@angular/core';\nimport { NgControl } from '@angular/forms';\nimport { distinctUntilChanged, debounceTime, skip } from 'rxjs/operators';\n\nimport { DefaultFilter } from './default-filter';\n\n@Component({\n  selector: 'select-filter',\n  template: `\n    <select [ngClass]=\"inputClass\"\n            class=\"form-control\"\n            #inputControl\n            [(ngModel)]=\"query\">\n\n        <option value=\"\">{{ column.getFilterConfig().selectText }}</option>\n        <option *ngFor=\"let option of column.getFilterConfig().list\" [value]=\"option.value\">\n          {{ option.title }}\n        </option>\n    </select>\n  `,\n})\nexport class SelectFilterComponent extends DefaultFilter implements OnInit {\n\n  @ViewChild('inputControl', { read: NgControl, static: true }) inputControl: NgControl;\n\n  constructor() {\n    super();\n  }\n\n  ngOnInit() {\n    this.inputControl.valueChanges\n      .pipe(\n        skip(1),\n        distinctUntilChanged(),\n        debounceTime(this.delay)\n      )\n      .subscribe((value: string) => this.setFilter());\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { FormControl } from '@angular/forms';\n\nimport { DefaultFilter } from './default-filter';\nimport { debounceTime } from 'rxjs/operators';\n\n@Component({\n  selector: 'checkbox-filter',\n  template: `\n    <input type=\"checkbox\" [formControl]=\"inputControl\" [ngClass]=\"inputClass\" class=\"form-control\">\n    <a href=\"#\" *ngIf=\"filterActive\"\n                (click)=\"resetFilter($event)\">{{column.getFilterConfig()?.resetText || 'reset'}}</a>\n  `,\n})\nexport class CheckboxFilterComponent extends DefaultFilter implements OnInit {\n\n  filterActive: boolean = false;\n  inputControl = new FormControl();\n\n  constructor() {\n    super();\n  }\n\n  ngOnInit() {\n    this.changesSubscription = this.inputControl.valueChanges\n      .pipe(debounceTime(this.delay))\n      .subscribe((checked: boolean) => {\n        this.filterActive = true;\n        const trueVal = (this.column.getFilterConfig() && this.column.getFilterConfig().true) || true;\n        const falseVal = (this.column.getFilterConfig() && this.column.getFilterConfig().false) || false;\n        this.query = checked ? trueVal : falseVal;\n        this.setFilter();\n      });\n  }\n\n  resetFilter(event: any) {\n    event.preventDefault();\n    this.query = '';\n    this.inputControl.setValue(false, { emitEvent: false });\n    this.filterActive = false;\n    this.setFilter();\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { CompleterService } from 'ng2-completer';\n\nimport { DefaultFilter } from './default-filter';\nimport { distinctUntilChanged, debounceTime, map } from 'rxjs/operators';\n\n@Component({\n  selector: 'completer-filter',\n  template: `\n    <ng2-completer [(ngModel)]=\"query\"\n                   (ngModelChange)=\"inputTextChanged($event)\"\n                   [dataService]=\"column.getFilterConfig().completer.dataService\"\n                   [minSearchLength]=\"column.getFilterConfig().completer.minSearchLength || 0\"\n                   [pause]=\"column.getFilterConfig().completer.pause || 0\"\n                   [placeholder]=\"column.getFilterConfig().completer.placeholder || 'Start typing...'\"\n                   (selected)=\"completerContent.next($event)\">\n    </ng2-completer>\n  `,\n})\nexport class CompleterFilterComponent extends DefaultFilter implements OnInit {\n\n  completerContent = new Subject<any>();\n\n  constructor(private completerService: CompleterService) {\n    super();\n  }\n\n  ngOnInit() {\n    const config = this.column.getFilterConfig().completer;\n    config.dataService = this.completerService.local(config.data, config.searchFields, config.titleField);\n    config.dataService.descriptionField(config.descriptionField);\n\n    this.changesSubscription = this.completerContent\n      .pipe(\n        map((ev: any) => (ev && ev.title) || ev || ''),\n        distinctUntilChanged(),\n        debounceTime(this.delay)\n      )\n      .subscribe((search: string) => {\n        this.query = search;\n        this.setFilter();\n      });\n  }\n\n  inputTextChanged(event: string) {\n    // workaround to trigger the search event when the home/end buttons are clicked\n    // when this happens the [(ngModel)]=\"query\" is set to \"\" but the (selected) method is not called\n    // so here it gets called manually\n    if (event === '') {\n      this.completerContent.next(event);\n    }\n  }\n}\n","import { Component, OnChanges, OnInit, SimpleChanges } from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { debounceTime, distinctUntilChanged, skip } from 'rxjs/operators';\n\nimport { DefaultFilter } from './default-filter';\n\n@Component({\n  selector: 'input-filter',\n  template: `\n    <input\n      [ngClass]=\"inputClass\"\n      [formControl]=\"inputControl\"\n      class=\"form-control\"\n      type=\"text\"\n      placeholder=\"{{ column.title }}\"/>\n  `,\n})\nexport class InputFilterComponent extends DefaultFilter implements OnInit, OnChanges {\n\n  inputControl = new FormControl();\n\n  constructor() {\n    super();\n  }\n\n  ngOnInit() {\n    if (this.query) {\n      this.inputControl.setValue(this.query);\n    }\n    this.inputControl.valueChanges\n      .pipe(\n        distinctUntilChanged(),\n        debounceTime(this.delay),\n      )\n      .subscribe((value: string) => {\n        this.query = this.inputControl.value;\n        this.setFilter();\n      });\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.query) {\n      this.inputControl.setValue(this.query);\n    }\n  }\n}\n","import {Component, Input} from '@angular/core';\n\nimport {FilterDefault} from \"./filter-default\";\n\n@Component({\n  selector: 'default-table-filter',\n  template: `\n    <ng-container [ngSwitch]=\"column.getFilterType()\">\n      <select-filter *ngSwitchCase=\"'list'\"\n                     [query]=\"query\"\n                     [ngClass]=\"inputClass\"\n                     [column]=\"column\"\n                     (filter)=\"onFilter($event)\">\n      </select-filter>\n      <checkbox-filter *ngSwitchCase=\"'checkbox'\"\n                       [query]=\"query\"\n                       [ngClass]=\"inputClass\"\n                       [column]=\"column\"\n                       (filter)=\"onFilter($event)\">\n      </checkbox-filter>\n      <completer-filter *ngSwitchCase=\"'completer'\"\n                        [query]=\"query\"\n                        [ngClass]=\"inputClass\"\n                        [column]=\"column\"\n                        (filter)=\"onFilter($event)\">\n      </completer-filter>\n      <input-filter *ngSwitchDefault\n                    [query]=\"query\"\n                    [ngClass]=\"inputClass\"\n                    [column]=\"column\"\n                    (filter)=\"onFilter($event)\">\n      </input-filter>\n    </ng-container>\n  `,\n})\nexport class DefaultFilterComponent extends FilterDefault {\n  @Input() query: string;\n}\n","import { Component, OnChanges, SimpleChanges } from '@angular/core';\nimport { FilterDefault } from './filter-default';\nimport { Subscription } from 'rxjs';\n\n@Component({\n  selector: 'ng2-smart-table-filter',\n  styleUrls: ['./filter.component.scss'],\n  template: `\n      <div class=\"ng2-smart-filter\" *ngIf=\"column.isFilterable\" [ngSwitch]=\"column.getFilterType()\">\n        <custom-table-filter *ngSwitchCase=\"'custom'\"\n                             [query]=\"query\"\n                             [column]=\"column\"\n                             [source]=\"source\"\n                             [inputClass]=\"inputClass\"\n                             (filter)=\"onFilter($event)\">\n        </custom-table-filter>\n        <default-table-filter *ngSwitchDefault\n                              [query]=\"query\"\n                              [column]=\"column\"\n                              [source]=\"source\"\n                              [inputClass]=\"inputClass\"\n                              (filter)=\"onFilter($event)\">\n        </default-table-filter>\n      </div>\n    `,\n})\nexport class FilterComponent extends FilterDefault implements OnChanges {\n  query: string = '';\n  protected dataChangedSub: Subscription;\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.source) {\n      if (!changes.source.firstChange) {\n        this.dataChangedSub.unsubscribe();\n      }\n      this.dataChangedSub = this.source.onChanged().subscribe((dataChanges) => {\n        const filterConf = this.source.getFilter();\n        if (filterConf && filterConf.filters && filterConf.filters.length === 0) {\n          this.query = '';\n\n          // add a check for existing filters an set the query if one exists for this column\n          // this covers instances where the filter is set by user code while maintaining existing functionality\n        } else if (filterConf && filterConf.filters && filterConf.filters.length > 0) {\n          filterConf.filters.forEach((k: any, v: any) => {\n            if (k.field == this.column.id) {\n              this.query = k.search;\n            }\n          });\n        }\n      });\n    }\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { Ng2CompleterModule } from 'ng2-completer';\n\nimport { FilterComponent } from './filter.component';\nimport { DefaultFilterComponent } from \"./default-filter.component\";\nimport { CustomFilterComponent } from \"./custom-filter.component\";\nimport { CheckboxFilterComponent } from './filter-types/checkbox-filter.component';\nimport { CompleterFilterComponent } from './filter-types/completer-filter.component';\nimport { InputFilterComponent } from './filter-types/input-filter.component';\nimport { SelectFilterComponent } from './filter-types/select-filter.component';\nimport { DefaultFilter } from './filter-types/default-filter';\nimport { FilterDefault } from './filter-default';\n\nconst FILTER_COMPONENTS = [\n  FilterDefault,\n  DefaultFilter,\n  FilterComponent,\n  DefaultFilterComponent,\n  CustomFilterComponent,\n  CheckboxFilterComponent,\n  CompleterFilterComponent,\n  InputFilterComponent,\n  SelectFilterComponent,\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    Ng2CompleterModule,\n  ],\n  declarations: [\n    ...FILTER_COMPONENTS,\n  ],\n  exports: [\n    ...FILTER_COMPONENTS,\n  ],\n})\nexport class FilterModule { }\n","import { Component, Input, Output, EventEmitter, OnChanges, SimpleChanges } from '@angular/core';\nimport { Subscription } from 'rxjs';\n\nimport { DataSource } from '../../lib/data-source/data-source';\n\n@Component({\n  selector: 'ng2-smart-table-pager',\n  styleUrls: ['./pager.component.scss'],\n  template: `\n    <nav *ngIf=\"shouldShow()\" class=\"ng2-smart-pagination-nav\">\n      <ul class=\"ng2-smart-pagination pagination\">\n        <li class=\"ng2-smart-page-item page-item\" [ngClass]=\"{disabled: getPage() == 1}\">\n          <a class=\"ng2-smart-page-link page-link\" href=\"#\"\n          (click)=\"getPage() == 1 ? false : paginate(1)\" aria-label=\"First\">\n            <span aria-hidden=\"true\">&laquo;</span>\n            <span class=\"sr-only\">First</span>\n          </a>\n        </li>\n        <li class=\"ng2-smart-page-item page-item\" [ngClass]=\"{disabled: getPage() == 1}\">\n          <a class=\"ng2-smart-page-link page-link page-link-prev\" href=\"#\"\n             (click)=\"getPage() == 1 ? false : prev()\" aria-label=\"Prev\">\n            <span aria-hidden=\"true\">&lt;</span>\n            <span class=\"sr-only\">Prev</span>\n          </a>\n        </li>\n        <li class=\"ng2-smart-page-item page-item\"\n        [ngClass]=\"{active: getPage() == page}\" *ngFor=\"let page of getPages()\">\n          <span class=\"ng2-smart-page-link page-link\"\n          *ngIf=\"getPage() == page\">{{ page }} <span class=\"sr-only\">(current)</span></span>\n          <a class=\"ng2-smart-page-link page-link\" href=\"#\"\n          (click)=\"paginate(page)\" *ngIf=\"getPage() != page\">{{ page }}</a>\n        </li>\n\n        <li class=\"ng2-smart-page-item page-item\"\n            [ngClass]=\"{disabled: getPage() == getLast()}\">\n          <a class=\"ng2-smart-page-link page-link page-link-next\" href=\"#\"\n             (click)=\"getPage() == getLast() ? false : next()\" aria-label=\"Next\">\n            <span aria-hidden=\"true\">&gt;</span>\n            <span class=\"sr-only\">Next</span>\n          </a>\n        </li>\n        \n        <li class=\"ng2-smart-page-item page-item\"\n        [ngClass]=\"{disabled: getPage() == getLast()}\">\n          <a class=\"ng2-smart-page-link page-link\" href=\"#\"\n          (click)=\"getPage() == getLast() ? false : paginate(getLast())\" aria-label=\"Last\">\n            <span aria-hidden=\"true\">&raquo;</span>\n            <span class=\"sr-only\">Last</span>\n          </a>\n        </li>\n      </ul>\n    </nav>\n    \n    <nav *ngIf=\"perPageSelect && perPageSelect.length > 0\" class=\"ng2-smart-pagination-per-page\">\n      <label for=\"per-page\">\n        Per Page:\n      </label>\n      <select (change)=\"onChangePerPage($event)\" [(ngModel)]=\"currentPerPage\" id=\"per-page\">\n        <option *ngFor=\"let item of perPageSelect\" [value]=\"item\">{{ item }}</option>\n      </select>\n    </nav>\n  `,\n})\nexport class PagerComponent implements OnChanges {\n\n  @Input() source: DataSource;\n  @Input() perPageSelect: any[] = [];\n\n  @Output() changePage = new EventEmitter<any>();\n\n  currentPerPage: any;\n\n  protected pages: Array<any>;\n  protected page: number;\n  protected count: number = 0;\n  protected perPage: number;\n\n  protected dataChangedSub: Subscription;\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.source) {\n      if (!changes.source.firstChange) {\n        this.dataChangedSub.unsubscribe();\n      }\n      this.dataChangedSub = this.source.onChanged().subscribe((dataChanges) => {\n        this.page = this.source.getPaging().page;\n        this.perPage = this.source.getPaging().perPage;\n        this.currentPerPage = this.perPage;\n        this.count = this.source.count();\n        if (this.isPageOutOfBounce()) {\n          this.source.setPage(--this.page);\n        }\n\n        this.processPageChange(dataChanges);\n        this.initPages();\n      });\n    }\n  }\n\n  /**\n   * We change the page here depending on the action performed against data source\n   * if a new element was added to the end of the table - then change the page to the last\n   * if a new element was added to the beginning of the table - then to the first page\n   * @param changes\n   */\n  processPageChange(changes: any) {\n    if (changes['action'] === 'prepend') {\n      this.source.setPage(1);\n    }\n    if (changes['action'] === 'append') {\n      this.source.setPage(this.getLast());\n    }\n  }\n\n  shouldShow(): boolean {\n    return this.source.count() > this.perPage;\n  }\n\n  paginate(page: number): boolean {\n    this.source.setPage(page);\n    this.page = page;\n    this.changePage.emit({ page });\n    return false;\n  }\n\n  next(): boolean {\n    return this.paginate(this.getPage() + 1);\n  }\n\n  prev(): boolean {\n    return this.paginate(this.getPage() - 1);\n  }\n\n  getPage(): number {\n    return this.page;\n  }\n\n  getPages(): Array<any> {\n    return this.pages;\n  }\n\n  getLast(): number {\n    return Math.ceil(this.count / this.perPage);\n  }\n\n  isPageOutOfBounce(): boolean {\n    return (this.page * this.perPage) >= (this.count + this.perPage) && this.page > 1;\n  }\n\n  initPages() {\n    const pagesCount = this.getLast();\n    let showPagesCount = 4;\n    showPagesCount = pagesCount < showPagesCount ? pagesCount : showPagesCount;\n    this.pages = [];\n\n    if (this.shouldShow()) {\n\n      let middleOne = Math.ceil(showPagesCount / 2);\n      middleOne = this.page >= middleOne ? this.page : middleOne;\n\n      let lastOne = middleOne + Math.floor(showPagesCount / 2);\n      lastOne = lastOne >= pagesCount ? pagesCount : lastOne;\n\n      const firstOne = lastOne - showPagesCount + 1;\n\n      for (let i = firstOne; i <= lastOne; i++) {\n        this.pages.push(i);\n      }\n    }\n  }\n\n  onChangePerPage(event: any) {\n    if (this.currentPerPage) {\n\n      if (typeof this.currentPerPage === 'string' && this.currentPerPage.toLowerCase() === 'all') {\n        this.source.getPaging().perPage = null;\n      } else {\n        this.source.getPaging().perPage = this.currentPerPage * 1;\n        this.source.refresh();\n      }\n      this.initPages();\n    }\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\n\nimport { PagerComponent } from './pager.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n  ],\n  declarations: [\n    PagerComponent,\n  ],\n  exports: [\n    PagerComponent,\n  ],\n})\nexport class PagerModule { }\n","import { ChangeDetectionStrategy, Component, EventEmitter, Input, Output } from '@angular/core';\nimport { Row } from '../../../lib/data-set/row';\n\nimport { Grid } from '../../../lib/grid';\n\n@Component({\n    selector: 'ng2-st-tbody-custom',\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    template: `\n      <a *ngFor=\"let action of grid.getSetting('actions.custom')\" href=\"#\"\n         class=\"ng2-smart-action ng2-smart-action-custom-custom\" \n         [innerHTML]=\"action.title\"\n         (click)=\"onCustom(action, $event)\"></a>\n        `\n})\nexport class TbodyCustomComponent {\n\n    @Input() grid: Grid;\n    @Input() row: Row;\n    @Input() source: any;\n    @Output() custom = new EventEmitter<any>();\n\n    onCustom(action: any, event: any) {\n        event.preventDefault();\n        event.stopPropagation();\n\n        this.custom.emit({\n            action: action.name,\n            data: this.row.getData(),\n            source: this.source\n        });\n    }\n\n}\n","import {Component, Input, Output, EventEmitter, OnChanges, ChangeDetectionStrategy } from '@angular/core';\n\nimport { Grid } from '../../../lib/grid';\nimport { Row } from '../../../lib/data-set/row';\nimport { DataSource } from '../../../lib/data-source/data-source';\n\n@Component({\n  selector: 'ng2-st-tbody-edit-delete',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  template: `\n    <a href=\"#\" *ngIf=\"isActionEdit\" class=\"ng2-smart-action ng2-smart-action-edit-edit\"\n        [innerHTML]=\"editRowButtonContent\" (click)=\"onEdit($event)\"></a>\n    <a href=\"#\" *ngIf=\"isActionDelete\" class=\"ng2-smart-action ng2-smart-action-delete-delete\"\n        [innerHTML]=\"deleteRowButtonContent\" (click)=\"onDelete($event)\"></a>\n  `,\n})\nexport class TbodyEditDeleteComponent implements OnChanges {\n\n  @Input() grid: Grid;\n  @Input() row: Row;\n  @Input() source: DataSource;\n  @Input() deleteConfirm: EventEmitter<any>;\n  @Input() editConfirm: EventEmitter<any>;\n\n  @Output() edit = new EventEmitter<any>();\n  @Output() delete = new EventEmitter<any>();\n  @Output() editRowSelect = new EventEmitter<any>();\n\n  isActionEdit: boolean;\n  isActionDelete: boolean;\n  editRowButtonContent: string;\n  deleteRowButtonContent: string;\n\n  onEdit(event: any) {\n    event.preventDefault();\n    event.stopPropagation();\n\n    this.editRowSelect.emit(this.row);\n\n    if (this.grid.getSetting('mode') === 'external') {\n      this.edit.emit({\n        data: this.row.getData(),\n        source: this.source,\n      });\n    } else {\n      this.grid.edit(this.row);\n    }\n  }\n\n  onDelete(event: any) {\n    event.preventDefault();\n    event.stopPropagation();\n\n    if (this.grid.getSetting('mode') === 'external') {\n      this.delete.emit({\n        data: this.row.getData(),\n        source: this.source,\n      });\n    } else {\n      this.grid.delete(this.row, this.deleteConfirm);\n    }\n  }\n\n  ngOnChanges(){\n    this.isActionEdit = this.grid.getSetting('actions.edit');\n    this.isActionDelete = this.grid.getSetting('actions.delete');\n    this.editRowButtonContent = this.grid.getSetting('edit.editButtonContent');\n    this.deleteRowButtonContent = this.grid.getSetting('delete.deleteButtonContent');\n  }\n}\n","import { Component, Input, EventEmitter, OnChanges } from '@angular/core';\n\nimport { Grid } from '../../../lib/grid';\nimport { Row } from '../../../lib/data-set/row';\n\n@Component({\n  selector: 'ng2-st-tbody-create-cancel',\n  template: `\n    <a href=\"#\" class=\"ng2-smart-action ng2-smart-action-edit-save\"\n        [innerHTML]=\"saveButtonContent\" (click)=\"onSave($event)\"></a>\n    <a href=\"#\" class=\"ng2-smart-action ng2-smart-action-edit-cancel\"\n        [innerHTML]=\"cancelButtonContent\" (click)=\"onCancelEdit($event)\"></a>\n  `,\n})\nexport class TbodyCreateCancelComponent implements OnChanges {\n\n  @Input() grid: Grid;\n  @Input() row: Row;\n  @Input() editConfirm: EventEmitter<any>;\n\n  cancelButtonContent: string;\n  saveButtonContent: string;\n\n  onSave(event: any) {\n    event.preventDefault();\n    event.stopPropagation();\n\n    this.grid.save(this.row, this.editConfirm);\n  }\n\n  onCancelEdit(event: any) {\n    event.preventDefault();\n    event.stopPropagation();\n\n    this.row.isInEditing = false;\n  }\n\n  ngOnChanges() {\n    this.saveButtonContent = this.grid.getSetting('edit.saveButtonContent');\n    this.cancelButtonContent = this.grid.getSetting('edit.cancelButtonContent')\n  }\n}\n","import {Component, Input, Output, EventEmitter, } from '@angular/core';\n\nimport { Grid } from '../../lib/grid';\nimport { DataSource } from '../../lib/data-source/data-source';\nimport { Cell } from '../../lib/data-set/cell';\n\n@Component({\n  selector: '[ng2-st-tbody]',\n  styleUrls: ['./tbody.component.scss'],\n  templateUrl: './tbody.component.html',\n})\nexport class Ng2SmartTableTbodyComponent {\n\n  @Input() grid: Grid;\n  @Input() source: DataSource;\n  @Input() deleteConfirm: EventEmitter<any>;\n  @Input() editConfirm: EventEmitter<any>;\n  @Input() rowClassFunction: Function;\n\n  @Output() save = new EventEmitter<any>();\n  @Output() cancel = new EventEmitter<any>();\n  @Output() edit = new EventEmitter<any>();\n  @Output() delete = new EventEmitter<any>();\n  @Output() custom = new EventEmitter<any>();\n  @Output() edited = new EventEmitter<any>();\n  @Output() userSelectRow = new EventEmitter<any>();\n  @Output() editRowSelect = new EventEmitter<any>();\n  @Output() multipleSelectRow = new EventEmitter<any>();\n  @Output() rowHover = new EventEmitter<any>();\n\n  isMultiSelectVisible: boolean;\n  showActionColumnLeft: boolean;\n  showActionColumnRight: boolean;\n  mode: string;\n  editInputClass: string;\n  isActionAdd: boolean;\n  isActionEdit: boolean;\n  isActionDelete: boolean;\n  noDataMessage: boolean;\n\n  get tableColumnsCount() {\n    const actionColumns = this.isActionAdd || this.isActionEdit || this.isActionDelete ? 1 : 0;\n    return this.grid.getColumns().length + actionColumns;\n  }\n\n  ngOnChanges() {\n    this.isMultiSelectVisible = this.grid.isMultiSelectVisible();\n    this.showActionColumnLeft = this.grid.showActionColumn('left');\n    this.mode = this.grid.getSetting('mode');\n    this.editInputClass = this.grid.getSetting('edit.inputClass');\n    this.showActionColumnRight = this.grid.showActionColumn('right');\n    this.isActionAdd = this.grid.getSetting('actions.add');\n    this.isActionEdit = this.grid.getSetting('actions.edit');\n    this.isActionDelete = this.grid.getSetting('actions.delete');\n    this.noDataMessage = this.grid.getSetting('noDataMessage');\n  }\n\n  getVisibleCells(cells: Array<Cell>): Array<Cell> {\n    return (cells || []).filter((cell: Cell) => !cell.getColumn().hide);\n  }\n}\n","<tr *ngFor=\"let row of grid.getRows()\" (click)=\"userSelectRow.emit(row)\" (mouseover)=\"rowHover.emit(row)\" class=\"ng2-smart-row\" [className]=\"rowClassFunction(row)\" [ngClass]=\"{selected: row.isSelected}\">\n  <td *ngIf=\"isMultiSelectVisible\" class=\"ng2-smart-actions ng2-smart-action-multiple-select\" (click)=\"multipleSelectRow.emit(row)\">\n    <input type=\"checkbox\" class=\"form-control\" [ngModel]=\"row.isSelected\">\n  </td>\n  <td *ngIf=\"!row.isInEditing && showActionColumnLeft\" class=\"ng2-smart-actions\">\n    <ng2-st-tbody-custom [grid]=\"grid\" (custom)=\"custom.emit($event)\" [row]=\"row\" [source]=\"source\"></ng2-st-tbody-custom>\n\n    <ng2-st-tbody-edit-delete [grid]=\"grid\"\n                              [deleteConfirm]=\"deleteConfirm\"\n                              [editConfirm]=\"editConfirm\"\n                              (edit)=\"edit.emit(row)\"\n                              (delete)=\"delete.emit(row)\"\n                              (editRowSelect)=\"editRowSelect.emit($event)\"\n                              [row]=\"row\"\n                              [source]=\"source\">\n    </ng2-st-tbody-edit-delete>\n  </td>\n   <td *ngIf=\"row.isInEditing && showActionColumnLeft\"  class=\"ng2-smart-actions\">\n    <ng2-st-tbody-create-cancel [grid]=\"grid\" [row]=\"row\" [editConfirm]=\"editConfirm\"></ng2-st-tbody-create-cancel>\n  </td>\n  <td *ngFor=\"let cell of getVisibleCells(row.cells)\">\n    <ng2-smart-table-cell [cell]=\"cell\"\n                          [grid]=\"grid\"\n                          [row]=\"row\"\n                          [isNew]=\"false\"\n                          [mode]=\"mode\"\n                          [editConfirm]=\"editConfirm\"\n                          [inputClass]=\"editInputClass\"\n                          [isInEditing]=\"row.isInEditing\">\n    </ng2-smart-table-cell>\n  </td>\n\n  <td *ngIf=\"row.isInEditing && showActionColumnRight\"  class=\"ng2-smart-actions\">\n    <ng2-st-tbody-create-cancel [grid]=\"grid\" [row]=\"row\" [editConfirm]=\"editConfirm\"></ng2-st-tbody-create-cancel>\n  </td>\n\n  <td *ngIf=\"!row.isInEditing && showActionColumnRight\" class=\"ng2-smart-actions\">\n    <ng2-st-tbody-custom [grid]=\"grid\" (custom)=\"custom.emit($event)\" [row]=\"row\" [source]=\"source\"></ng2-st-tbody-custom>\n\n    <ng2-st-tbody-edit-delete [grid]=\"grid\"\n                              [deleteConfirm]=\"deleteConfirm\"\n                              [editConfirm]=\"editConfirm\"\n                              [row]=\"row\"\n                              [source]=\"source\"\n                              (edit)=\"edit.emit(row)\"\n                              (delete)=\"delete.emit(row)\"\n                              (editRowSelect)=\"editRowSelect.emit($event)\">\n    </ng2-st-tbody-edit-delete>\n  </td>\n</tr>\n\n<tr *ngIf=\"grid.getRows().length == 0\">\n  <td [attr.colspan]=\"tableColumnsCount\">\n    {{ noDataMessage }}\n  </td>\n</tr>\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\n\nimport { CellModule } from '../cell/cell.module';\n\nimport { Ng2SmartTableTbodyComponent } from './tbody.component';\nimport { TbodyCreateCancelComponent } from './cells/create-cancel.component';\nimport { TbodyEditDeleteComponent } from './cells/edit-delete.component';\nimport { TbodyCustomComponent } from './cells/custom.component';\n\nconst TBODY_COMPONENTS = [\n  TbodyCreateCancelComponent,\n  TbodyEditDeleteComponent,\n  TbodyCustomComponent,\n  Ng2SmartTableTbodyComponent\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    CellModule,\n  ],\n  declarations: [\n    ...TBODY_COMPONENTS,\n  ],\n  exports: [\n    ...TBODY_COMPONENTS,\n  ],\n})\nexport class TBodyModule { }\n","import { Component, Input } from '@angular/core';\n\nimport { Grid } from '../../../lib/grid';\nimport { DataSource } from '../../../lib/data-source/data-source';\n\n@Component({\n  selector: '[ng2-st-checkbox-select-all]',\n  template: `\n    <input type=\"checkbox\" [ngModel]=\"isAllSelected\">\n  `,\n})\nexport class CheckboxSelectAllComponent {\n\n  @Input() grid: Grid;\n  @Input() source: DataSource;\n  @Input() isAllSelected: boolean;\n}\n","import {Component, Input, AfterViewInit, ElementRef, OnChanges} from '@angular/core';\n\nimport { Grid } from '../../../lib/grid';\n\n@Component({\n  selector: '[ng2-st-actions-title]',\n  template: `\n    <div class=\"ng2-smart-title\">{{ actionsColumnTitle }}</div>\n  `,\n})\nexport class ActionsTitleComponent implements AfterViewInit, OnChanges {\n\n  @Input() grid: Grid;\n\n  actionsColumnTitle: string;\n\n  constructor(private ref: ElementRef) {\n  }\n\n  ngAfterViewInit() {\n    this.ref.nativeElement.classList.add('ng2-smart-actions');\n  }\n\n  ngOnChanges() {\n    this.actionsColumnTitle = this.grid.getSetting('actions.columnTitle');\n  }\n}\n","import { Component, Input, Output, EventEmitter, OnChanges, SimpleChanges } from '@angular/core';\nimport { Subscription } from 'rxjs';\n\nimport { DataSource } from '../../../../lib/data-source/data-source';\nimport { Column } from '../../../../lib/data-set/column';\n\n@Component({\n  selector: 'ng2-smart-table-title',\n  styleUrls: ['./title.component.scss'],\n  template: `\n    <a href=\"#\" *ngIf=\"column.isSortable\"\n                (click)=\"_sort($event)\"\n                class=\"ng2-smart-sort-link sort\"\n                [ngClass]=\"currentDirection\">\n      {{ column.title }}\n    </a>\n    <span class=\"ng2-smart-sort\" *ngIf=\"!column.isSortable\">{{ column.title }}</span>\n  `,\n})\nexport class TitleComponent implements OnChanges {\n\n  currentDirection = '';\n  @Input() column: Column;\n  @Input() source: DataSource;\n  @Output() sort = new EventEmitter<any>();\n\n  protected dataChangedSub: Subscription;\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.source) {\n      if (!changes.source.firstChange) {\n        this.dataChangedSub.unsubscribe();\n      }\n      this.dataChangedSub = this.source.onChanged().subscribe((dataChanges) => {\n        const sortConf = this.source.getSort();\n\n        if (sortConf.length > 0 && sortConf[0]['field'] === this.column.id) {\n          this.currentDirection = sortConf[0]['direction'];\n        } else {\n          this.currentDirection = '';\n        }\n\n        sortConf.forEach((fieldConf: any) => {\n\n        });\n      });\n    }\n  }\n\n  _sort(event: any) {\n    event.preventDefault();\n    this.changeSortDirection();\n    this.source.setSort([\n      {\n        field: this.column.id,\n        direction: this.currentDirection,\n        compare: this.column.getCompareFunction(),\n      },\n    ]);\n    this.sort.emit(null);\n  }\n\n  changeSortDirection(): string {\n    if (this.currentDirection) {\n      const newDirection = this.currentDirection === 'asc' ? 'desc' : 'asc';\n      this.currentDirection = newDirection;\n    } else {\n      this.currentDirection = this.column.sortDirection;\n    }\n    return this.currentDirection;\n  }\n}\n","import { Component, Input, Output, EventEmitter } from '@angular/core';\n\nimport { Column } from '../../../lib/data-set/column';\nimport { DataSource } from '../../../lib/data-source/data-source';\n\n@Component({\n  selector: 'ng2-st-column-title',\n  template: `\n    <div class=\"ng2-smart-title\">\n      <ng2-smart-table-title [source]=\"source\" [column]=\"column\" (sort)=\"sort.emit($event)\"></ng2-smart-table-title>\n    </div>\n  `,\n})\nexport class ColumnTitleComponent {\n\n  @Input() column: Column;\n  @Input() source: DataSource;\n\n  @Output() sort = new EventEmitter<any>();\n\n}\n","import {Component, Input, Output, EventEmitter, OnChanges} from '@angular/core';\n\nimport { Grid } from '../../../lib/grid';\nimport { DataSource } from '../../../lib/data-source/data-source';\nimport { Column } from \"../../../lib/data-set/column\";\n\n@Component({\n  selector: '[ng2-st-thead-titles-row]',\n  template: `\n    <th ng2-st-checkbox-select-all *ngIf=\"isMultiSelectVisible\"\n                                   [grid]=\"grid\"\n                                   [source]=\"source\"\n                                   [isAllSelected]=\"isAllSelected\"\n                                   (click)=\"selectAllRows.emit($event)\">\n    </th>\n    <th ng2-st-actions-title *ngIf=\"showActionColumnLeft\" [grid]=\"grid\"></th>\n    <th *ngFor=\"let column of getVisibleColumns(grid.getColumns())\"\n        class=\"ng2-smart-th {{ column.id }}\"\n        [ngClass]=\"column.class\"\n        [style.width]=\"column.width\">\n      <ng2-st-column-title [source]=\"source\" [column]=\"column\" (sort)=\"sort.emit($event)\"></ng2-st-column-title>\n    </th>\n    <th ng2-st-actions-title *ngIf=\"showActionColumnRight\" [grid]=\"grid\"></th>\n  `,\n})\nexport class TheadTitlesRowComponent implements OnChanges {\n\n  @Input() grid: Grid;\n  @Input() isAllSelected: boolean;\n  @Input() source: DataSource;\n\n  @Output() sort = new EventEmitter<any>();\n  @Output() selectAllRows = new EventEmitter<any>();\n\n  isMultiSelectVisible: boolean;\n  showActionColumnLeft: boolean;\n  showActionColumnRight: boolean;\n\n\n  ngOnChanges() {\n    this.isMultiSelectVisible = this.grid.isMultiSelectVisible();\n    this.showActionColumnLeft = this.grid.showActionColumn('left');\n    this.showActionColumnRight = this.grid.showActionColumn('right');\n  }\n\n  getVisibleColumns(columns: Array<Column>): Array<Column> {\n    return (columns || []).filter((column: Column) => !column.hide);\n  }\n}\n","import { Component, Input, Output, EventEmitter, AfterViewInit, ElementRef, OnChanges } from '@angular/core';\n\nimport { Grid } from '../../../lib/grid';\nimport { DataSource } from '../../../lib/data-source/data-source';\n\n@Component({\n  selector: '[ng2-st-add-button]',\n  template: `\n    <a *ngIf=\"isActionAdd\" href=\"#\" class=\"ng2-smart-action ng2-smart-action-add-add\"\n        [innerHTML]=\"addNewButtonContent\" (click)=\"onAdd($event)\"></a>\n  `,\n})\nexport class AddButtonComponent implements AfterViewInit, OnChanges {\n\n  @Input() grid: Grid;\n  @Input() source: DataSource;\n  @Output() create = new EventEmitter<any>();\n\n  isActionAdd: boolean;\n  addNewButtonContent: string;\n\n  constructor(private ref: ElementRef) {\n  }\n\n  ngAfterViewInit() {\n    this.ref.nativeElement.classList.add('ng2-smart-actions-title', 'ng2-smart-actions-title-add');\n  }\n\n  ngOnChanges() {\n    this.isActionAdd = this.grid.getSetting('actions.add');\n    this.addNewButtonContent = this.grid.getSetting('add.addButtonContent');\n  }\n\n  onAdd(event: any) {\n    event.preventDefault();\n    event.stopPropagation();\n    if (this.grid.getSetting('mode') === 'external') {\n      this.create.emit({\n        source: this.source,\n      });\n    } else {\n      this.grid.createFormShown = true;\n    }\n  }\n}\n","import {Component, Input, Output, EventEmitter, OnChanges} from '@angular/core';\n\nimport { Grid } from '../../../lib/grid';\nimport { DataSource } from '../../../lib/data-source/data-source';\nimport { Column } from \"../../../lib/data-set/column\";\n\n@Component({\n  selector: '[ng2-st-thead-filters-row]',\n  template: `\n    <th *ngIf=\"isMultiSelectVisible\"></th>\n    <th ng2-st-add-button *ngIf=\"showActionColumnLeft\"\n                          [grid]=\"grid\"\n                          (create)=\"create.emit($event)\">\n    </th>\n    <th *ngFor=\"let column of getVisibleColumns(grid.getColumns())\" class=\"ng2-smart-th {{ column.id }}\">\n      <ng2-smart-table-filter [source]=\"source\"\n                              [column]=\"column\"\n                              [inputClass]=\"filterInputClass\"\n                              (filter)=\"filter.emit($event)\">\n      </ng2-smart-table-filter>\n    </th>\n    <th ng2-st-add-button *ngIf=\"showActionColumnRight\"\n                          [grid]=\"grid\"\n                          [source]=\"source\"\n                          (create)=\"create.emit($event)\">\n    </th>\n  `,\n})\nexport class TheadFitlersRowComponent implements OnChanges {\n\n  @Input() grid: Grid;\n  @Input() source: DataSource;\n\n  @Output() create = new EventEmitter<any>();\n  @Output() filter = new EventEmitter<any>();\n\n  isMultiSelectVisible: boolean;\n  showActionColumnLeft: boolean;\n  showActionColumnRight: boolean;\n  filterInputClass: string;\n\n  ngOnChanges() {\n    this.isMultiSelectVisible = this.grid.isMultiSelectVisible();\n    this.showActionColumnLeft = this.grid.showActionColumn('left');\n    this.showActionColumnRight = this.grid.showActionColumn('right');\n    this.filterInputClass = this.grid.getSetting('filter.inputClass');\n  }\n\n  getVisibleColumns(columns: Array<Column>): Array<Column> {\n    return (columns || []).filter((column: Column) => !column.hide);\n  }\n}\n","import {Component, Input, Output, EventEmitter, OnChanges } from '@angular/core';\n\nimport { Grid } from '../../../lib/grid';\n\n@Component({\n  selector: 'ng2-st-actions',\n  template: `\n    <a href=\"#\" class=\"ng2-smart-action ng2-smart-action-add-create\"\n        [innerHTML]=\"createButtonContent\"\n        (click)=\"$event.preventDefault();create.emit($event)\"></a>\n    <a href=\"#\" class=\"ng2-smart-action ng2-smart-action-add-cancel\"\n        [innerHTML]=\"cancelButtonContent\"\n        (click)=\"$event.preventDefault();grid.createFormShown = false;\"></a>\n  `,\n})\nexport class ActionsComponent implements OnChanges {\n\n  @Input() grid: Grid;\n  @Output() create = new EventEmitter<any>();\n\n  createButtonContent: string;\n  cancelButtonContent: string;\n\n  ngOnChanges() {\n    this.createButtonContent = this.grid.getSetting('add.createButtonContent');\n    this.cancelButtonContent = this.grid.getSetting('add.cancelButtonContent');\n  }\n}\n","import { Component, Input, Output, EventEmitter, OnChanges } from '@angular/core';\n\nimport { Grid } from '../../../lib/grid';\nimport { Row } from '../../../lib/data-set/row';\nimport { Cell } from '../../../lib/data-set/cell';\n\n@Component({\n  selector: '[ng2-st-thead-form-row]',\n  template: `\n      <td *ngIf=\"\"></td>\n      <td  *ngIf=\"showActionColumnLeft\"  class=\"ng2-smart-actions\">\n        <ng2-st-actions [grid]=\"grid\" (create)=\"onCreate($event)\"></ng2-st-actions>\n      </td>\n      <td *ngFor=\"let cell of getVisibleCells(grid.getNewRow().getCells())\">\n        <ng2-smart-table-cell [cell]=\"cell\"\n                              [grid]=\"grid\"\n                              [isNew]=\"true\"\n                              [createConfirm]=\"createConfirm\"\n                              [inputClass]=\"addInputClass\"\n                              [isInEditing]=\"grid.getNewRow().isInEditing\"\n                              (edited)=\"onCreate($event)\">\n        </ng2-smart-table-cell>\n      </td>\n      <td  *ngIf=\"showActionColumnRight\"  class=\"ng2-smart-actions\">\n        <ng2-st-actions [grid]=\"grid\" (create)=\"onCreate($event)\"></ng2-st-actions>\n      </td>\n  `,\n})\nexport class TheadFormRowComponent implements OnChanges {\n\n  @Input() grid: Grid;\n  @Input() row: Row;\n  @Input() createConfirm: EventEmitter<any>;\n\n  @Output() create = new EventEmitter<any>();\n\n  isMultiSelectVisible: boolean;\n  showActionColumnLeft: boolean;\n  showActionColumnRight: boolean;\n  addInputClass: string;\n\n  onCreate(event: any) {\n    event.stopPropagation();\n\n    this.grid.create(this.grid.getNewRow(), this.createConfirm);\n  }\n\n  ngOnChanges(){\n    this.isMultiSelectVisible = this.grid.isMultiSelectVisible();\n    this.showActionColumnLeft = this.grid.showActionColumn('left');\n    this.showActionColumnRight = this.grid.showActionColumn('right');\n    this.addInputClass = this.grid.getSetting('add.inputClass');\n  }\n\n  getVisibleCells(cells: Array<Cell>): Array<Cell> {\n    return (cells || []).filter((cell: Cell) => !cell.getColumn().hide);\n  }\n}\n","import {Component, Input, Output, EventEmitter, OnChanges} from '@angular/core';\n\nimport { Grid } from '../../lib/grid';\nimport { DataSource } from '../../lib/data-source/data-source';\n\n@Component({\n    selector: '[ng2-st-thead]',\n    templateUrl: './thead.component.html',\n})\nexport class Ng2SmartTableTheadComponent implements OnChanges {\n\n    @Input() grid: Grid;\n    @Input() source: DataSource;\n    @Input() isAllSelected: boolean;\n    @Input() createConfirm: EventEmitter<any>;\n\n    @Output() sort = new EventEmitter<any>();\n    @Output() selectAllRows = new EventEmitter<any>();\n    @Output() create = new EventEmitter<any>();\n    @Output() filter = new EventEmitter<any>();\n\n    isHideHeader: boolean;\n    isHideSubHeader: boolean;\n\n  ngOnChanges() {\n      this.isHideHeader = this.grid.getSetting('hideHeader');\n      this.isHideSubHeader = this.grid.getSetting('hideSubHeader');\n    }\n}\n","<tr ng2-st-thead-titles-row *ngIf=\"!isHideHeader\"\n                            class=\"ng2-smart-titles\"\n                            [grid]=\"grid\"\n                            [isAllSelected]=\"isAllSelected\"\n                            [source]=\"source\"\n                            (sort)=\"sort.emit($event)\"\n                            (selectAllRows)=\"selectAllRows.emit($event)\">\n</tr>\n\n<tr ng2-st-thead-filters-row *ngIf=\"!isHideSubHeader\"\n                              class=\"ng2-smart-filters\"\n                              [grid]=\"grid\"\n                              [source]=\"source\"\n                              (create)=\"create.emit($event)\"\n                              (filter)=\"filter.emit($event)\">\n</tr>\n\n<tr ng2-st-thead-form-row *ngIf=\"grid.createFormShown\"\n                          [grid]=\"grid\"\n                          [createConfirm]=\"createConfirm\">\n</tr>\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\n\nimport { FilterModule } from '../filter/filter.module';\nimport { CellModule } from '../cell/cell.module';\n\nimport { Ng2SmartTableTheadComponent } from './thead.component';\nimport { ActionsComponent } from './cells/actions.component';\nimport { ActionsTitleComponent } from './cells/actions-title.component';\nimport { AddButtonComponent } from './cells/add-button.component';\nimport { CheckboxSelectAllComponent } from './cells/checkbox-select-all.component';\nimport { ColumnTitleComponent } from './cells/column-title.component';\nimport { TitleComponent } from './cells/title/title.component';\nimport { TheadFitlersRowComponent } from './rows/thead-filters-row.component';\nimport { TheadFormRowComponent } from './rows/thead-form-row.component';\nimport { TheadTitlesRowComponent } from './rows/thead-titles-row.component';\n\nconst THEAD_COMPONENTS = [\n  ActionsComponent,\n  ActionsTitleComponent,\n  AddButtonComponent,\n  CheckboxSelectAllComponent,\n  ColumnTitleComponent,\n  TitleComponent,\n  TheadFitlersRowComponent,\n  TheadFormRowComponent,\n  TheadTitlesRowComponent,\n  Ng2SmartTableTheadComponent,\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    FilterModule,\n    CellModule,\n  ],\n  declarations: [\n    ...THEAD_COMPONENTS,\n  ],\n  exports: [\n    ...THEAD_COMPONENTS,\n  ],\n})\nexport class THeadModule { }\n","export function compareValues(direction: any, a: any, b: any) {\n  if (a < b) {\n    return -1 * direction;\n  }\n  if (a > b) {\n    return direction;\n  }\n  return 0;\n}\n\nexport class LocalSorter {\n\n  static sort(data: Array<any>, field: string, direction: string, customCompare?: Function): Array<any> {\n\n    const dir: number = (direction === 'asc') ? 1 : -1;\n    const compare: Function = customCompare ? customCompare : compareValues;\n\n    return data.sort((a, b) => {\n      return compare.call(null, dir, a[field], b[field]);\n    });\n  }\n}\n","export function filterValues(value: string, search: string) {\n  return value.toString().toLowerCase().includes(search.toString().toLowerCase());\n}\n\nexport class LocalFilter {\n\n  static filter(data: Array<any>, field: string, search: string, customFilter?: Function): Array<any> {\n    const filter: Function = customFilter ? customFilter : filterValues;\n\n    return data.filter((el) => {\n      const value = typeof el[field] === 'undefined' || el[field] === null ? '' : el[field];\n      return filter.call(null, value, search);\n    });\n  }\n}\n","export class LocalPager {\n\n  static paginate(data: Array<any>, page: number, perPage: number): Array<any> {\n    return data.slice(perPage * (page - 1), perPage * page);\n  }\n}\n","import { LocalSorter } from './local.sorter';\nimport { LocalFilter } from './local.filter';\nimport { LocalPager } from './local.pager';\nimport { DataSource } from '../data-source';\nimport { deepExtend } from '../../helpers';\n\nexport class LocalDataSource extends DataSource {\n\n  protected data: Array<any> = [];\n  protected filteredAndSorted: Array<any> = [];\n  protected sortConf: Array<any> = [];\n  protected filterConf: any = {\n    filters: [],\n    andOperator: true,\n  };\n  protected pagingConf: any = {};\n\n  constructor(data: Array<any> = []) {\n    super();\n\n    this.data = data;\n  }\n\n  load(data: Array<any>): Promise<any> {\n    this.data = data;\n\n    return super.load(data);\n  }\n\n  prepend(element: any): Promise<any> {\n    this.reset(true);\n\n    this.data.unshift(element);\n    return super.prepend(element);\n  }\n\n  append(element: any): Promise<any> {\n    this.reset(true);\n\n    this.data.push(element);\n    return super.append(element);\n  }\n\n  add(element: any): Promise<any> {\n    this.data.push(element);\n\n    return super.add(element);\n  }\n\n  remove(element: any): Promise<any> {\n    this.data = this.data.filter(el => el !== element);\n\n    return super.remove(element);\n  }\n\n  update(element: any, values: any): Promise<any> {\n    return new Promise((resolve, reject) => {\n      this.find(element).then((found) => {\n        found = deepExtend(found, values);\n        super.update(found, values).then(resolve).catch(reject);\n      }).catch(reject);\n    });\n  }\n\n  find(element: any): Promise<any> {\n    const found = this.data.find(el => el === element);\n    if (found) {\n      return Promise.resolve(found);\n    }\n\n    return Promise.reject(new Error('Element was not found in the dataset'));\n  }\n\n  getElements(): Promise<any> {\n    const data = this.data.slice(0);\n    return Promise.resolve(this.prepareData(data));\n  }\n\n  getFilteredAndSorted(): Promise<any> {\n    let data = this.data.slice(0);\n    this.prepareData(data);\n    return Promise.resolve(this.filteredAndSorted);\n  }\n\n  getAll(): Promise<any> {\n    const data = this.data.slice(0);\n    return Promise.resolve(data);\n  }\n\n  reset(silent = false) {\n    if (silent) {\n      this.filterConf = {\n        filters: [],\n        andOperator: true,\n      };\n      this.sortConf = [];\n      this.pagingConf['page'] = 1;\n    } else {\n      this.setFilter([], true, false);\n      this.setSort([], false);\n      this.setPage(1);\n    }\n  }\n\n  empty(): Promise<any> {\n    this.data = [];\n\n    return super.empty();\n  }\n\n  count(): number {\n    return this.filteredAndSorted.length;\n  }\n\n  /**\n   *\n   * Array of conf objects\n   * [\n   *  {field: string, direction: asc|desc|null, compare: Function|null},\n   * ]\n   * @param conf\n   * @param doEmit\n   * @returns {LocalDataSource}\n   */\n  setSort(conf: Array<any>, doEmit = true): LocalDataSource {\n    if (conf !== null) {\n\n      conf.forEach((fieldConf) => {\n        if (!fieldConf['field'] || typeof fieldConf['direction'] === 'undefined') {\n          throw new Error('Sort configuration object is not valid');\n        }\n      });\n      this.sortConf = conf;\n    }\n\n    super.setSort(conf, doEmit);\n    return this;\n  }\n\n  /**\n   *\n   * Array of conf objects\n   * [\n   *  {field: string, search: string, filter: Function|null},\n   * ]\n   * @param conf\n   * @param andOperator\n   * @param doEmit\n   * @returns {LocalDataSource}\n   */\n  setFilter(conf: Array<any>, andOperator = true, doEmit = true): LocalDataSource {\n    if (conf && conf.length > 0) {\n      conf.forEach((fieldConf) => {\n        this.addFilter(fieldConf, andOperator, false);\n      });\n    } else {\n      this.filterConf = {\n        filters: [],\n        andOperator: true,\n      };\n    }\n    this.filterConf.andOperator = andOperator;\n    this.pagingConf['page'] = 1;\n\n    super.setFilter(conf, andOperator, doEmit);\n    return this;\n  }\n\n  addFilter(fieldConf: any, andOperator = true, doEmit: boolean = true): LocalDataSource {\n    if (!fieldConf['field'] || typeof fieldConf['search'] === 'undefined') {\n      throw new Error('Filter configuration object is not valid');\n    }\n\n    let found = false;\n    this.filterConf.filters.forEach((currentFieldConf: any, index: any) => {\n      if (currentFieldConf['field'] === fieldConf['field']) {\n        this.filterConf.filters[index] = fieldConf;\n        found = true;\n      }\n    });\n    if (!found) {\n      this.filterConf.filters.push(fieldConf);\n    }\n    this.filterConf.andOperator = andOperator;\n    super.addFilter(fieldConf, andOperator, doEmit);\n    return this;\n  }\n\n  setPaging(page: number, perPage: number, doEmit: boolean = true): LocalDataSource {\n    this.pagingConf['page'] = page;\n    this.pagingConf['perPage'] = perPage;\n\n    super.setPaging(page, perPage, doEmit);\n    return this;\n  }\n\n  setPage(page: number, doEmit: boolean = true): LocalDataSource {\n    this.pagingConf['page'] = page;\n    super.setPage(page, doEmit);\n    return this;\n  }\n\n  getSort(): any {\n    return this.sortConf;\n  }\n\n  getFilter(): any {\n    return this.filterConf;\n  }\n\n  getPaging(): any {\n    return this.pagingConf;\n  }\n\n  protected prepareData(data: Array<any>): Array<any> {\n    data = this.filter(data);\n    data = this.sort(data);\n    this.filteredAndSorted = data.slice(0);\n\n    return this.paginate(data);\n  }\n\n  protected sort(data: Array<any>): Array<any> {\n    if (this.sortConf) {\n      this.sortConf.forEach((fieldConf) => {\n        data = LocalSorter\n          .sort(data, fieldConf['field'], fieldConf['direction'], fieldConf['compare']);\n      });\n    }\n    return data;\n  }\n\n  // TODO: refactor?\n  protected filter(data: Array<any>): Array<any> {\n    if (this.filterConf.filters) {\n      if (this.filterConf.andOperator) {\n        this.filterConf.filters.forEach((fieldConf: any) => {\n          if (fieldConf['search'].length > 0) {\n            data = LocalFilter\n              .filter(data, fieldConf['field'], fieldConf['search'], fieldConf['filter']);\n          }\n        });\n      } else {\n        let mergedData: any = [];\n        this.filterConf.filters.forEach((fieldConf: any) => {\n          if (fieldConf['search'].length > 0) {\n            mergedData = mergedData.concat(LocalFilter\n              .filter(data, fieldConf['field'], fieldConf['search'], fieldConf['filter']));\n          }\n        });\n        // remove non unique items\n        data = mergedData.filter((elem: any, pos: any, arr: any) => {\n          return arr.indexOf(elem) === pos;\n        });\n      }\n    }\n    return data;\n  }\n\n  protected paginate(data: Array<any>): Array<any> {\n    if (this.pagingConf && this.pagingConf['page'] && this.pagingConf['perPage']) {\n      data = LocalPager.paginate(data, this.pagingConf['page'], this.pagingConf['perPage']);\n    }\n    return data;\n  }\n}\n","import { Component, Input, Output, SimpleChange, EventEmitter, OnChanges, OnDestroy } from '@angular/core';\nimport { Subject, Subscription } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\n\nimport { Grid } from './lib/grid';\nimport { DataSource } from './lib/data-source/data-source';\nimport { Row } from './lib/data-set/row';\nimport { deepExtend, getPageForRowIndex } from './lib/helpers';\nimport { LocalDataSource } from './lib/data-source/local/local.data-source';\n\n@Component({\n  selector: 'ng2-smart-table',\n  styleUrls: ['./ng2-smart-table.component.scss'],\n  templateUrl: './ng2-smart-table.component.html',\n})\nexport class Ng2SmartTableComponent implements OnChanges, OnDestroy {\n\n  @Input() source: any;\n  @Input() settings: Object = {};\n\n  @Output() rowSelect = new EventEmitter<any>();\n  @Output() rowDeselect = new EventEmitter<any>();\n  @Output() userRowSelect = new EventEmitter<any>();\n  @Output() delete = new EventEmitter<any>();\n  @Output() edit = new EventEmitter<any>();\n  @Output() create = new EventEmitter<any>();\n  @Output() custom = new EventEmitter<any>();\n  @Output() deleteConfirm = new EventEmitter<any>();\n  @Output() editConfirm = new EventEmitter<any>();\n  @Output() createConfirm = new EventEmitter<any>();\n  @Output() rowHover: EventEmitter<any> = new EventEmitter<any>();\n\n  tableClass: string;\n  tableId: string;\n  perPageSelect: any;\n  isHideHeader: boolean;\n  isHideSubHeader: boolean;\n  isPagerDisplay: boolean;\n  rowClassFunction: Function;\n\n  grid: Grid;\n  defaultSettings: Object = {\n    mode: 'inline', // inline|external|click-to-edit\n    selectMode: 'single', // single|multi\n    /**\n     * Points to an element in all data\n     *\n     * when < 0 all lines must be deselected\n     */\n    selectedRowIndex: 0,\n    switchPageToSelectedRowPage: false,\n    hideHeader: false,\n    hideSubHeader: false,\n    actions: {\n      columnTitle: 'Actions',\n      add: true,\n      edit: true,\n      delete: true,\n      custom: [],\n      position: 'left', // left|right\n    },\n    filter: {\n      inputClass: '',\n    },\n    edit: {\n      inputClass: '',\n      editButtonContent: 'Edit',\n      saveButtonContent: 'Update',\n      cancelButtonContent: 'Cancel',\n      confirmSave: false,\n    },\n    add: {\n      inputClass: '',\n      addButtonContent: 'Add New',\n      createButtonContent: 'Create',\n      cancelButtonContent: 'Cancel',\n      confirmCreate: false,\n    },\n    delete: {\n      deleteButtonContent: 'Delete',\n      confirmDelete: false,\n    },\n    attr: {\n      id: '',\n      class: '',\n    },\n    noDataMessage: 'No data found',\n    columns: {},\n    pager: {\n      display: true,\n      page: 1,\n      perPage: 10,\n    },\n    rowClassFunction: () => '',\n  };\n\n  isAllSelected: boolean = false;\n\n  private onSelectRowSubscription: Subscription;\n  private onDeselectRowSubscription: Subscription;\n  private destroyed$: Subject<void> = new Subject<void>();\n\n  ngOnChanges(changes: { [propertyName: string]: SimpleChange }) {\n    if (this.grid) {\n      if (changes['settings']) {\n        this.grid.setSettings(this.prepareSettings());\n      }\n      if (changes['source']) {\n        this.source = this.prepareSource();\n        this.grid.setSource(this.source);\n      }\n    } else {\n      this.initGrid();\n    }\n    this.tableId = this.grid.getSetting('attr.id');\n    this.tableClass = this.grid.getSetting('attr.class');\n    this.isHideHeader = this.grid.getSetting('hideHeader');\n    this.isHideSubHeader = this.grid.getSetting('hideSubHeader');\n    this.isPagerDisplay = this.grid.getSetting('pager.display');\n    this.isPagerDisplay = this.grid.getSetting('pager.display');\n    this.perPageSelect = this.grid.getSetting('pager.perPageSelect');\n    this.rowClassFunction = this.grid.getSetting('rowClassFunction');\n  }\n\n  ngOnDestroy(): void {\n    this.destroyed$.next();\n  }\n\n  selectRow(index: number, switchPageToSelectedRowPage: boolean = this.grid.getSetting('switchPageToSelectedRowPage')): void {\n    if (!this.grid) {\n      return;\n    }\n    this.grid.settings.selectedRowIndex = index;\n    if (this.isIndexOutOfRange(index)) {\n      // we need to deselect all rows if we got an incorrect index\n      this.deselectAllRows();\n      return;\n    }\n\n    if (switchPageToSelectedRowPage) {\n      const source: DataSource = this.source;\n      const paging: { page: number, perPage: number } = source.getPaging();\n      const page: number = getPageForRowIndex(index, paging.perPage);\n      index = index % paging.perPage;\n      this.grid.settings.selectedRowIndex = index;\n\n      if (page !== paging.page) {\n        source.setPage(page);\n        return;\n      }\n\n    }\n\n    const row: Row = this.grid.getRows()[index];\n    if (row) {\n      this.onSelectRow(row);\n    } else {\n      // we need to deselect all rows if we got an incorrect index\n      this.deselectAllRows();\n    }\n  }\n\n  private deselectAllRows(): void {\n    this.grid.dataSet.deselectAll();\n    this.emitDeselectRow(null);\n  }\n\n  editRowSelect(row: Row) {\n    if (this.grid.getSetting('selectMode') === 'multi') {\n      this.onMultipleSelectRow(row);\n    } else {\n      this.onSelectRow(row);\n    }\n  }\n\n  onUserSelectRow(row: Row) {\n    if (this.grid.getSetting('selectMode') !== 'multi') {\n      this.grid.selectRow(row);\n      this.emitUserSelectRow(row);\n      this.emitSelectRow(row);\n    }\n  }\n\n  onRowHover(row: Row) {\n    this.rowHover.emit(row);\n  }\n\n  multipleSelectRow(row: Row) {\n    this.grid.multipleSelectRow(row);\n    this.emitUserSelectRow(row);\n    this.emitSelectRow(row);\n  }\n\n  onSelectAllRows($event: any) {\n    this.isAllSelected = !this.isAllSelected;\n    this.grid.selectAllRows(this.isAllSelected);\n\n    this.emitUserSelectRow(null);\n    this.emitSelectRow(null);\n  }\n\n  onSelectRow(row: Row) {\n    this.grid.selectRow(row);\n    this.emitSelectRow(row);\n  }\n\n  onMultipleSelectRow(row: Row) {\n    this.emitSelectRow(row);\n  }\n\n  initGrid() {\n    this.source = this.prepareSource();\n    this.grid = new Grid(this.source, this.prepareSettings());\n\n    this.subscribeToOnSelectRow();\n    this.subscribeToOnDeselectRow();\n  }\n\n  prepareSource(): DataSource {\n    if (this.source instanceof DataSource) {\n      return this.source;\n    } else if (this.source instanceof Array) {\n      return new LocalDataSource(this.source);\n    }\n\n    return new LocalDataSource();\n  }\n\n  prepareSettings(): Object {\n    return deepExtend({}, this.defaultSettings, this.settings);\n  }\n\n  changePage($event: any) {\n    this.resetAllSelector();\n  }\n\n  sort($event: any) {\n    this.resetAllSelector();\n  }\n\n  filter($event: any) {\n    this.resetAllSelector();\n  }\n\n  private resetAllSelector() {\n    this.isAllSelected = false;\n  }\n\n  private emitUserSelectRow(row: Row) {\n    const selectedRows = this.grid.getSelectedRows();\n\n    this.userRowSelect.emit({\n      data: row ? row.getData() : null,\n      isSelected: row ? row.getIsSelected() : null,\n      source: this.source,\n      selected: selectedRows && selectedRows.length ? selectedRows.map((r: Row) => r.getData()) : [],\n    });\n  }\n\n  private emitSelectRow(row: Row) {\n    const data = {\n      data: row ? row.getData() : null,\n      isSelected: row ? row.getIsSelected() : null,\n      source: this.source,\n    };\n    this.rowSelect.emit(data);\n    if (!row?.isSelected) {\n      this.rowDeselect.emit(data);\n    }\n  }\n\n  private emitDeselectRow(row: Row): void {\n    this.rowDeselect.emit({\n      data: row ? row.getData() : null,\n      isSelected: row ? row.getIsSelected() : null,\n      source: this.source,\n    });\n  }\n\n  private isIndexOutOfRange(index: number): boolean {\n    const dataAmount: number = this.source?.count();\n    return index < 0 || (typeof dataAmount === 'number' && index >= dataAmount);\n  }\n\n  private subscribeToOnSelectRow(): void {\n    if (this.onSelectRowSubscription) {\n      this.onSelectRowSubscription.unsubscribe();\n    }\n    this.onSelectRowSubscription = this.grid.onSelectRow()\n      .pipe(takeUntil(this.destroyed$))\n      .subscribe((row) => {\n        this.emitSelectRow(row);\n      });\n  }\n\n  private subscribeToOnDeselectRow(): void {\n    if (this.onDeselectRowSubscription) {\n      this.onDeselectRowSubscription.unsubscribe();\n    }\n    this.onDeselectRowSubscription = this.grid.onDeselectRow()\n      .pipe(takeUntil(this.destroyed$))\n      .subscribe((row) => {\n        this.emitDeselectRow(row);\n      });\n  }\n\n}\n","<table [id]=\"tableId\" [ngClass]=\"tableClass\">\n\n  <thead ng2-st-thead *ngIf=\"!isHideHeader || !isHideSubHeader\"\n                      [grid]=\"grid\"\n                      [isAllSelected]=\"isAllSelected\"\n                      [source]=\"source\"\n                      [createConfirm]=\"createConfirm\"\n                      (create)=\"create.emit($event)\"\n                      (selectAllRows)=\"onSelectAllRows($event)\"\n                      (sort)=\"sort($event)\"\n                      (filter)=\"filter($event)\">\n  </thead>\n\n  <tbody ng2-st-tbody [grid]=\"grid\"\n                      [source]=\"source\"\n                      [deleteConfirm]=\"deleteConfirm\"\n                      [editConfirm]=\"editConfirm\"\n                      [rowClassFunction]=\"rowClassFunction\"\n                      (edit)=\"edit.emit($event)\"\n                      (delete)=\"delete.emit($event)\"\n                      (custom)=\"custom.emit($event)\"\n                      (userSelectRow)=\"onUserSelectRow($event)\"\n                      (editRowSelect)=\"editRowSelect($event)\"\n                      (multipleSelectRow)=\"multipleSelectRow($event)\"\n                      (rowHover)=\"onRowHover($event)\">\n  </tbody>\n\n</table>\n\n<ng2-smart-table-pager *ngIf=\"isPagerDisplay\"\n                        [source]=\"source\"\n                        [perPageSelect]=\"perPageSelect\"\n                        (changePage)=\"changePage($event)\">\n</ng2-smart-table-pager>\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\nimport { CellModule } from './components/cell/cell.module';\nimport { FilterModule } from './components/filter/filter.module';\nimport { PagerModule } from './components/pager/pager.module';\nimport { TBodyModule } from './components/tbody/tbody.module';\nimport { THeadModule } from './components/thead/thead.module';\n\nimport { Ng2SmartTableComponent } from './ng2-smart-table.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    CellModule,\n    FilterModule,\n    PagerModule,\n    TBodyModule,\n    THeadModule,\n  ],\n  declarations: [\n    Ng2SmartTableComponent,\n  ],\n  exports: [\n    Ng2SmartTableComponent,\n  ],\n})\nexport class Ng2SmartTableModule {\n}\n","export class ServerSourceConf {\n\n  protected static readonly SORT_FIELD_KEY = '_sort';\n  protected static readonly SORT_DIR_KEY = '_order';\n  protected static readonly PAGER_PAGE_KEY = '_page';\n  protected static readonly PAGER_LIMIT_KEY = '_limit';\n  protected static readonly FILTER_FIELD_KEY = '#field#_like';\n  protected static readonly TOTAL_KEY = 'x-total-count';\n  protected static readonly DATA_KEY = '';\n\n  endPoint: string;\n\n  sortFieldKey: string;\n  sortDirKey: string;\n  pagerPageKey: string;\n  pagerLimitKey: string;\n  filterFieldKey: string;\n  totalKey: string;\n  dataKey: string;\n\n  constructor(\n    { endPoint = '', sortFieldKey = '', sortDirKey = '',\n      pagerPageKey = '', pagerLimitKey = '', filterFieldKey = '', totalKey = '', dataKey = '' } = {}) {\n\n    this.endPoint = endPoint ? endPoint : '';\n\n    this.sortFieldKey = sortFieldKey ? sortFieldKey : ServerSourceConf.SORT_FIELD_KEY;\n    this.sortDirKey = sortDirKey ? sortDirKey : ServerSourceConf.SORT_DIR_KEY;\n    this.pagerPageKey = pagerPageKey ? pagerPageKey : ServerSourceConf.PAGER_PAGE_KEY;\n    this.pagerLimitKey = pagerLimitKey ? pagerLimitKey : ServerSourceConf.PAGER_LIMIT_KEY;\n    this.filterFieldKey = filterFieldKey ? filterFieldKey : ServerSourceConf.FILTER_FIELD_KEY;\n    this.totalKey = totalKey ? totalKey : ServerSourceConf.TOTAL_KEY;\n    this.dataKey = dataKey ? dataKey : ServerSourceConf.DATA_KEY;\n  }\n}\n","import { HttpClient, HttpParams } from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\nimport { LocalDataSource } from '../local/local.data-source';\nimport { ServerSourceConf } from './server-source.conf';\nimport { getDeepFromObject } from '../../helpers';\n\nimport { map } from 'rxjs/operators';\n\nexport class ServerDataSource extends LocalDataSource {\n\n  protected conf: ServerSourceConf;\n\n  protected lastRequestCount: number = 0;\n\n  constructor(protected http: HttpClient, conf: ServerSourceConf | {} = {}) {\n    super();\n\n    this.conf = new ServerSourceConf(conf);\n\n    if (!this.conf.endPoint) {\n      throw new Error('At least endPoint must be specified as a configuration of the server data source.');\n    }\n  }\n\n  count(): number {\n    return this.lastRequestCount;\n  }\n\n  getElements(): Promise<any> {\n    return this.requestElements()\n      .pipe(map(res => {\n        this.lastRequestCount = this.extractTotalFromResponse(res);\n        this.data = this.extractDataFromResponse(res);\n\n        return this.data;\n      })).toPromise();\n  }\n\n  /**\n   * Extracts array of data from server response\n   * @param res\n   * @returns {any}\n   */\n  protected extractDataFromResponse(res: any): Array<any> {\n    const rawData = res.body;\n    const data = !!this.conf.dataKey ? getDeepFromObject(rawData, this.conf.dataKey, []) : rawData;\n\n    if (data instanceof Array) {\n      return data;\n    }\n\n    throw new Error(`Data must be an array.\n    Please check that data extracted from the server response by the key '${this.conf.dataKey}' exists and is array.`);\n  }\n\n  /**\n   * Extracts total rows count from the server response\n   * Looks for the count in the heders first, then in the response body\n   * @param res\n   * @returns {any}\n   */\n  protected extractTotalFromResponse(res: any): number {\n    if (res.headers.has(this.conf.totalKey)) {\n      return +res.headers.get(this.conf.totalKey);\n    } else {\n      const rawData = res.body;\n      return getDeepFromObject(rawData, this.conf.totalKey, 0);\n    }\n  }\n\n  protected requestElements(): Observable<any> {\n    let httpParams = this.createRequesParams();\n    return this.http.get(this.conf.endPoint, { params: httpParams, observe: 'response' });\n  }\n\n  protected createRequesParams(): HttpParams {\n    let httpParams = new HttpParams();\n\n    httpParams = this.addSortRequestParams(httpParams);\n    httpParams = this.addFilterRequestParams(httpParams);\n    return this.addPagerRequestParams(httpParams);\n  }\n\n  protected addSortRequestParams(httpParams: HttpParams): HttpParams {\n    if (this.sortConf) {\n      this.sortConf.forEach((fieldConf) => {\n        httpParams = httpParams.set(this.conf.sortFieldKey, fieldConf.field);\n        httpParams = httpParams.set(this.conf.sortDirKey, fieldConf.direction.toUpperCase());\n      });\n    }\n\n    return httpParams;\n  }\n\n  protected addFilterRequestParams(httpParams: HttpParams): HttpParams {\n\n    if (this.filterConf.filters) {\n      this.filterConf.filters.forEach((fieldConf: any) => {\n        if (fieldConf['search']) {\n          httpParams = httpParams.set(this.conf.filterFieldKey.replace('#field#', fieldConf['field']), fieldConf['search']);\n        }\n      });\n    }\n\n    return httpParams;\n  }\n\n  protected addPagerRequestParams(httpParams: HttpParams): HttpParams {\n\n    if (this.pagingConf && this.pagingConf['page'] && this.pagingConf['perPage']) {\n      httpParams = httpParams.set(this.conf.pagerPageKey, this.pagingConf['page']);\n      httpParams = httpParams.set(this.conf.pagerLimitKey, this.pagingConf['perPage']);\n    }\n\n    return httpParams;\n  }\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":["i1.CustomViewComponent","i1","i2","i1.SelectEditorComponent","i2.TextareaEditorComponent","i3.CheckboxEditorComponent","i4.CompleterEditorComponent","i5.InputEditorComponent","i6","i1.CustomEditComponent","i2.DefaultEditComponent","i3","i1.ViewCellComponent","i2.EditCellComponent","i1.SelectFilterComponent","i2.CheckboxFilterComponent","i3.CompleterFilterComponent","i4.InputFilterComponent","i5","i1.CustomFilterComponent","i2.DefaultFilterComponent","i1.TbodyCustomComponent","i2.TbodyEditDeleteComponent","i3.TbodyCreateCancelComponent","i4.CellComponent","i1.TitleComponent","i1.CheckboxSelectAllComponent","i2.ActionsTitleComponent","i3.ColumnTitleComponent","i4","i1.AddButtonComponent","i2.FilterComponent","i1.ActionsComponent","i2.CellComponent","i1.TheadTitlesRowComponent","i2.TheadFitlersRowComponent","i3.TheadFormRowComponent","i1.Ng2SmartTableTheadComponent","i2.Ng2SmartTableTbodyComponent","i3.PagerComponent"],"mappings":"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"}},"fesm2015":{"code":"import * as i0 from '@angular/core';\nimport { ViewContainerRef, Component, Input, ViewChild, ChangeDetectionStrategy, EventEmitter, Output, NgModule } from '@angular/core';\nimport * as i2 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport * as i1 from '@angular/forms';\nimport { FormsModule, NgControl, FormControl, ReactiveFormsModule } from '@angular/forms';\nimport * as i1$1 from 'ng2-completer';\nimport { Ng2CompleterModule } from 'ng2-completer';\nimport { skip, distinctUntilChanged, debounceTime, map, takeUntil } from 'rxjs/operators';\nimport { Subject } from 'rxjs';\nimport { cloneDeep } from 'lodash';\nimport { HttpParams } from '@angular/common/http';\n\nclass CustomViewComponent {\n    constructor(resolver) {\n        this.resolver = resolver;\n    }\n    ngOnInit() {\n        if (this.cell && !this.customComponent) {\n            this.createCustomComponent();\n            this.callOnComponentInit();\n            this.patchInstance();\n        }\n    }\n    ngOnDestroy() {\n        if (this.customComponent) {\n            this.customComponent.destroy();\n        }\n    }\n    createCustomComponent() {\n        const componentFactory = this.resolver.resolveComponentFactory(this.cell.getColumn().renderComponent);\n        this.customComponent = this.dynamicTarget.createComponent(componentFactory);\n    }\n    callOnComponentInit() {\n        const onComponentInitFunction = this.cell.getColumn().getOnComponentInitFunction();\n        onComponentInitFunction && onComponentInitFunction(this.customComponent.instance);\n    }\n    patchInstance() {\n        Object.assign(this.customComponent.instance, this.getPatch());\n    }\n    getPatch() {\n        return {\n            value: this.cell.getValue(),\n            rowData: this.cell.getRow().getData()\n        };\n    }\n}\nCustomViewComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: CustomViewComponent, deps: [{ token: i0.ComponentFactoryResolver }], target: i0.ɵɵFactoryTarget.Component });\nCustomViewComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.3.11\", type: CustomViewComponent, selector: \"custom-view-component\", inputs: { cell: \"cell\" }, viewQueries: [{ propertyName: \"dynamicTarget\", first: true, predicate: [\"dynamicTarget\"], descendants: true, read: ViewContainerRef, static: true }], ngImport: i0, template: `\n    <ng-template #dynamicTarget></ng-template>\n  `, isInline: true });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: CustomViewComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'custom-view-component',\n                    template: `\n    <ng-template #dynamicTarget></ng-template>\n  `,\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ComponentFactoryResolver }]; }, propDecorators: { cell: [{\n                type: Input\n            }], dynamicTarget: [{\n                type: ViewChild,\n                args: ['dynamicTarget', { read: ViewContainerRef, static: true }]\n            }] } });\n\nclass ViewCellComponent {\n}\nViewCellComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: ViewCellComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\nViewCellComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.3.11\", type: ViewCellComponent, selector: \"table-cell-view-mode\", inputs: { cell: \"cell\" }, ngImport: i0, template: `\n    <div [ngSwitch]=\"cell.getColumn().type\">\n        <custom-view-component *ngSwitchCase=\"'custom'\" [cell]=\"cell\"></custom-view-component>\n        <div *ngSwitchCase=\"'html'\" [innerHTML]=\"cell.getValue()\"></div>\n        <div *ngSwitchDefault>{{ cell.getValue() }}</div>\n    </div>\n    `, isInline: true, components: [{ type: CustomViewComponent, selector: \"custom-view-component\", inputs: [\"cell\"] }], directives: [{ type: i2.NgSwitch, selector: \"[ngSwitch]\", inputs: [\"ngSwitch\"] }, { type: i2.NgSwitchCase, selector: \"[ngSwitchCase]\", inputs: [\"ngSwitchCase\"] }, { type: i2.NgSwitchDefault, selector: \"[ngSwitchDefault]\" }], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: ViewCellComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'table-cell-view-mode',\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    template: `\n    <div [ngSwitch]=\"cell.getColumn().type\">\n        <custom-view-component *ngSwitchCase=\"'custom'\" [cell]=\"cell\"></custom-view-component>\n        <div *ngSwitchCase=\"'html'\" [innerHTML]=\"cell.getValue()\"></div>\n        <div *ngSwitchDefault>{{ cell.getValue() }}</div>\n    </div>\n    `,\n                }]\n        }], propDecorators: { cell: [{\n                type: Input\n            }] } });\n\nclass EditCellDefault {\n    constructor() {\n        this.inputClass = '';\n        this.edited = new EventEmitter();\n    }\n    onEdited(event) {\n        this.edited.next(event);\n        return false;\n    }\n    onStopEditing() {\n        this.cell.getRow().isInEditing = false;\n        return false;\n    }\n    onClick(event) {\n        event.stopPropagation();\n    }\n}\nEditCellDefault.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: EditCellDefault, deps: [], target: i0.ɵɵFactoryTarget.Component });\nEditCellDefault.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.3.11\", type: EditCellDefault, selector: \"ng-component\", inputs: { cell: \"cell\", inputClass: \"inputClass\" }, outputs: { edited: \"edited\" }, ngImport: i0, template: '', isInline: true });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: EditCellDefault, decorators: [{\n            type: Component,\n            args: [{\n                    template: ''\n                }]\n        }], propDecorators: { cell: [{\n                type: Input\n            }], inputClass: [{\n                type: Input\n            }], edited: [{\n                type: Output\n            }] } });\n\nclass CustomEditComponent extends EditCellDefault {\n    constructor(resolver) {\n        super();\n        this.resolver = resolver;\n    }\n    ngOnChanges(changes) {\n        if (this.cell && !this.customComponent) {\n            const componentFactory = this.resolver.resolveComponentFactory(this.cell.getColumn().editor.component);\n            this.customComponent = this.dynamicTarget.createComponent(componentFactory);\n            // set @Inputs and @Outputs of custom component\n            this.customComponent.instance.cell = this.cell;\n            this.customComponent.instance.inputClass = this.inputClass;\n            this.customComponent.instance.onStopEditing.subscribe(() => this.onStopEditing());\n            this.customComponent.instance.onEdited.subscribe((event) => this.onEdited(event));\n            this.customComponent.instance.onClick.subscribe((event) => this.onClick(event));\n        }\n    }\n    ngOnDestroy() {\n        if (this.customComponent) {\n            this.customComponent.destroy();\n        }\n    }\n}\nCustomEditComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: CustomEditComponent, deps: [{ token: i0.ComponentFactoryResolver }], target: i0.ɵɵFactoryTarget.Component });\nCustomEditComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.3.11\", type: CustomEditComponent, selector: \"table-cell-custom-editor\", viewQueries: [{ propertyName: \"dynamicTarget\", first: true, predicate: [\"dynamicTarget\"], descendants: true, read: ViewContainerRef, static: true }], usesInheritance: true, usesOnChanges: true, ngImport: i0, template: `\n    <ng-template #dynamicTarget></ng-template>\n  `, isInline: true });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: CustomEditComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'table-cell-custom-editor',\n                    template: `\n    <ng-template #dynamicTarget></ng-template>\n  `,\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ComponentFactoryResolver }]; }, propDecorators: { dynamicTarget: [{\n                type: ViewChild,\n                args: ['dynamicTarget', { read: ViewContainerRef, static: true }]\n            }] } });\n\nclass DefaultEditor {\n    constructor() {\n        this.onStopEditing = new EventEmitter();\n        this.onEdited = new EventEmitter();\n        this.onClick = new EventEmitter();\n    }\n}\nDefaultEditor.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: DefaultEditor, deps: [], target: i0.ɵɵFactoryTarget.Component });\nDefaultEditor.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.3.11\", type: DefaultEditor, selector: \"ng-component\", inputs: { cell: \"cell\", inputClass: \"inputClass\" }, outputs: { onStopEditing: \"onStopEditing\", onEdited: \"onEdited\", onClick: \"onClick\" }, ngImport: i0, template: '', isInline: true });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: DefaultEditor, decorators: [{\n            type: Component,\n            args: [{\n                    template: '',\n                }]\n        }], propDecorators: { cell: [{\n                type: Input\n            }], inputClass: [{\n                type: Input\n            }], onStopEditing: [{\n                type: Output\n            }], onEdited: [{\n                type: Output\n            }], onClick: [{\n                type: Output\n            }] } });\n\nclass SelectEditorComponent extends DefaultEditor {\n    constructor() {\n        super();\n    }\n}\nSelectEditorComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: SelectEditorComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\nSelectEditorComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.3.11\", type: SelectEditorComponent, selector: \"select-editor\", usesInheritance: true, ngImport: i0, template: `\n    <select [ngClass]=\"inputClass\"\n            class=\"form-control\"\n            [(ngModel)]=\"cell.newValue\"\n            [name]=\"cell.getId()\"\n            [disabled]=\"!cell.isEditable()\"\n            (click)=\"onClick.emit($event)\"\n            (keydown.enter)=\"onEdited.emit($event)\"\n            (keydown.esc)=\"onStopEditing.emit()\">\n\n        <option *ngFor=\"let option of cell.getColumn().getConfig()?.list\" [value]=\"option.value\"\n                [selected]=\"option.value === cell.getValue()\">{{ option.title }}\n        </option>\n    </select>\n    `, isInline: true, directives: [{ type: i1.SelectControlValueAccessor, selector: \"select:not([multiple])[formControlName],select:not([multiple])[formControl],select:not([multiple])[ngModel]\", inputs: [\"compareWith\"] }, { type: i2.NgClass, selector: \"[ngClass]\", inputs: [\"class\", \"ngClass\"] }, { type: i1.NgControlStatus, selector: \"[formControlName],[ngModel],[formControl]\" }, { type: i1.NgModel, selector: \"[ngModel]:not([formControlName]):not([formControl])\", inputs: [\"name\", \"disabled\", \"ngModel\", \"ngModelOptions\"], outputs: [\"ngModelChange\"], exportAs: [\"ngModel\"] }, { type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }, { type: i1.NgSelectOption, selector: \"option\", inputs: [\"ngValue\", \"value\"] }, { type: i1.ɵNgSelectMultipleOption, selector: \"option\", inputs: [\"ngValue\", \"value\"] }] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: SelectEditorComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'select-editor',\n                    template: `\n    <select [ngClass]=\"inputClass\"\n            class=\"form-control\"\n            [(ngModel)]=\"cell.newValue\"\n            [name]=\"cell.getId()\"\n            [disabled]=\"!cell.isEditable()\"\n            (click)=\"onClick.emit($event)\"\n            (keydown.enter)=\"onEdited.emit($event)\"\n            (keydown.esc)=\"onStopEditing.emit()\">\n\n        <option *ngFor=\"let option of cell.getColumn().getConfig()?.list\" [value]=\"option.value\"\n                [selected]=\"option.value === cell.getValue()\">{{ option.title }}\n        </option>\n    </select>\n    `,\n                }]\n        }], ctorParameters: function () { return []; } });\n\nclass TextareaEditorComponent extends DefaultEditor {\n    constructor() {\n        super();\n    }\n}\nTextareaEditorComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: TextareaEditorComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\nTextareaEditorComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.3.11\", type: TextareaEditorComponent, selector: \"textarea-editor\", usesInheritance: true, ngImport: i0, template: `\n    <textarea [ngClass]=\"inputClass\"\n              class=\"form-control\"\n              [(ngModel)]=\"cell.newValue\"\n              [name]=\"cell.getId()\"\n              [disabled]=\"!cell.isEditable()\"\n              [placeholder]=\"cell.getTitle()\"\n              (click)=\"onClick.emit($event)\"\n              (keydown.enter)=\"onEdited.emit($event)\"\n              (keydown.esc)=\"onStopEditing.emit()\">\n    </textarea>\n    `, isInline: true, styles: [\":host input,:host textarea{width:100%;line-height:normal;padding:.375em .75em}\\n\"], directives: [{ type: i1.DefaultValueAccessor, selector: \"input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]\" }, { type: i2.NgClass, selector: \"[ngClass]\", inputs: [\"class\", \"ngClass\"] }, { type: i1.NgControlStatus, selector: \"[formControlName],[ngModel],[formControl]\" }, { type: i1.NgModel, selector: \"[ngModel]:not([formControlName]):not([formControl])\", inputs: [\"name\", \"disabled\", \"ngModel\", \"ngModelOptions\"], outputs: [\"ngModelChange\"], exportAs: [\"ngModel\"] }] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: TextareaEditorComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'textarea-editor', template: `\n    <textarea [ngClass]=\"inputClass\"\n              class=\"form-control\"\n              [(ngModel)]=\"cell.newValue\"\n              [name]=\"cell.getId()\"\n              [disabled]=\"!cell.isEditable()\"\n              [placeholder]=\"cell.getTitle()\"\n              (click)=\"onClick.emit($event)\"\n              (keydown.enter)=\"onEdited.emit($event)\"\n              (keydown.esc)=\"onStopEditing.emit()\">\n    </textarea>\n    `, styles: [\":host input,:host textarea{width:100%;line-height:normal;padding:.375em .75em}\\n\"] }]\n        }], ctorParameters: function () { return []; } });\n\nclass CheckboxEditorComponent extends DefaultEditor {\n    constructor() {\n        super();\n    }\n    onChange(event) {\n        const trueVal = (this.cell.getColumn().getConfig() && this.cell.getColumn().getConfig().true) || true;\n        const falseVal = (this.cell.getColumn().getConfig() && this.cell.getColumn().getConfig().false) || false;\n        this.cell.newValue = event.target.checked ? trueVal : falseVal;\n    }\n}\nCheckboxEditorComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: CheckboxEditorComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\nCheckboxEditorComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.3.11\", type: CheckboxEditorComponent, selector: \"checkbox-editor\", usesInheritance: true, ngImport: i0, template: `\n    <input [ngClass]=\"inputClass\"\n           type=\"checkbox\"\n           class=\"form-control\"\n           [name]=\"cell.getId()\"\n           [disabled]=\"!cell.isEditable()\"\n           [checked]=\"cell.getValue() == (cell.getColumn().getConfig()?.true || true)\"\n           (click)=\"onClick.emit($event)\"\n           (change)=\"onChange($event)\">\n    `, isInline: true, styles: [\":host input,:host textarea{width:100%;line-height:normal;padding:.375em .75em}\\n\"], directives: [{ type: i2.NgClass, selector: \"[ngClass]\", inputs: [\"class\", \"ngClass\"] }] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: CheckboxEditorComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'checkbox-editor', template: `\n    <input [ngClass]=\"inputClass\"\n           type=\"checkbox\"\n           class=\"form-control\"\n           [name]=\"cell.getId()\"\n           [disabled]=\"!cell.isEditable()\"\n           [checked]=\"cell.getValue() == (cell.getColumn().getConfig()?.true || true)\"\n           (click)=\"onClick.emit($event)\"\n           (change)=\"onChange($event)\">\n    `, styles: [\":host input,:host textarea{width:100%;line-height:normal;padding:.375em .75em}\\n\"] }]\n        }], ctorParameters: function () { return []; } });\n\nclass CompleterEditorComponent extends DefaultEditor {\n    constructor(completerService) {\n        super();\n        this.completerService = completerService;\n        this.completerStr = '';\n    }\n    ngOnInit() {\n        if (this.cell.getColumn().editor && this.cell.getColumn().editor.type === 'completer') {\n            const config = this.cell.getColumn().getConfig().completer;\n            config.dataService = this.completerService.local(config.data, config.searchFields, config.titleField);\n            config.dataService.descriptionField(config.descriptionField);\n        }\n    }\n    onEditedCompleter(event) {\n        this.cell.newValue = event.title;\n        return false;\n    }\n}\nCompleterEditorComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: CompleterEditorComponent, deps: [{ token: i1$1.CompleterService }], target: i0.ɵɵFactoryTarget.Component });\nCompleterEditorComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.3.11\", type: CompleterEditorComponent, selector: \"completer-editor\", usesInheritance: true, ngImport: i0, template: `\n    <ng2-completer [(ngModel)]=\"completerStr\"\n                   [dataService]=\"cell.getColumn().getConfig().completer.dataService\"\n                   [minSearchLength]=\"cell.getColumn().getConfig().completer.minSearchLength || 0\"\n                   [pause]=\"cell.getColumn().getConfig().completer.pause || 0\"\n                   [placeholder]=\"cell.getColumn().getConfig().completer.placeholder || 'Start typing...'\"\n                   (selected)=\"onEditedCompleter($event)\">\n    </ng2-completer>\n    `, isInline: true, components: [{ type: i1$1.CompleterCmp, selector: \"ng2-completer\", inputs: [\"inputName\", \"inputId\", \"pause\", \"minSearchLength\", \"maxChars\", \"overrideSuggested\", \"clearSelected\", \"clearUnselected\", \"fillHighlighted\", \"placeholder\", \"autoMatch\", \"disableInput\", \"autofocus\", \"openOnFocus\", \"openOnClick\", \"selectOnClick\", \"selectOnFocus\", \"autoHighlight\", \"datasource\", \"dataService\", \"textNoResults\", \"textSearching\", \"matchClass\", \"fieldTabindex\", \"inputClass\", \"initialValue\"], outputs: [\"selected\", \"highlighted\", \"blur\", \"click\", \"focus\", \"opened\", \"keyup\", \"keydown\"] }], directives: [{ type: i1.NgControlStatus, selector: \"[formControlName],[ngModel],[formControl]\" }, { type: i1.NgModel, selector: \"[ngModel]:not([formControlName]):not([formControl])\", inputs: [\"name\", \"disabled\", \"ngModel\", \"ngModelOptions\"], outputs: [\"ngModelChange\"], exportAs: [\"ngModel\"] }] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: CompleterEditorComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'completer-editor',\n                    template: `\n    <ng2-completer [(ngModel)]=\"completerStr\"\n                   [dataService]=\"cell.getColumn().getConfig().completer.dataService\"\n                   [minSearchLength]=\"cell.getColumn().getConfig().completer.minSearchLength || 0\"\n                   [pause]=\"cell.getColumn().getConfig().completer.pause || 0\"\n                   [placeholder]=\"cell.getColumn().getConfig().completer.placeholder || 'Start typing...'\"\n                   (selected)=\"onEditedCompleter($event)\">\n    </ng2-completer>\n    `,\n                }]\n        }], ctorParameters: function () { return [{ type: i1$1.CompleterService }]; } });\n\nclass InputEditorComponent extends DefaultEditor {\n    constructor() {\n        super();\n    }\n}\nInputEditorComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: InputEditorComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\nInputEditorComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.3.11\", type: InputEditorComponent, selector: \"input-editor\", usesInheritance: true, ngImport: i0, template: `\n    <input [ngClass]=\"inputClass\"\n           class=\"form-control\"\n           [(ngModel)]=\"cell.newValue\"\n           [name]=\"cell.getId()\"\n           [placeholder]=\"cell.getTitle()\"\n           [disabled]=\"!cell.isEditable()\"\n           (click)=\"onClick.emit($event)\"\n           (keydown.enter)=\"onEdited.emit($event)\"\n           (keydown.esc)=\"onStopEditing.emit()\">\n    `, isInline: true, styles: [\":host input,:host textarea{width:100%;line-height:normal;padding:.375em .75em}\\n\"], directives: [{ type: i1.DefaultValueAccessor, selector: \"input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]\" }, { type: i2.NgClass, selector: \"[ngClass]\", inputs: [\"class\", \"ngClass\"] }, { type: i1.NgControlStatus, selector: \"[formControlName],[ngModel],[formControl]\" }, { type: i1.NgModel, selector: \"[ngModel]:not([formControlName]):not([formControl])\", inputs: [\"name\", \"disabled\", \"ngModel\", \"ngModelOptions\"], outputs: [\"ngModelChange\"], exportAs: [\"ngModel\"] }] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: InputEditorComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'input-editor', template: `\n    <input [ngClass]=\"inputClass\"\n           class=\"form-control\"\n           [(ngModel)]=\"cell.newValue\"\n           [name]=\"cell.getId()\"\n           [placeholder]=\"cell.getTitle()\"\n           [disabled]=\"!cell.isEditable()\"\n           (click)=\"onClick.emit($event)\"\n           (keydown.enter)=\"onEdited.emit($event)\"\n           (keydown.esc)=\"onStopEditing.emit()\">\n    `, styles: [\":host input,:host textarea{width:100%;line-height:normal;padding:.375em .75em}\\n\"] }]\n        }], ctorParameters: function () { return []; } });\n\nclass DefaultEditComponent extends EditCellDefault {\n    constructor() {\n        super();\n    }\n    getEditorType() {\n        return this.cell.getColumn().editor && this.cell.getColumn().editor.type;\n    }\n}\nDefaultEditComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: DefaultEditComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\nDefaultEditComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.3.11\", type: DefaultEditComponent, selector: \"table-cell-default-editor\", usesInheritance: true, ngImport: i0, template: \"<div [ngSwitch]=\\\"getEditorType()\\\">\\n    <select-editor *ngSwitchCase=\\\"'list'\\\"\\n                   [cell]=\\\"cell\\\"\\n                   [inputClass]=\\\"inputClass\\\"\\n                   (onClick)=\\\"onClick($event)\\\"\\n                   (onEdited)=\\\"onEdited($event)\\\"\\n                   (onStopEditing)=\\\"onStopEditing()\\\">\\n    </select-editor>\\n\\n    <textarea-editor *ngSwitchCase=\\\"'textarea'\\\"\\n                     [cell]=\\\"cell\\\"\\n                     [inputClass]=\\\"inputClass\\\"\\n                     (onClick)=\\\"onClick($event)\\\"\\n                     (onEdited)=\\\"onEdited($event)\\\"\\n                     (onStopEditing)=\\\"onStopEditing()\\\">\\n    </textarea-editor>\\n\\n    <checkbox-editor *ngSwitchCase=\\\"'checkbox'\\\"\\n                     [cell]=\\\"cell\\\"\\n                     [inputClass]=\\\"inputClass\\\"\\n                     (onClick)=\\\"onClick($event)\\\">\\n    </checkbox-editor>\\n\\n    <completer-editor *ngSwitchCase=\\\"'completer'\\\"\\n                      [cell]=\\\"cell\\\">\\n    </completer-editor>\\n\\n    <input-editor *ngSwitchDefault\\n                  [cell]=\\\"cell\\\"\\n                  [inputClass]=\\\"inputClass\\\"\\n                  (onClick)=\\\"onClick($event)\\\"\\n                  (onEdited)=\\\"onEdited($event)\\\"\\n                  (onStopEditing)=\\\"onStopEditing()\\\">\\n    </input-editor>\\n</div>\", components: [{ type: SelectEditorComponent, selector: \"select-editor\" }, { type: TextareaEditorComponent, selector: \"textarea-editor\" }, { type: CheckboxEditorComponent, selector: \"checkbox-editor\" }, { type: CompleterEditorComponent, selector: \"completer-editor\" }, { type: InputEditorComponent, selector: \"input-editor\" }], directives: [{ type: i2.NgSwitch, selector: \"[ngSwitch]\", inputs: [\"ngSwitch\"] }, { type: i2.NgSwitchCase, selector: \"[ngSwitchCase]\", inputs: [\"ngSwitchCase\"] }, { type: i2.NgSwitchDefault, selector: \"[ngSwitchDefault]\" }] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: DefaultEditComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'table-cell-default-editor', template: \"<div [ngSwitch]=\\\"getEditorType()\\\">\\n    <select-editor *ngSwitchCase=\\\"'list'\\\"\\n                   [cell]=\\\"cell\\\"\\n                   [inputClass]=\\\"inputClass\\\"\\n                   (onClick)=\\\"onClick($event)\\\"\\n                   (onEdited)=\\\"onEdited($event)\\\"\\n                   (onStopEditing)=\\\"onStopEditing()\\\">\\n    </select-editor>\\n\\n    <textarea-editor *ngSwitchCase=\\\"'textarea'\\\"\\n                     [cell]=\\\"cell\\\"\\n                     [inputClass]=\\\"inputClass\\\"\\n                     (onClick)=\\\"onClick($event)\\\"\\n                     (onEdited)=\\\"onEdited($event)\\\"\\n                     (onStopEditing)=\\\"onStopEditing()\\\">\\n    </textarea-editor>\\n\\n    <checkbox-editor *ngSwitchCase=\\\"'checkbox'\\\"\\n                     [cell]=\\\"cell\\\"\\n                     [inputClass]=\\\"inputClass\\\"\\n                     (onClick)=\\\"onClick($event)\\\">\\n    </checkbox-editor>\\n\\n    <completer-editor *ngSwitchCase=\\\"'completer'\\\"\\n                      [cell]=\\\"cell\\\">\\n    </completer-editor>\\n\\n    <input-editor *ngSwitchDefault\\n                  [cell]=\\\"cell\\\"\\n                  [inputClass]=\\\"inputClass\\\"\\n                  (onClick)=\\\"onClick($event)\\\"\\n                  (onEdited)=\\\"onEdited($event)\\\"\\n                  (onStopEditing)=\\\"onStopEditing()\\\">\\n    </input-editor>\\n</div>\" }]\n        }], ctorParameters: function () { return []; } });\n\nclass EditCellComponent {\n    constructor() {\n        this.inputClass = '';\n        this.edited = new EventEmitter();\n    }\n    onEdited(event) {\n        this.edited.next(event);\n        return false;\n    }\n    getEditorType() {\n        return this.cell.getColumn().editor && this.cell.getColumn().editor.type;\n    }\n}\nEditCellComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: EditCellComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\nEditCellComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.3.11\", type: EditCellComponent, selector: \"table-cell-edit-mode\", inputs: { cell: \"cell\", inputClass: \"inputClass\" }, outputs: { edited: \"edited\" }, ngImport: i0, template: `\n      <div [ngSwitch]=\"getEditorType()\">\n        <table-cell-custom-editor *ngSwitchCase=\"'custom'\"\n                                  [cell]=\"cell\"\n                                  [inputClass]=\"inputClass\"\n                                  (edited)=\"onEdited($event)\">\n        </table-cell-custom-editor>\n        <table-cell-default-editor *ngSwitchDefault\n                                  [cell]=\"cell\"\n                                  [inputClass]=\"inputClass\"\n                                  (edited)=\"onEdited($event)\">\n        </table-cell-default-editor>\n      </div>\n    `, isInline: true, components: [{ type: CustomEditComponent, selector: \"table-cell-custom-editor\" }, { type: DefaultEditComponent, selector: \"table-cell-default-editor\" }], directives: [{ type: i2.NgSwitch, selector: \"[ngSwitch]\", inputs: [\"ngSwitch\"] }, { type: i2.NgSwitchCase, selector: \"[ngSwitchCase]\", inputs: [\"ngSwitchCase\"] }, { type: i2.NgSwitchDefault, selector: \"[ngSwitchDefault]\" }] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: EditCellComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'table-cell-edit-mode',\n                    template: `\n      <div [ngSwitch]=\"getEditorType()\">\n        <table-cell-custom-editor *ngSwitchCase=\"'custom'\"\n                                  [cell]=\"cell\"\n                                  [inputClass]=\"inputClass\"\n                                  (edited)=\"onEdited($event)\">\n        </table-cell-custom-editor>\n        <table-cell-default-editor *ngSwitchDefault\n                                  [cell]=\"cell\"\n                                  [inputClass]=\"inputClass\"\n                                  (edited)=\"onEdited($event)\">\n        </table-cell-default-editor>\n      </div>\n    `,\n                }]\n        }], propDecorators: { cell: [{\n                type: Input\n            }], inputClass: [{\n                type: Input\n            }], edited: [{\n                type: Output\n            }] } });\n\nclass CellComponent {\n    constructor() {\n        this.inputClass = '';\n        this.mode = 'inline';\n        this.isInEditing = false;\n        this.edited = new EventEmitter();\n    }\n    onEdited(event) {\n        if (this.isNew) {\n            this.grid.create(this.grid.getNewRow(), this.createConfirm);\n        }\n        else {\n            this.grid.save(this.row, this.editConfirm);\n        }\n    }\n}\nCellComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: CellComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\nCellComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.3.11\", type: CellComponent, selector: \"ng2-smart-table-cell\", inputs: { grid: \"grid\", row: \"row\", editConfirm: \"editConfirm\", createConfirm: \"createConfirm\", isNew: \"isNew\", cell: \"cell\", inputClass: \"inputClass\", mode: \"mode\", isInEditing: \"isInEditing\" }, outputs: { edited: \"edited\" }, ngImport: i0, template: `\n    <table-cell-view-mode *ngIf=\"!isInEditing\" [cell]=\"cell\"></table-cell-view-mode>\n    <table-cell-edit-mode *ngIf=\"isInEditing\" [cell]=\"cell\"\n                          [inputClass]=\"inputClass\"\n                          (edited)=\"onEdited($event)\">\n    </table-cell-edit-mode>\n  `, isInline: true, components: [{ type: ViewCellComponent, selector: \"table-cell-view-mode\", inputs: [\"cell\"] }, { type: EditCellComponent, selector: \"table-cell-edit-mode\", inputs: [\"cell\", \"inputClass\"], outputs: [\"edited\"] }], directives: [{ type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: CellComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'ng2-smart-table-cell',\n                    template: `\n    <table-cell-view-mode *ngIf=\"!isInEditing\" [cell]=\"cell\"></table-cell-view-mode>\n    <table-cell-edit-mode *ngIf=\"isInEditing\" [cell]=\"cell\"\n                          [inputClass]=\"inputClass\"\n                          (edited)=\"onEdited($event)\">\n    </table-cell-edit-mode>\n  `,\n                }]\n        }], propDecorators: { grid: [{\n                type: Input\n            }], row: [{\n                type: Input\n            }], editConfirm: [{\n                type: Input\n            }], createConfirm: [{\n                type: Input\n            }], isNew: [{\n                type: Input\n            }], cell: [{\n                type: Input\n            }], inputClass: [{\n                type: Input\n            }], mode: [{\n                type: Input\n            }], isInEditing: [{\n                type: Input\n            }], edited: [{\n                type: Output\n            }] } });\n\nconst CELL_COMPONENTS = [\n    CellComponent,\n    EditCellDefault,\n    DefaultEditor,\n    CustomEditComponent,\n    DefaultEditComponent,\n    EditCellComponent,\n    CheckboxEditorComponent,\n    CompleterEditorComponent,\n    InputEditorComponent,\n    SelectEditorComponent,\n    TextareaEditorComponent,\n    CustomViewComponent,\n    ViewCellComponent,\n];\nclass CellModule {\n}\nCellModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: CellModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nCellModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: CellModule, declarations: [CellComponent,\n        EditCellDefault,\n        DefaultEditor,\n        CustomEditComponent,\n        DefaultEditComponent,\n        EditCellComponent,\n        CheckboxEditorComponent,\n        CompleterEditorComponent,\n        InputEditorComponent,\n        SelectEditorComponent,\n        TextareaEditorComponent,\n        CustomViewComponent,\n        ViewCellComponent], imports: [CommonModule,\n        FormsModule,\n        Ng2CompleterModule], exports: [CellComponent,\n        EditCellDefault,\n        DefaultEditor,\n        CustomEditComponent,\n        DefaultEditComponent,\n        EditCellComponent,\n        CheckboxEditorComponent,\n        CompleterEditorComponent,\n        InputEditorComponent,\n        SelectEditorComponent,\n        TextareaEditorComponent,\n        CustomViewComponent,\n        ViewCellComponent] });\nCellModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: CellModule, imports: [[\n            CommonModule,\n            FormsModule,\n            Ng2CompleterModule,\n        ]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: CellModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [\n                        CommonModule,\n                        FormsModule,\n                        Ng2CompleterModule,\n                    ],\n                    declarations: [\n                        ...CELL_COMPONENTS,\n                    ],\n                    exports: [\n                        ...CELL_COMPONENTS,\n                    ],\n                }]\n        }] });\n\nclass FilterDefault {\n    constructor() {\n        this.inputClass = '';\n        this.filter = new EventEmitter();\n        this.query = '';\n    }\n    onFilter(query) {\n        this.source.addFilter({\n            field: this.column.id,\n            search: query,\n            filter: this.column.getFilterFunction(),\n        });\n    }\n}\nFilterDefault.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: FilterDefault, deps: [], target: i0.ɵɵFactoryTarget.Component });\nFilterDefault.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.3.11\", type: FilterDefault, selector: \"ng-component\", inputs: { column: \"column\", source: \"source\", inputClass: \"inputClass\" }, outputs: { filter: \"filter\" }, ngImport: i0, template: '', isInline: true });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: FilterDefault, decorators: [{\n            type: Component,\n            args: [{\n                    template: '',\n                }]\n        }], propDecorators: { column: [{\n                type: Input\n            }], source: [{\n                type: Input\n            }], inputClass: [{\n                type: Input\n            }], filter: [{\n                type: Output\n            }] } });\n\nclass CustomFilterComponent extends FilterDefault {\n    constructor(resolver) {\n        super();\n        this.resolver = resolver;\n    }\n    ngOnChanges(changes) {\n        if (this.column && !this.customComponent) {\n            const componentFactory = this.resolver.resolveComponentFactory(this.column.filter.component);\n            this.customComponent = this.dynamicTarget.createComponent(componentFactory);\n            // set @Inputs and @Outputs of custom component\n            this.customComponent.instance.query = this.query;\n            this.customComponent.instance.column = this.column;\n            this.customComponent.instance.source = this.source;\n            this.customComponent.instance.inputClass = this.inputClass;\n            this.customComponent.instance.filter.subscribe((event) => this.onFilter(event));\n        }\n        if (this.customComponent) {\n            this.customComponent.instance.ngOnChanges(changes);\n        }\n    }\n    ngOnDestroy() {\n        if (this.customComponent) {\n            this.customComponent.destroy();\n        }\n    }\n}\nCustomFilterComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: CustomFilterComponent, deps: [{ token: i0.ComponentFactoryResolver }], target: i0.ɵɵFactoryTarget.Component });\nCustomFilterComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.3.11\", type: CustomFilterComponent, selector: \"custom-table-filter\", inputs: { query: \"query\" }, viewQueries: [{ propertyName: \"dynamicTarget\", first: true, predicate: [\"dynamicTarget\"], descendants: true, read: ViewContainerRef, static: true }], usesInheritance: true, usesOnChanges: true, ngImport: i0, template: `<ng-template #dynamicTarget></ng-template>`, isInline: true });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: CustomFilterComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'custom-table-filter',\n                    template: `<ng-template #dynamicTarget></ng-template>`,\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ComponentFactoryResolver }]; }, propDecorators: { query: [{\n                type: Input\n            }], dynamicTarget: [{\n                type: ViewChild,\n                args: ['dynamicTarget', { read: ViewContainerRef, static: true }]\n            }] } });\n\nclass DefaultFilter {\n    constructor() {\n        this.delay = 300;\n        this.filter = new EventEmitter();\n    }\n    ngOnDestroy() {\n        if (this.changesSubscription) {\n            this.changesSubscription.unsubscribe();\n        }\n    }\n    setFilter() {\n        this.filter.emit(this.query);\n    }\n}\nDefaultFilter.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: DefaultFilter, deps: [], target: i0.ɵɵFactoryTarget.Component });\nDefaultFilter.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.3.11\", type: DefaultFilter, selector: \"ng-component\", inputs: { query: \"query\", inputClass: \"inputClass\", column: \"column\" }, outputs: { filter: \"filter\" }, ngImport: i0, template: '', isInline: true });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: DefaultFilter, decorators: [{\n            type: Component,\n            args: [{\n                    template: '',\n                }]\n        }], propDecorators: { query: [{\n                type: Input\n            }], inputClass: [{\n                type: Input\n            }], column: [{\n                type: Input\n            }], filter: [{\n                type: Output\n            }] } });\n\nclass SelectFilterComponent extends DefaultFilter {\n    constructor() {\n        super();\n    }\n    ngOnInit() {\n        this.inputControl.valueChanges\n            .pipe(skip(1), distinctUntilChanged(), debounceTime(this.delay))\n            .subscribe((value) => this.setFilter());\n    }\n}\nSelectFilterComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: SelectFilterComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\nSelectFilterComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.3.11\", type: SelectFilterComponent, selector: \"select-filter\", viewQueries: [{ propertyName: \"inputControl\", first: true, predicate: [\"inputControl\"], descendants: true, read: NgControl, static: true }], usesInheritance: true, ngImport: i0, template: `\n    <select [ngClass]=\"inputClass\"\n            class=\"form-control\"\n            #inputControl\n            [(ngModel)]=\"query\">\n\n        <option value=\"\">{{ column.getFilterConfig().selectText }}</option>\n        <option *ngFor=\"let option of column.getFilterConfig().list\" [value]=\"option.value\">\n          {{ option.title }}\n        </option>\n    </select>\n  `, isInline: true, directives: [{ type: i1.SelectControlValueAccessor, selector: \"select:not([multiple])[formControlName],select:not([multiple])[formControl],select:not([multiple])[ngModel]\", inputs: [\"compareWith\"] }, { type: i2.NgClass, selector: \"[ngClass]\", inputs: [\"class\", \"ngClass\"] }, { type: i1.NgControlStatus, selector: \"[formControlName],[ngModel],[formControl]\" }, { type: i1.NgModel, selector: \"[ngModel]:not([formControlName]):not([formControl])\", inputs: [\"name\", \"disabled\", \"ngModel\", \"ngModelOptions\"], outputs: [\"ngModelChange\"], exportAs: [\"ngModel\"] }, { type: i1.NgSelectOption, selector: \"option\", inputs: [\"ngValue\", \"value\"] }, { type: i1.ɵNgSelectMultipleOption, selector: \"option\", inputs: [\"ngValue\", \"value\"] }, { type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: SelectFilterComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'select-filter',\n                    template: `\n    <select [ngClass]=\"inputClass\"\n            class=\"form-control\"\n            #inputControl\n            [(ngModel)]=\"query\">\n\n        <option value=\"\">{{ column.getFilterConfig().selectText }}</option>\n        <option *ngFor=\"let option of column.getFilterConfig().list\" [value]=\"option.value\">\n          {{ option.title }}\n        </option>\n    </select>\n  `,\n                }]\n        }], ctorParameters: function () { return []; }, propDecorators: { inputControl: [{\n                type: ViewChild,\n                args: ['inputControl', { read: NgControl, static: true }]\n            }] } });\n\nclass CheckboxFilterComponent extends DefaultFilter {\n    constructor() {\n        super();\n        this.filterActive = false;\n        this.inputControl = new FormControl();\n    }\n    ngOnInit() {\n        this.changesSubscription = this.inputControl.valueChanges\n            .pipe(debounceTime(this.delay))\n            .subscribe((checked) => {\n            this.filterActive = true;\n            const trueVal = (this.column.getFilterConfig() && this.column.getFilterConfig().true) || true;\n            const falseVal = (this.column.getFilterConfig() && this.column.getFilterConfig().false) || false;\n            this.query = checked ? trueVal : falseVal;\n            this.setFilter();\n        });\n    }\n    resetFilter(event) {\n        event.preventDefault();\n        this.query = '';\n        this.inputControl.setValue(false, { emitEvent: false });\n        this.filterActive = false;\n        this.setFilter();\n    }\n}\nCheckboxFilterComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: CheckboxFilterComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\nCheckboxFilterComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.3.11\", type: CheckboxFilterComponent, selector: \"checkbox-filter\", usesInheritance: true, ngImport: i0, template: `\n    <input type=\"checkbox\" [formControl]=\"inputControl\" [ngClass]=\"inputClass\" class=\"form-control\">\n    <a href=\"#\" *ngIf=\"filterActive\"\n                (click)=\"resetFilter($event)\">{{column.getFilterConfig()?.resetText || 'reset'}}</a>\n  `, isInline: true, directives: [{ type: i1.CheckboxControlValueAccessor, selector: \"input[type=checkbox][formControlName],input[type=checkbox][formControl],input[type=checkbox][ngModel]\" }, { type: i1.NgControlStatus, selector: \"[formControlName],[ngModel],[formControl]\" }, { type: i1.FormControlDirective, selector: \"[formControl]\", inputs: [\"formControl\", \"disabled\", \"ngModel\"], outputs: [\"ngModelChange\"], exportAs: [\"ngForm\"] }, { type: i2.NgClass, selector: \"[ngClass]\", inputs: [\"class\", \"ngClass\"] }, { type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: CheckboxFilterComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'checkbox-filter',\n                    template: `\n    <input type=\"checkbox\" [formControl]=\"inputControl\" [ngClass]=\"inputClass\" class=\"form-control\">\n    <a href=\"#\" *ngIf=\"filterActive\"\n                (click)=\"resetFilter($event)\">{{column.getFilterConfig()?.resetText || 'reset'}}</a>\n  `,\n                }]\n        }], ctorParameters: function () { return []; } });\n\nclass CompleterFilterComponent extends DefaultFilter {\n    constructor(completerService) {\n        super();\n        this.completerService = completerService;\n        this.completerContent = new Subject();\n    }\n    ngOnInit() {\n        const config = this.column.getFilterConfig().completer;\n        config.dataService = this.completerService.local(config.data, config.searchFields, config.titleField);\n        config.dataService.descriptionField(config.descriptionField);\n        this.changesSubscription = this.completerContent\n            .pipe(map((ev) => (ev && ev.title) || ev || ''), distinctUntilChanged(), debounceTime(this.delay))\n            .subscribe((search) => {\n            this.query = search;\n            this.setFilter();\n        });\n    }\n    inputTextChanged(event) {\n        // workaround to trigger the search event when the home/end buttons are clicked\n        // when this happens the [(ngModel)]=\"query\" is set to \"\" but the (selected) method is not called\n        // so here it gets called manually\n        if (event === '') {\n            this.completerContent.next(event);\n        }\n    }\n}\nCompleterFilterComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: CompleterFilterComponent, deps: [{ token: i1$1.CompleterService }], target: i0.ɵɵFactoryTarget.Component });\nCompleterFilterComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.3.11\", type: CompleterFilterComponent, selector: \"completer-filter\", usesInheritance: true, ngImport: i0, template: `\n    <ng2-completer [(ngModel)]=\"query\"\n                   (ngModelChange)=\"inputTextChanged($event)\"\n                   [dataService]=\"column.getFilterConfig().completer.dataService\"\n                   [minSearchLength]=\"column.getFilterConfig().completer.minSearchLength || 0\"\n                   [pause]=\"column.getFilterConfig().completer.pause || 0\"\n                   [placeholder]=\"column.getFilterConfig().completer.placeholder || 'Start typing...'\"\n                   (selected)=\"completerContent.next($event)\">\n    </ng2-completer>\n  `, isInline: true, components: [{ type: i1$1.CompleterCmp, selector: \"ng2-completer\", inputs: [\"inputName\", \"inputId\", \"pause\", \"minSearchLength\", \"maxChars\", \"overrideSuggested\", \"clearSelected\", \"clearUnselected\", \"fillHighlighted\", \"placeholder\", \"autoMatch\", \"disableInput\", \"autofocus\", \"openOnFocus\", \"openOnClick\", \"selectOnClick\", \"selectOnFocus\", \"autoHighlight\", \"datasource\", \"dataService\", \"textNoResults\", \"textSearching\", \"matchClass\", \"fieldTabindex\", \"inputClass\", \"initialValue\"], outputs: [\"selected\", \"highlighted\", \"blur\", \"click\", \"focus\", \"opened\", \"keyup\", \"keydown\"] }], directives: [{ type: i1.NgControlStatus, selector: \"[formControlName],[ngModel],[formControl]\" }, { type: i1.NgModel, selector: \"[ngModel]:not([formControlName]):not([formControl])\", inputs: [\"name\", \"disabled\", \"ngModel\", \"ngModelOptions\"], outputs: [\"ngModelChange\"], exportAs: [\"ngModel\"] }] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: CompleterFilterComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'completer-filter',\n                    template: `\n    <ng2-completer [(ngModel)]=\"query\"\n                   (ngModelChange)=\"inputTextChanged($event)\"\n                   [dataService]=\"column.getFilterConfig().completer.dataService\"\n                   [minSearchLength]=\"column.getFilterConfig().completer.minSearchLength || 0\"\n                   [pause]=\"column.getFilterConfig().completer.pause || 0\"\n                   [placeholder]=\"column.getFilterConfig().completer.placeholder || 'Start typing...'\"\n                   (selected)=\"completerContent.next($event)\">\n    </ng2-completer>\n  `,\n                }]\n        }], ctorParameters: function () { return [{ type: i1$1.CompleterService }]; } });\n\nclass InputFilterComponent extends DefaultFilter {\n    constructor() {\n        super();\n        this.inputControl = new FormControl();\n    }\n    ngOnInit() {\n        if (this.query) {\n            this.inputControl.setValue(this.query);\n        }\n        this.inputControl.valueChanges\n            .pipe(distinctUntilChanged(), debounceTime(this.delay))\n            .subscribe((value) => {\n            this.query = this.inputControl.value;\n            this.setFilter();\n        });\n    }\n    ngOnChanges(changes) {\n        if (changes.query) {\n            this.inputControl.setValue(this.query);\n        }\n    }\n}\nInputFilterComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: InputFilterComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\nInputFilterComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.3.11\", type: InputFilterComponent, selector: \"input-filter\", usesInheritance: true, usesOnChanges: true, ngImport: i0, template: `\n    <input\n      [ngClass]=\"inputClass\"\n      [formControl]=\"inputControl\"\n      class=\"form-control\"\n      type=\"text\"\n      placeholder=\"{{ column.title }}\"/>\n  `, isInline: true, directives: [{ type: i1.DefaultValueAccessor, selector: \"input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]\" }, { type: i2.NgClass, selector: \"[ngClass]\", inputs: [\"class\", \"ngClass\"] }, { type: i1.NgControlStatus, selector: \"[formControlName],[ngModel],[formControl]\" }, { type: i1.FormControlDirective, selector: \"[formControl]\", inputs: [\"formControl\", \"disabled\", \"ngModel\"], outputs: [\"ngModelChange\"], exportAs: [\"ngForm\"] }] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: InputFilterComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'input-filter',\n                    template: `\n    <input\n      [ngClass]=\"inputClass\"\n      [formControl]=\"inputControl\"\n      class=\"form-control\"\n      type=\"text\"\n      placeholder=\"{{ column.title }}\"/>\n  `,\n                }]\n        }], ctorParameters: function () { return []; } });\n\nclass DefaultFilterComponent extends FilterDefault {\n}\nDefaultFilterComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: DefaultFilterComponent, deps: null, target: i0.ɵɵFactoryTarget.Component });\nDefaultFilterComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.3.11\", type: DefaultFilterComponent, selector: \"default-table-filter\", inputs: { query: \"query\" }, usesInheritance: true, ngImport: i0, template: `\n    <ng-container [ngSwitch]=\"column.getFilterType()\">\n      <select-filter *ngSwitchCase=\"'list'\"\n                     [query]=\"query\"\n                     [ngClass]=\"inputClass\"\n                     [column]=\"column\"\n                     (filter)=\"onFilter($event)\">\n      </select-filter>\n      <checkbox-filter *ngSwitchCase=\"'checkbox'\"\n                       [query]=\"query\"\n                       [ngClass]=\"inputClass\"\n                       [column]=\"column\"\n                       (filter)=\"onFilter($event)\">\n      </checkbox-filter>\n      <completer-filter *ngSwitchCase=\"'completer'\"\n                        [query]=\"query\"\n                        [ngClass]=\"inputClass\"\n                        [column]=\"column\"\n                        (filter)=\"onFilter($event)\">\n      </completer-filter>\n      <input-filter *ngSwitchDefault\n                    [query]=\"query\"\n                    [ngClass]=\"inputClass\"\n                    [column]=\"column\"\n                    (filter)=\"onFilter($event)\">\n      </input-filter>\n    </ng-container>\n  `, isInline: true, components: [{ type: SelectFilterComponent, selector: \"select-filter\" }, { type: CheckboxFilterComponent, selector: \"checkbox-filter\" }, { type: CompleterFilterComponent, selector: \"completer-filter\" }, { type: InputFilterComponent, selector: \"input-filter\" }], directives: [{ type: i2.NgSwitch, selector: \"[ngSwitch]\", inputs: [\"ngSwitch\"] }, { type: i2.NgSwitchCase, selector: \"[ngSwitchCase]\", inputs: [\"ngSwitchCase\"] }, { type: i2.NgClass, selector: \"[ngClass]\", inputs: [\"class\", \"ngClass\"] }, { type: i2.NgSwitchDefault, selector: \"[ngSwitchDefault]\" }] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: DefaultFilterComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'default-table-filter',\n                    template: `\n    <ng-container [ngSwitch]=\"column.getFilterType()\">\n      <select-filter *ngSwitchCase=\"'list'\"\n                     [query]=\"query\"\n                     [ngClass]=\"inputClass\"\n                     [column]=\"column\"\n                     (filter)=\"onFilter($event)\">\n      </select-filter>\n      <checkbox-filter *ngSwitchCase=\"'checkbox'\"\n                       [query]=\"query\"\n                       [ngClass]=\"inputClass\"\n                       [column]=\"column\"\n                       (filter)=\"onFilter($event)\">\n      </checkbox-filter>\n      <completer-filter *ngSwitchCase=\"'completer'\"\n                        [query]=\"query\"\n                        [ngClass]=\"inputClass\"\n                        [column]=\"column\"\n                        (filter)=\"onFilter($event)\">\n      </completer-filter>\n      <input-filter *ngSwitchDefault\n                    [query]=\"query\"\n                    [ngClass]=\"inputClass\"\n                    [column]=\"column\"\n                    (filter)=\"onFilter($event)\">\n      </input-filter>\n    </ng-container>\n  `,\n                }]\n        }], propDecorators: { query: [{\n                type: Input\n            }] } });\n\nclass FilterComponent extends FilterDefault {\n    constructor() {\n        super(...arguments);\n        this.query = '';\n    }\n    ngOnChanges(changes) {\n        if (changes.source) {\n            if (!changes.source.firstChange) {\n                this.dataChangedSub.unsubscribe();\n            }\n            this.dataChangedSub = this.source.onChanged().subscribe((dataChanges) => {\n                const filterConf = this.source.getFilter();\n                if (filterConf && filterConf.filters && filterConf.filters.length === 0) {\n                    this.query = '';\n                    // add a check for existing filters an set the query if one exists for this column\n                    // this covers instances where the filter is set by user code while maintaining existing functionality\n                }\n                else if (filterConf && filterConf.filters && filterConf.filters.length > 0) {\n                    filterConf.filters.forEach((k, v) => {\n                        if (k.field == this.column.id) {\n                            this.query = k.search;\n                        }\n                    });\n                }\n            });\n        }\n    }\n}\nFilterComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: FilterComponent, deps: null, target: i0.ɵɵFactoryTarget.Component });\nFilterComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.3.11\", type: FilterComponent, selector: \"ng2-smart-table-filter\", usesInheritance: true, usesOnChanges: true, ngImport: i0, template: `\n      <div class=\"ng2-smart-filter\" *ngIf=\"column.isFilterable\" [ngSwitch]=\"column.getFilterType()\">\n        <custom-table-filter *ngSwitchCase=\"'custom'\"\n                             [query]=\"query\"\n                             [column]=\"column\"\n                             [source]=\"source\"\n                             [inputClass]=\"inputClass\"\n                             (filter)=\"onFilter($event)\">\n        </custom-table-filter>\n        <default-table-filter *ngSwitchDefault\n                              [query]=\"query\"\n                              [column]=\"column\"\n                              [source]=\"source\"\n                              [inputClass]=\"inputClass\"\n                              (filter)=\"onFilter($event)\">\n        </default-table-filter>\n      </div>\n    `, isInline: true, styles: [\":host .ng2-smart-filter ::ng-deep input,:host .ng2-smart-filter ::ng-deep select{width:100%;line-height:normal;padding:.375em .75em;font-weight:400}:host .ng2-smart-filter ::ng-deep input[type=search]{box-sizing:inherit}:host .ng2-smart-filter ::ng-deep .completer-dropdown-holder{font-weight:400}:host .ng2-smart-filter ::ng-deep a{font-weight:400}\\n\"], components: [{ type: CustomFilterComponent, selector: \"custom-table-filter\", inputs: [\"query\"] }, { type: DefaultFilterComponent, selector: \"default-table-filter\", inputs: [\"query\"] }], directives: [{ type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { type: i2.NgSwitch, selector: \"[ngSwitch]\", inputs: [\"ngSwitch\"] }, { type: i2.NgSwitchCase, selector: \"[ngSwitchCase]\", inputs: [\"ngSwitchCase\"] }, { type: i2.NgSwitchDefault, selector: \"[ngSwitchDefault]\" }] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: FilterComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'ng2-smart-table-filter', template: `\n      <div class=\"ng2-smart-filter\" *ngIf=\"column.isFilterable\" [ngSwitch]=\"column.getFilterType()\">\n        <custom-table-filter *ngSwitchCase=\"'custom'\"\n                             [query]=\"query\"\n                             [column]=\"column\"\n                             [source]=\"source\"\n                             [inputClass]=\"inputClass\"\n                             (filter)=\"onFilter($event)\">\n        </custom-table-filter>\n        <default-table-filter *ngSwitchDefault\n                              [query]=\"query\"\n                              [column]=\"column\"\n                              [source]=\"source\"\n                              [inputClass]=\"inputClass\"\n                              (filter)=\"onFilter($event)\">\n        </default-table-filter>\n      </div>\n    `, styles: [\":host .ng2-smart-filter ::ng-deep input,:host .ng2-smart-filter ::ng-deep select{width:100%;line-height:normal;padding:.375em .75em;font-weight:400}:host .ng2-smart-filter ::ng-deep input[type=search]{box-sizing:inherit}:host .ng2-smart-filter ::ng-deep .completer-dropdown-holder{font-weight:400}:host .ng2-smart-filter ::ng-deep a{font-weight:400}\\n\"] }]\n        }] });\n\nconst FILTER_COMPONENTS = [\n    FilterDefault,\n    DefaultFilter,\n    FilterComponent,\n    DefaultFilterComponent,\n    CustomFilterComponent,\n    CheckboxFilterComponent,\n    CompleterFilterComponent,\n    InputFilterComponent,\n    SelectFilterComponent,\n];\nclass FilterModule {\n}\nFilterModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: FilterModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nFilterModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: FilterModule, declarations: [FilterDefault,\n        DefaultFilter,\n        FilterComponent,\n        DefaultFilterComponent,\n        CustomFilterComponent,\n        CheckboxFilterComponent,\n        CompleterFilterComponent,\n        InputFilterComponent,\n        SelectFilterComponent], imports: [CommonModule,\n        FormsModule,\n        ReactiveFormsModule,\n        Ng2CompleterModule], exports: [FilterDefault,\n        DefaultFilter,\n        FilterComponent,\n        DefaultFilterComponent,\n        CustomFilterComponent,\n        CheckboxFilterComponent,\n        CompleterFilterComponent,\n        InputFilterComponent,\n        SelectFilterComponent] });\nFilterModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: FilterModule, imports: [[\n            CommonModule,\n            FormsModule,\n            ReactiveFormsModule,\n            Ng2CompleterModule,\n        ]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: FilterModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [\n                        CommonModule,\n                        FormsModule,\n                        ReactiveFormsModule,\n                        Ng2CompleterModule,\n                    ],\n                    declarations: [\n                        ...FILTER_COMPONENTS,\n                    ],\n                    exports: [\n                        ...FILTER_COMPONENTS,\n                    ],\n                }]\n        }] });\n\nclass PagerComponent {\n    constructor() {\n        this.perPageSelect = [];\n        this.changePage = new EventEmitter();\n        this.count = 0;\n    }\n    ngOnChanges(changes) {\n        if (changes.source) {\n            if (!changes.source.firstChange) {\n                this.dataChangedSub.unsubscribe();\n            }\n            this.dataChangedSub = this.source.onChanged().subscribe((dataChanges) => {\n                this.page = this.source.getPaging().page;\n                this.perPage = this.source.getPaging().perPage;\n                this.currentPerPage = this.perPage;\n                this.count = this.source.count();\n                if (this.isPageOutOfBounce()) {\n                    this.source.setPage(--this.page);\n                }\n                this.processPageChange(dataChanges);\n                this.initPages();\n            });\n        }\n    }\n    /**\n     * We change the page here depending on the action performed against data source\n     * if a new element was added to the end of the table - then change the page to the last\n     * if a new element was added to the beginning of the table - then to the first page\n     * @param changes\n     */\n    processPageChange(changes) {\n        if (changes['action'] === 'prepend') {\n            this.source.setPage(1);\n        }\n        if (changes['action'] === 'append') {\n            this.source.setPage(this.getLast());\n        }\n    }\n    shouldShow() {\n        return this.source.count() > this.perPage;\n    }\n    paginate(page) {\n        this.source.setPage(page);\n        this.page = page;\n        this.changePage.emit({ page });\n        return false;\n    }\n    next() {\n        return this.paginate(this.getPage() + 1);\n    }\n    prev() {\n        return this.paginate(this.getPage() - 1);\n    }\n    getPage() {\n        return this.page;\n    }\n    getPages() {\n        return this.pages;\n    }\n    getLast() {\n        return Math.ceil(this.count / this.perPage);\n    }\n    isPageOutOfBounce() {\n        return (this.page * this.perPage) >= (this.count + this.perPage) && this.page > 1;\n    }\n    initPages() {\n        const pagesCount = this.getLast();\n        let showPagesCount = 4;\n        showPagesCount = pagesCount < showPagesCount ? pagesCount : showPagesCount;\n        this.pages = [];\n        if (this.shouldShow()) {\n            let middleOne = Math.ceil(showPagesCount / 2);\n            middleOne = this.page >= middleOne ? this.page : middleOne;\n            let lastOne = middleOne + Math.floor(showPagesCount / 2);\n            lastOne = lastOne >= pagesCount ? pagesCount : lastOne;\n            const firstOne = lastOne - showPagesCount + 1;\n            for (let i = firstOne; i <= lastOne; i++) {\n                this.pages.push(i);\n            }\n        }\n    }\n    onChangePerPage(event) {\n        if (this.currentPerPage) {\n            if (typeof this.currentPerPage === 'string' && this.currentPerPage.toLowerCase() === 'all') {\n                this.source.getPaging().perPage = null;\n            }\n            else {\n                this.source.getPaging().perPage = this.currentPerPage * 1;\n                this.source.refresh();\n            }\n            this.initPages();\n        }\n    }\n}\nPagerComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: PagerComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\nPagerComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.3.11\", type: PagerComponent, selector: \"ng2-smart-table-pager\", inputs: { source: \"source\", perPageSelect: \"perPageSelect\" }, outputs: { changePage: \"changePage\" }, usesOnChanges: true, ngImport: i0, template: `\n    <nav *ngIf=\"shouldShow()\" class=\"ng2-smart-pagination-nav\">\n      <ul class=\"ng2-smart-pagination pagination\">\n        <li class=\"ng2-smart-page-item page-item\" [ngClass]=\"{disabled: getPage() == 1}\">\n          <a class=\"ng2-smart-page-link page-link\" href=\"#\"\n          (click)=\"getPage() == 1 ? false : paginate(1)\" aria-label=\"First\">\n            <span aria-hidden=\"true\">&laquo;</span>\n            <span class=\"sr-only\">First</span>\n          </a>\n        </li>\n        <li class=\"ng2-smart-page-item page-item\" [ngClass]=\"{disabled: getPage() == 1}\">\n          <a class=\"ng2-smart-page-link page-link page-link-prev\" href=\"#\"\n             (click)=\"getPage() == 1 ? false : prev()\" aria-label=\"Prev\">\n            <span aria-hidden=\"true\">&lt;</span>\n            <span class=\"sr-only\">Prev</span>\n          </a>\n        </li>\n        <li class=\"ng2-smart-page-item page-item\"\n        [ngClass]=\"{active: getPage() == page}\" *ngFor=\"let page of getPages()\">\n          <span class=\"ng2-smart-page-link page-link\"\n          *ngIf=\"getPage() == page\">{{ page }} <span class=\"sr-only\">(current)</span></span>\n          <a class=\"ng2-smart-page-link page-link\" href=\"#\"\n          (click)=\"paginate(page)\" *ngIf=\"getPage() != page\">{{ page }}</a>\n        </li>\n\n        <li class=\"ng2-smart-page-item page-item\"\n            [ngClass]=\"{disabled: getPage() == getLast()}\">\n          <a class=\"ng2-smart-page-link page-link page-link-next\" href=\"#\"\n             (click)=\"getPage() == getLast() ? false : next()\" aria-label=\"Next\">\n            <span aria-hidden=\"true\">&gt;</span>\n            <span class=\"sr-only\">Next</span>\n          </a>\n        </li>\n        \n        <li class=\"ng2-smart-page-item page-item\"\n        [ngClass]=\"{disabled: getPage() == getLast()}\">\n          <a class=\"ng2-smart-page-link page-link\" href=\"#\"\n          (click)=\"getPage() == getLast() ? false : paginate(getLast())\" aria-label=\"Last\">\n            <span aria-hidden=\"true\">&raquo;</span>\n            <span class=\"sr-only\">Last</span>\n          </a>\n        </li>\n      </ul>\n    </nav>\n    \n    <nav *ngIf=\"perPageSelect && perPageSelect.length > 0\" class=\"ng2-smart-pagination-per-page\">\n      <label for=\"per-page\">\n        Per Page:\n      </label>\n      <select (change)=\"onChangePerPage($event)\" [(ngModel)]=\"currentPerPage\" id=\"per-page\">\n        <option *ngFor=\"let item of perPageSelect\" [value]=\"item\">{{ item }}</option>\n      </select>\n    </nav>\n  `, isInline: true, styles: [\".ng2-smart-pagination{display:inline-flex;font-size:.875em;padding:0}.ng2-smart-pagination .sr-only{position:absolute;width:1px;height:1px;padding:0;margin:-1px;overflow:hidden;clip:rect(0,0,0,0);border:0}.ng2-smart-pagination .ng2-smart-page-item{display:inline}.ng2-smart-pagination .page-link-next,.ng2-smart-pagination .page-link-prev{font-size:10px}:host{display:flex;justify-content:space-between}:host select{margin:1rem 0 1rem 1rem}:host label{margin:1rem 0 1rem 1rem;line-height:2.5rem}\\n\"], directives: [{ type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { type: i2.NgClass, selector: \"[ngClass]\", inputs: [\"class\", \"ngClass\"] }, { type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }, { type: i1.SelectControlValueAccessor, selector: \"select:not([multiple])[formControlName],select:not([multiple])[formControl],select:not([multiple])[ngModel]\", inputs: [\"compareWith\"] }, { type: i1.NgControlStatus, selector: \"[formControlName],[ngModel],[formControl]\" }, { type: i1.NgModel, selector: \"[ngModel]:not([formControlName]):not([formControl])\", inputs: [\"name\", \"disabled\", \"ngModel\", \"ngModelOptions\"], outputs: [\"ngModelChange\"], exportAs: [\"ngModel\"] }, { type: i1.NgSelectOption, selector: \"option\", inputs: [\"ngValue\", \"value\"] }, { type: i1.ɵNgSelectMultipleOption, selector: \"option\", inputs: [\"ngValue\", \"value\"] }] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: PagerComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'ng2-smart-table-pager', template: `\n    <nav *ngIf=\"shouldShow()\" class=\"ng2-smart-pagination-nav\">\n      <ul class=\"ng2-smart-pagination pagination\">\n        <li class=\"ng2-smart-page-item page-item\" [ngClass]=\"{disabled: getPage() == 1}\">\n          <a class=\"ng2-smart-page-link page-link\" href=\"#\"\n          (click)=\"getPage() == 1 ? false : paginate(1)\" aria-label=\"First\">\n            <span aria-hidden=\"true\">&laquo;</span>\n            <span class=\"sr-only\">First</span>\n          </a>\n        </li>\n        <li class=\"ng2-smart-page-item page-item\" [ngClass]=\"{disabled: getPage() == 1}\">\n          <a class=\"ng2-smart-page-link page-link page-link-prev\" href=\"#\"\n             (click)=\"getPage() == 1 ? false : prev()\" aria-label=\"Prev\">\n            <span aria-hidden=\"true\">&lt;</span>\n            <span class=\"sr-only\">Prev</span>\n          </a>\n        </li>\n        <li class=\"ng2-smart-page-item page-item\"\n        [ngClass]=\"{active: getPage() == page}\" *ngFor=\"let page of getPages()\">\n          <span class=\"ng2-smart-page-link page-link\"\n          *ngIf=\"getPage() == page\">{{ page }} <span class=\"sr-only\">(current)</span></span>\n          <a class=\"ng2-smart-page-link page-link\" href=\"#\"\n          (click)=\"paginate(page)\" *ngIf=\"getPage() != page\">{{ page }}</a>\n        </li>\n\n        <li class=\"ng2-smart-page-item page-item\"\n            [ngClass]=\"{disabled: getPage() == getLast()}\">\n          <a class=\"ng2-smart-page-link page-link page-link-next\" href=\"#\"\n             (click)=\"getPage() == getLast() ? false : next()\" aria-label=\"Next\">\n            <span aria-hidden=\"true\">&gt;</span>\n            <span class=\"sr-only\">Next</span>\n          </a>\n        </li>\n        \n        <li class=\"ng2-smart-page-item page-item\"\n        [ngClass]=\"{disabled: getPage() == getLast()}\">\n          <a class=\"ng2-smart-page-link page-link\" href=\"#\"\n          (click)=\"getPage() == getLast() ? false : paginate(getLast())\" aria-label=\"Last\">\n            <span aria-hidden=\"true\">&raquo;</span>\n            <span class=\"sr-only\">Last</span>\n          </a>\n        </li>\n      </ul>\n    </nav>\n    \n    <nav *ngIf=\"perPageSelect && perPageSelect.length > 0\" class=\"ng2-smart-pagination-per-page\">\n      <label for=\"per-page\">\n        Per Page:\n      </label>\n      <select (change)=\"onChangePerPage($event)\" [(ngModel)]=\"currentPerPage\" id=\"per-page\">\n        <option *ngFor=\"let item of perPageSelect\" [value]=\"item\">{{ item }}</option>\n      </select>\n    </nav>\n  `, styles: [\".ng2-smart-pagination{display:inline-flex;font-size:.875em;padding:0}.ng2-smart-pagination .sr-only{position:absolute;width:1px;height:1px;padding:0;margin:-1px;overflow:hidden;clip:rect(0,0,0,0);border:0}.ng2-smart-pagination .ng2-smart-page-item{display:inline}.ng2-smart-pagination .page-link-next,.ng2-smart-pagination .page-link-prev{font-size:10px}:host{display:flex;justify-content:space-between}:host select{margin:1rem 0 1rem 1rem}:host label{margin:1rem 0 1rem 1rem;line-height:2.5rem}\\n\"] }]\n        }], propDecorators: { source: [{\n                type: Input\n            }], perPageSelect: [{\n                type: Input\n            }], changePage: [{\n                type: Output\n            }] } });\n\nclass PagerModule {\n}\nPagerModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: PagerModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nPagerModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: PagerModule, declarations: [PagerComponent], imports: [CommonModule,\n        FormsModule], exports: [PagerComponent] });\nPagerModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: PagerModule, imports: [[\n            CommonModule,\n            FormsModule,\n        ]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: PagerModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [\n                        CommonModule,\n                        FormsModule,\n                    ],\n                    declarations: [\n                        PagerComponent,\n                    ],\n                    exports: [\n                        PagerComponent,\n                    ],\n                }]\n        }] });\n\nclass TbodyCustomComponent {\n    constructor() {\n        this.custom = new EventEmitter();\n    }\n    onCustom(action, event) {\n        event.preventDefault();\n        event.stopPropagation();\n        this.custom.emit({\n            action: action.name,\n            data: this.row.getData(),\n            source: this.source\n        });\n    }\n}\nTbodyCustomComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: TbodyCustomComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\nTbodyCustomComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.3.11\", type: TbodyCustomComponent, selector: \"ng2-st-tbody-custom\", inputs: { grid: \"grid\", row: \"row\", source: \"source\" }, outputs: { custom: \"custom\" }, ngImport: i0, template: `\n      <a *ngFor=\"let action of grid.getSetting('actions.custom')\" href=\"#\"\n         class=\"ng2-smart-action ng2-smart-action-custom-custom\" \n         [innerHTML]=\"action.title\"\n         (click)=\"onCustom(action, $event)\"></a>\n        `, isInline: true, directives: [{ type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: TbodyCustomComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'ng2-st-tbody-custom',\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    template: `\n      <a *ngFor=\"let action of grid.getSetting('actions.custom')\" href=\"#\"\n         class=\"ng2-smart-action ng2-smart-action-custom-custom\" \n         [innerHTML]=\"action.title\"\n         (click)=\"onCustom(action, $event)\"></a>\n        `\n                }]\n        }], propDecorators: { grid: [{\n                type: Input\n            }], row: [{\n                type: Input\n            }], source: [{\n                type: Input\n            }], custom: [{\n                type: Output\n            }] } });\n\nclass TbodyEditDeleteComponent {\n    constructor() {\n        this.edit = new EventEmitter();\n        this.delete = new EventEmitter();\n        this.editRowSelect = new EventEmitter();\n    }\n    onEdit(event) {\n        event.preventDefault();\n        event.stopPropagation();\n        this.editRowSelect.emit(this.row);\n        if (this.grid.getSetting('mode') === 'external') {\n            this.edit.emit({\n                data: this.row.getData(),\n                source: this.source,\n            });\n        }\n        else {\n            this.grid.edit(this.row);\n        }\n    }\n    onDelete(event) {\n        event.preventDefault();\n        event.stopPropagation();\n        if (this.grid.getSetting('mode') === 'external') {\n            this.delete.emit({\n                data: this.row.getData(),\n                source: this.source,\n            });\n        }\n        else {\n            this.grid.delete(this.row, this.deleteConfirm);\n        }\n    }\n    ngOnChanges() {\n        this.isActionEdit = this.grid.getSetting('actions.edit');\n        this.isActionDelete = this.grid.getSetting('actions.delete');\n        this.editRowButtonContent = this.grid.getSetting('edit.editButtonContent');\n        this.deleteRowButtonContent = this.grid.getSetting('delete.deleteButtonContent');\n    }\n}\nTbodyEditDeleteComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: TbodyEditDeleteComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\nTbodyEditDeleteComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.3.11\", type: TbodyEditDeleteComponent, selector: \"ng2-st-tbody-edit-delete\", inputs: { grid: \"grid\", row: \"row\", source: \"source\", deleteConfirm: \"deleteConfirm\", editConfirm: \"editConfirm\" }, outputs: { edit: \"edit\", delete: \"delete\", editRowSelect: \"editRowSelect\" }, usesOnChanges: true, ngImport: i0, template: `\n    <a href=\"#\" *ngIf=\"isActionEdit\" class=\"ng2-smart-action ng2-smart-action-edit-edit\"\n        [innerHTML]=\"editRowButtonContent\" (click)=\"onEdit($event)\"></a>\n    <a href=\"#\" *ngIf=\"isActionDelete\" class=\"ng2-smart-action ng2-smart-action-delete-delete\"\n        [innerHTML]=\"deleteRowButtonContent\" (click)=\"onDelete($event)\"></a>\n  `, isInline: true, directives: [{ type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: TbodyEditDeleteComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'ng2-st-tbody-edit-delete',\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    template: `\n    <a href=\"#\" *ngIf=\"isActionEdit\" class=\"ng2-smart-action ng2-smart-action-edit-edit\"\n        [innerHTML]=\"editRowButtonContent\" (click)=\"onEdit($event)\"></a>\n    <a href=\"#\" *ngIf=\"isActionDelete\" class=\"ng2-smart-action ng2-smart-action-delete-delete\"\n        [innerHTML]=\"deleteRowButtonContent\" (click)=\"onDelete($event)\"></a>\n  `,\n                }]\n        }], propDecorators: { grid: [{\n                type: Input\n            }], row: [{\n                type: Input\n            }], source: [{\n                type: Input\n            }], deleteConfirm: [{\n                type: Input\n            }], editConfirm: [{\n                type: Input\n            }], edit: [{\n                type: Output\n            }], delete: [{\n                type: Output\n            }], editRowSelect: [{\n                type: Output\n            }] } });\n\nclass TbodyCreateCancelComponent {\n    onSave(event) {\n        event.preventDefault();\n        event.stopPropagation();\n        this.grid.save(this.row, this.editConfirm);\n    }\n    onCancelEdit(event) {\n        event.preventDefault();\n        event.stopPropagation();\n        this.row.isInEditing = false;\n    }\n    ngOnChanges() {\n        this.saveButtonContent = this.grid.getSetting('edit.saveButtonContent');\n        this.cancelButtonContent = this.grid.getSetting('edit.cancelButtonContent');\n    }\n}\nTbodyCreateCancelComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: TbodyCreateCancelComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\nTbodyCreateCancelComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.3.11\", type: TbodyCreateCancelComponent, selector: \"ng2-st-tbody-create-cancel\", inputs: { grid: \"grid\", row: \"row\", editConfirm: \"editConfirm\" }, usesOnChanges: true, ngImport: i0, template: `\n    <a href=\"#\" class=\"ng2-smart-action ng2-smart-action-edit-save\"\n        [innerHTML]=\"saveButtonContent\" (click)=\"onSave($event)\"></a>\n    <a href=\"#\" class=\"ng2-smart-action ng2-smart-action-edit-cancel\"\n        [innerHTML]=\"cancelButtonContent\" (click)=\"onCancelEdit($event)\"></a>\n  `, isInline: true });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: TbodyCreateCancelComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'ng2-st-tbody-create-cancel',\n                    template: `\n    <a href=\"#\" class=\"ng2-smart-action ng2-smart-action-edit-save\"\n        [innerHTML]=\"saveButtonContent\" (click)=\"onSave($event)\"></a>\n    <a href=\"#\" class=\"ng2-smart-action ng2-smart-action-edit-cancel\"\n        [innerHTML]=\"cancelButtonContent\" (click)=\"onCancelEdit($event)\"></a>\n  `,\n                }]\n        }], propDecorators: { grid: [{\n                type: Input\n            }], row: [{\n                type: Input\n            }], editConfirm: [{\n                type: Input\n            }] } });\n\nclass Ng2SmartTableTbodyComponent {\n    constructor() {\n        this.save = new EventEmitter();\n        this.cancel = new EventEmitter();\n        this.edit = new EventEmitter();\n        this.delete = new EventEmitter();\n        this.custom = new EventEmitter();\n        this.edited = new EventEmitter();\n        this.userSelectRow = new EventEmitter();\n        this.editRowSelect = new EventEmitter();\n        this.multipleSelectRow = new EventEmitter();\n        this.rowHover = new EventEmitter();\n    }\n    get tableColumnsCount() {\n        const actionColumns = this.isActionAdd || this.isActionEdit || this.isActionDelete ? 1 : 0;\n        return this.grid.getColumns().length + actionColumns;\n    }\n    ngOnChanges() {\n        this.isMultiSelectVisible = this.grid.isMultiSelectVisible();\n        this.showActionColumnLeft = this.grid.showActionColumn('left');\n        this.mode = this.grid.getSetting('mode');\n        this.editInputClass = this.grid.getSetting('edit.inputClass');\n        this.showActionColumnRight = this.grid.showActionColumn('right');\n        this.isActionAdd = this.grid.getSetting('actions.add');\n        this.isActionEdit = this.grid.getSetting('actions.edit');\n        this.isActionDelete = this.grid.getSetting('actions.delete');\n        this.noDataMessage = this.grid.getSetting('noDataMessage');\n    }\n    getVisibleCells(cells) {\n        return (cells || []).filter((cell) => !cell.getColumn().hide);\n    }\n}\nNg2SmartTableTbodyComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: Ng2SmartTableTbodyComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\nNg2SmartTableTbodyComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.3.11\", type: Ng2SmartTableTbodyComponent, selector: \"[ng2-st-tbody]\", inputs: { grid: \"grid\", source: \"source\", deleteConfirm: \"deleteConfirm\", editConfirm: \"editConfirm\", rowClassFunction: \"rowClassFunction\" }, outputs: { save: \"save\", cancel: \"cancel\", edit: \"edit\", delete: \"delete\", custom: \"custom\", edited: \"edited\", userSelectRow: \"userSelectRow\", editRowSelect: \"editRowSelect\", multipleSelectRow: \"multipleSelectRow\", rowHover: \"rowHover\" }, usesOnChanges: true, ngImport: i0, template: \"<tr *ngFor=\\\"let row of grid.getRows()\\\" (click)=\\\"userSelectRow.emit(row)\\\" (mouseover)=\\\"rowHover.emit(row)\\\" class=\\\"ng2-smart-row\\\" [className]=\\\"rowClassFunction(row)\\\" [ngClass]=\\\"{selected: row.isSelected}\\\">\\n  <td *ngIf=\\\"isMultiSelectVisible\\\" class=\\\"ng2-smart-actions ng2-smart-action-multiple-select\\\" (click)=\\\"multipleSelectRow.emit(row)\\\">\\n    <input type=\\\"checkbox\\\" class=\\\"form-control\\\" [ngModel]=\\\"row.isSelected\\\">\\n  </td>\\n  <td *ngIf=\\\"!row.isInEditing && showActionColumnLeft\\\" class=\\\"ng2-smart-actions\\\">\\n    <ng2-st-tbody-custom [grid]=\\\"grid\\\" (custom)=\\\"custom.emit($event)\\\" [row]=\\\"row\\\" [source]=\\\"source\\\"></ng2-st-tbody-custom>\\n\\n    <ng2-st-tbody-edit-delete [grid]=\\\"grid\\\"\\n                              [deleteConfirm]=\\\"deleteConfirm\\\"\\n                              [editConfirm]=\\\"editConfirm\\\"\\n                              (edit)=\\\"edit.emit(row)\\\"\\n                              (delete)=\\\"delete.emit(row)\\\"\\n                              (editRowSelect)=\\\"editRowSelect.emit($event)\\\"\\n                              [row]=\\\"row\\\"\\n                              [source]=\\\"source\\\">\\n    </ng2-st-tbody-edit-delete>\\n  </td>\\n   <td *ngIf=\\\"row.isInEditing && showActionColumnLeft\\\"  class=\\\"ng2-smart-actions\\\">\\n    <ng2-st-tbody-create-cancel [grid]=\\\"grid\\\" [row]=\\\"row\\\" [editConfirm]=\\\"editConfirm\\\"></ng2-st-tbody-create-cancel>\\n  </td>\\n  <td *ngFor=\\\"let cell of getVisibleCells(row.cells)\\\">\\n    <ng2-smart-table-cell [cell]=\\\"cell\\\"\\n                          [grid]=\\\"grid\\\"\\n                          [row]=\\\"row\\\"\\n                          [isNew]=\\\"false\\\"\\n                          [mode]=\\\"mode\\\"\\n                          [editConfirm]=\\\"editConfirm\\\"\\n                          [inputClass]=\\\"editInputClass\\\"\\n                          [isInEditing]=\\\"row.isInEditing\\\">\\n    </ng2-smart-table-cell>\\n  </td>\\n\\n  <td *ngIf=\\\"row.isInEditing && showActionColumnRight\\\"  class=\\\"ng2-smart-actions\\\">\\n    <ng2-st-tbody-create-cancel [grid]=\\\"grid\\\" [row]=\\\"row\\\" [editConfirm]=\\\"editConfirm\\\"></ng2-st-tbody-create-cancel>\\n  </td>\\n\\n  <td *ngIf=\\\"!row.isInEditing && showActionColumnRight\\\" class=\\\"ng2-smart-actions\\\">\\n    <ng2-st-tbody-custom [grid]=\\\"grid\\\" (custom)=\\\"custom.emit($event)\\\" [row]=\\\"row\\\" [source]=\\\"source\\\"></ng2-st-tbody-custom>\\n\\n    <ng2-st-tbody-edit-delete [grid]=\\\"grid\\\"\\n                              [deleteConfirm]=\\\"deleteConfirm\\\"\\n                              [editConfirm]=\\\"editConfirm\\\"\\n                              [row]=\\\"row\\\"\\n                              [source]=\\\"source\\\"\\n                              (edit)=\\\"edit.emit(row)\\\"\\n                              (delete)=\\\"delete.emit(row)\\\"\\n                              (editRowSelect)=\\\"editRowSelect.emit($event)\\\">\\n    </ng2-st-tbody-edit-delete>\\n  </td>\\n</tr>\\n\\n<tr *ngIf=\\\"grid.getRows().length == 0\\\">\\n  <td [attr.colspan]=\\\"tableColumnsCount\\\">\\n    {{ noDataMessage }}\\n  </td>\\n</tr>\\n\", styles: [\":host .ng2-smart-row.selected{background:rgba(0,0,0,.05)}:host .ng2-smart-row .ng2-smart-actions.ng2-smart-action-multiple-select{text-align:center}:host ::ng-deep ng2-st-tbody-edit-delete a:first-child,:host ::ng-deep ng2-st-tbody-create-cancel a:first-child{margin-right:.25rem}\\n\"], components: [{ type: TbodyCustomComponent, selector: \"ng2-st-tbody-custom\", inputs: [\"grid\", \"row\", \"source\"], outputs: [\"custom\"] }, { type: TbodyEditDeleteComponent, selector: \"ng2-st-tbody-edit-delete\", inputs: [\"grid\", \"row\", \"source\", \"deleteConfirm\", \"editConfirm\"], outputs: [\"edit\", \"delete\", \"editRowSelect\"] }, { type: TbodyCreateCancelComponent, selector: \"ng2-st-tbody-create-cancel\", inputs: [\"grid\", \"row\", \"editConfirm\"] }, { type: CellComponent, selector: \"ng2-smart-table-cell\", inputs: [\"grid\", \"row\", \"editConfirm\", \"createConfirm\", \"isNew\", \"cell\", \"inputClass\", \"mode\", \"isInEditing\"], outputs: [\"edited\"] }], directives: [{ type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }, { type: i2.NgClass, selector: \"[ngClass]\", inputs: [\"class\", \"ngClass\"] }, { type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { type: i1.CheckboxControlValueAccessor, selector: \"input[type=checkbox][formControlName],input[type=checkbox][formControl],input[type=checkbox][ngModel]\" }, { type: i1.NgControlStatus, selector: \"[formControlName],[ngModel],[formControl]\" }, { type: i1.NgModel, selector: \"[ngModel]:not([formControlName]):not([formControl])\", inputs: [\"name\", \"disabled\", \"ngModel\", \"ngModelOptions\"], outputs: [\"ngModelChange\"], exportAs: [\"ngModel\"] }] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: Ng2SmartTableTbodyComponent, decorators: [{\n            type: Component,\n            args: [{ selector: '[ng2-st-tbody]', template: \"<tr *ngFor=\\\"let row of grid.getRows()\\\" (click)=\\\"userSelectRow.emit(row)\\\" (mouseover)=\\\"rowHover.emit(row)\\\" class=\\\"ng2-smart-row\\\" [className]=\\\"rowClassFunction(row)\\\" [ngClass]=\\\"{selected: row.isSelected}\\\">\\n  <td *ngIf=\\\"isMultiSelectVisible\\\" class=\\\"ng2-smart-actions ng2-smart-action-multiple-select\\\" (click)=\\\"multipleSelectRow.emit(row)\\\">\\n    <input type=\\\"checkbox\\\" class=\\\"form-control\\\" [ngModel]=\\\"row.isSelected\\\">\\n  </td>\\n  <td *ngIf=\\\"!row.isInEditing && showActionColumnLeft\\\" class=\\\"ng2-smart-actions\\\">\\n    <ng2-st-tbody-custom [grid]=\\\"grid\\\" (custom)=\\\"custom.emit($event)\\\" [row]=\\\"row\\\" [source]=\\\"source\\\"></ng2-st-tbody-custom>\\n\\n    <ng2-st-tbody-edit-delete [grid]=\\\"grid\\\"\\n                              [deleteConfirm]=\\\"deleteConfirm\\\"\\n                              [editConfirm]=\\\"editConfirm\\\"\\n                              (edit)=\\\"edit.emit(row)\\\"\\n                              (delete)=\\\"delete.emit(row)\\\"\\n                              (editRowSelect)=\\\"editRowSelect.emit($event)\\\"\\n                              [row]=\\\"row\\\"\\n                              [source]=\\\"source\\\">\\n    </ng2-st-tbody-edit-delete>\\n  </td>\\n   <td *ngIf=\\\"row.isInEditing && showActionColumnLeft\\\"  class=\\\"ng2-smart-actions\\\">\\n    <ng2-st-tbody-create-cancel [grid]=\\\"grid\\\" [row]=\\\"row\\\" [editConfirm]=\\\"editConfirm\\\"></ng2-st-tbody-create-cancel>\\n  </td>\\n  <td *ngFor=\\\"let cell of getVisibleCells(row.cells)\\\">\\n    <ng2-smart-table-cell [cell]=\\\"cell\\\"\\n                          [grid]=\\\"grid\\\"\\n                          [row]=\\\"row\\\"\\n                          [isNew]=\\\"false\\\"\\n                          [mode]=\\\"mode\\\"\\n                          [editConfirm]=\\\"editConfirm\\\"\\n                          [inputClass]=\\\"editInputClass\\\"\\n                          [isInEditing]=\\\"row.isInEditing\\\">\\n    </ng2-smart-table-cell>\\n  </td>\\n\\n  <td *ngIf=\\\"row.isInEditing && showActionColumnRight\\\"  class=\\\"ng2-smart-actions\\\">\\n    <ng2-st-tbody-create-cancel [grid]=\\\"grid\\\" [row]=\\\"row\\\" [editConfirm]=\\\"editConfirm\\\"></ng2-st-tbody-create-cancel>\\n  </td>\\n\\n  <td *ngIf=\\\"!row.isInEditing && showActionColumnRight\\\" class=\\\"ng2-smart-actions\\\">\\n    <ng2-st-tbody-custom [grid]=\\\"grid\\\" (custom)=\\\"custom.emit($event)\\\" [row]=\\\"row\\\" [source]=\\\"source\\\"></ng2-st-tbody-custom>\\n\\n    <ng2-st-tbody-edit-delete [grid]=\\\"grid\\\"\\n                              [deleteConfirm]=\\\"deleteConfirm\\\"\\n                              [editConfirm]=\\\"editConfirm\\\"\\n                              [row]=\\\"row\\\"\\n                              [source]=\\\"source\\\"\\n                              (edit)=\\\"edit.emit(row)\\\"\\n                              (delete)=\\\"delete.emit(row)\\\"\\n                              (editRowSelect)=\\\"editRowSelect.emit($event)\\\">\\n    </ng2-st-tbody-edit-delete>\\n  </td>\\n</tr>\\n\\n<tr *ngIf=\\\"grid.getRows().length == 0\\\">\\n  <td [attr.colspan]=\\\"tableColumnsCount\\\">\\n    {{ noDataMessage }}\\n  </td>\\n</tr>\\n\", styles: [\":host .ng2-smart-row.selected{background:rgba(0,0,0,.05)}:host .ng2-smart-row .ng2-smart-actions.ng2-smart-action-multiple-select{text-align:center}:host ::ng-deep ng2-st-tbody-edit-delete a:first-child,:host ::ng-deep ng2-st-tbody-create-cancel a:first-child{margin-right:.25rem}\\n\"] }]\n        }], propDecorators: { grid: [{\n                type: Input\n            }], source: [{\n                type: Input\n            }], deleteConfirm: [{\n                type: Input\n            }], editConfirm: [{\n                type: Input\n            }], rowClassFunction: [{\n                type: Input\n            }], save: [{\n                type: Output\n            }], cancel: [{\n                type: Output\n            }], edit: [{\n                type: Output\n            }], delete: [{\n                type: Output\n            }], custom: [{\n                type: Output\n            }], edited: [{\n                type: Output\n            }], userSelectRow: [{\n                type: Output\n            }], editRowSelect: [{\n                type: Output\n            }], multipleSelectRow: [{\n                type: Output\n            }], rowHover: [{\n                type: Output\n            }] } });\n\nconst TBODY_COMPONENTS = [\n    TbodyCreateCancelComponent,\n    TbodyEditDeleteComponent,\n    TbodyCustomComponent,\n    Ng2SmartTableTbodyComponent\n];\nclass TBodyModule {\n}\nTBodyModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: TBodyModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nTBodyModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: TBodyModule, declarations: [TbodyCreateCancelComponent,\n        TbodyEditDeleteComponent,\n        TbodyCustomComponent,\n        Ng2SmartTableTbodyComponent], imports: [CommonModule,\n        FormsModule,\n        CellModule], exports: [TbodyCreateCancelComponent,\n        TbodyEditDeleteComponent,\n        TbodyCustomComponent,\n        Ng2SmartTableTbodyComponent] });\nTBodyModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: TBodyModule, imports: [[\n            CommonModule,\n            FormsModule,\n            CellModule,\n        ]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: TBodyModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [\n                        CommonModule,\n                        FormsModule,\n                        CellModule,\n                    ],\n                    declarations: [\n                        ...TBODY_COMPONENTS,\n                    ],\n                    exports: [\n                        ...TBODY_COMPONENTS,\n                    ],\n                }]\n        }] });\n\nclass CheckboxSelectAllComponent {\n}\nCheckboxSelectAllComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: CheckboxSelectAllComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\nCheckboxSelectAllComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.3.11\", type: CheckboxSelectAllComponent, selector: \"[ng2-st-checkbox-select-all]\", inputs: { grid: \"grid\", source: \"source\", isAllSelected: \"isAllSelected\" }, ngImport: i0, template: `\n    <input type=\"checkbox\" [ngModel]=\"isAllSelected\">\n  `, isInline: true, directives: [{ type: i1.CheckboxControlValueAccessor, selector: \"input[type=checkbox][formControlName],input[type=checkbox][formControl],input[type=checkbox][ngModel]\" }, { type: i1.NgControlStatus, selector: \"[formControlName],[ngModel],[formControl]\" }, { type: i1.NgModel, selector: \"[ngModel]:not([formControlName]):not([formControl])\", inputs: [\"name\", \"disabled\", \"ngModel\", \"ngModelOptions\"], outputs: [\"ngModelChange\"], exportAs: [\"ngModel\"] }] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: CheckboxSelectAllComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: '[ng2-st-checkbox-select-all]',\n                    template: `\n    <input type=\"checkbox\" [ngModel]=\"isAllSelected\">\n  `,\n                }]\n        }], propDecorators: { grid: [{\n                type: Input\n            }], source: [{\n                type: Input\n            }], isAllSelected: [{\n                type: Input\n            }] } });\n\nclass ActionsTitleComponent {\n    constructor(ref) {\n        this.ref = ref;\n    }\n    ngAfterViewInit() {\n        this.ref.nativeElement.classList.add('ng2-smart-actions');\n    }\n    ngOnChanges() {\n        this.actionsColumnTitle = this.grid.getSetting('actions.columnTitle');\n    }\n}\nActionsTitleComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: ActionsTitleComponent, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Component });\nActionsTitleComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.3.11\", type: ActionsTitleComponent, selector: \"[ng2-st-actions-title]\", inputs: { grid: \"grid\" }, usesOnChanges: true, ngImport: i0, template: `\n    <div class=\"ng2-smart-title\">{{ actionsColumnTitle }}</div>\n  `, isInline: true });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: ActionsTitleComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: '[ng2-st-actions-title]',\n                    template: `\n    <div class=\"ng2-smart-title\">{{ actionsColumnTitle }}</div>\n  `,\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }]; }, propDecorators: { grid: [{\n                type: Input\n            }] } });\n\nclass TitleComponent {\n    constructor() {\n        this.currentDirection = '';\n        this.sort = new EventEmitter();\n    }\n    ngOnChanges(changes) {\n        if (changes.source) {\n            if (!changes.source.firstChange) {\n                this.dataChangedSub.unsubscribe();\n            }\n            this.dataChangedSub = this.source.onChanged().subscribe((dataChanges) => {\n                const sortConf = this.source.getSort();\n                if (sortConf.length > 0 && sortConf[0]['field'] === this.column.id) {\n                    this.currentDirection = sortConf[0]['direction'];\n                }\n                else {\n                    this.currentDirection = '';\n                }\n                sortConf.forEach((fieldConf) => {\n                });\n            });\n        }\n    }\n    _sort(event) {\n        event.preventDefault();\n        this.changeSortDirection();\n        this.source.setSort([\n            {\n                field: this.column.id,\n                direction: this.currentDirection,\n                compare: this.column.getCompareFunction(),\n            },\n        ]);\n        this.sort.emit(null);\n    }\n    changeSortDirection() {\n        if (this.currentDirection) {\n            const newDirection = this.currentDirection === 'asc' ? 'desc' : 'asc';\n            this.currentDirection = newDirection;\n        }\n        else {\n            this.currentDirection = this.column.sortDirection;\n        }\n        return this.currentDirection;\n    }\n}\nTitleComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: TitleComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\nTitleComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.3.11\", type: TitleComponent, selector: \"ng2-smart-table-title\", inputs: { column: \"column\", source: \"source\" }, outputs: { sort: \"sort\" }, usesOnChanges: true, ngImport: i0, template: `\n    <a href=\"#\" *ngIf=\"column.isSortable\"\n                (click)=\"_sort($event)\"\n                class=\"ng2-smart-sort-link sort\"\n                [ngClass]=\"currentDirection\">\n      {{ column.title }}\n    </a>\n    <span class=\"ng2-smart-sort\" *ngIf=\"!column.isSortable\">{{ column.title }}</span>\n  `, isInline: true, styles: [\"a.sort.asc,a.sort.desc{font-weight:700}a.sort.asc:after,a.sort.desc:after{content:\\\"\\\";display:inline-block;width:0;height:0;border-bottom:4px solid rgba(0,0,0,.3);border-top:4px solid transparent;border-left:4px solid transparent;border-right:4px solid transparent;margin-bottom:2px}a.sort.desc:after{transform:rotate(-180deg);margin-bottom:-2px}\\n\"], directives: [{ type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { type: i2.NgClass, selector: \"[ngClass]\", inputs: [\"class\", \"ngClass\"] }] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: TitleComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'ng2-smart-table-title', template: `\n    <a href=\"#\" *ngIf=\"column.isSortable\"\n                (click)=\"_sort($event)\"\n                class=\"ng2-smart-sort-link sort\"\n                [ngClass]=\"currentDirection\">\n      {{ column.title }}\n    </a>\n    <span class=\"ng2-smart-sort\" *ngIf=\"!column.isSortable\">{{ column.title }}</span>\n  `, styles: [\"a.sort.asc,a.sort.desc{font-weight:700}a.sort.asc:after,a.sort.desc:after{content:\\\"\\\";display:inline-block;width:0;height:0;border-bottom:4px solid rgba(0,0,0,.3);border-top:4px solid transparent;border-left:4px solid transparent;border-right:4px solid transparent;margin-bottom:2px}a.sort.desc:after{transform:rotate(-180deg);margin-bottom:-2px}\\n\"] }]\n        }], propDecorators: { column: [{\n                type: Input\n            }], source: [{\n                type: Input\n            }], sort: [{\n                type: Output\n            }] } });\n\nclass ColumnTitleComponent {\n    constructor() {\n        this.sort = new EventEmitter();\n    }\n}\nColumnTitleComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: ColumnTitleComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\nColumnTitleComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.3.11\", type: ColumnTitleComponent, selector: \"ng2-st-column-title\", inputs: { column: \"column\", source: \"source\" }, outputs: { sort: \"sort\" }, ngImport: i0, template: `\n    <div class=\"ng2-smart-title\">\n      <ng2-smart-table-title [source]=\"source\" [column]=\"column\" (sort)=\"sort.emit($event)\"></ng2-smart-table-title>\n    </div>\n  `, isInline: true, components: [{ type: TitleComponent, selector: \"ng2-smart-table-title\", inputs: [\"column\", \"source\"], outputs: [\"sort\"] }] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: ColumnTitleComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'ng2-st-column-title',\n                    template: `\n    <div class=\"ng2-smart-title\">\n      <ng2-smart-table-title [source]=\"source\" [column]=\"column\" (sort)=\"sort.emit($event)\"></ng2-smart-table-title>\n    </div>\n  `,\n                }]\n        }], propDecorators: { column: [{\n                type: Input\n            }], source: [{\n                type: Input\n            }], sort: [{\n                type: Output\n            }] } });\n\nclass TheadTitlesRowComponent {\n    constructor() {\n        this.sort = new EventEmitter();\n        this.selectAllRows = new EventEmitter();\n    }\n    ngOnChanges() {\n        this.isMultiSelectVisible = this.grid.isMultiSelectVisible();\n        this.showActionColumnLeft = this.grid.showActionColumn('left');\n        this.showActionColumnRight = this.grid.showActionColumn('right');\n    }\n    getVisibleColumns(columns) {\n        return (columns || []).filter((column) => !column.hide);\n    }\n}\nTheadTitlesRowComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: TheadTitlesRowComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\nTheadTitlesRowComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.3.11\", type: TheadTitlesRowComponent, selector: \"[ng2-st-thead-titles-row]\", inputs: { grid: \"grid\", isAllSelected: \"isAllSelected\", source: \"source\" }, outputs: { sort: \"sort\", selectAllRows: \"selectAllRows\" }, usesOnChanges: true, ngImport: i0, template: `\n    <th ng2-st-checkbox-select-all *ngIf=\"isMultiSelectVisible\"\n                                   [grid]=\"grid\"\n                                   [source]=\"source\"\n                                   [isAllSelected]=\"isAllSelected\"\n                                   (click)=\"selectAllRows.emit($event)\">\n    </th>\n    <th ng2-st-actions-title *ngIf=\"showActionColumnLeft\" [grid]=\"grid\"></th>\n    <th *ngFor=\"let column of getVisibleColumns(grid.getColumns())\"\n        class=\"ng2-smart-th {{ column.id }}\"\n        [ngClass]=\"column.class\"\n        [style.width]=\"column.width\">\n      <ng2-st-column-title [source]=\"source\" [column]=\"column\" (sort)=\"sort.emit($event)\"></ng2-st-column-title>\n    </th>\n    <th ng2-st-actions-title *ngIf=\"showActionColumnRight\" [grid]=\"grid\"></th>\n  `, isInline: true, components: [{ type: CheckboxSelectAllComponent, selector: \"[ng2-st-checkbox-select-all]\", inputs: [\"grid\", \"source\", \"isAllSelected\"] }, { type: ActionsTitleComponent, selector: \"[ng2-st-actions-title]\", inputs: [\"grid\"] }, { type: ColumnTitleComponent, selector: \"ng2-st-column-title\", inputs: [\"column\", \"source\"], outputs: [\"sort\"] }], directives: [{ type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }, { type: i2.NgClass, selector: \"[ngClass]\", inputs: [\"class\", \"ngClass\"] }] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: TheadTitlesRowComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: '[ng2-st-thead-titles-row]',\n                    template: `\n    <th ng2-st-checkbox-select-all *ngIf=\"isMultiSelectVisible\"\n                                   [grid]=\"grid\"\n                                   [source]=\"source\"\n                                   [isAllSelected]=\"isAllSelected\"\n                                   (click)=\"selectAllRows.emit($event)\">\n    </th>\n    <th ng2-st-actions-title *ngIf=\"showActionColumnLeft\" [grid]=\"grid\"></th>\n    <th *ngFor=\"let column of getVisibleColumns(grid.getColumns())\"\n        class=\"ng2-smart-th {{ column.id }}\"\n        [ngClass]=\"column.class\"\n        [style.width]=\"column.width\">\n      <ng2-st-column-title [source]=\"source\" [column]=\"column\" (sort)=\"sort.emit($event)\"></ng2-st-column-title>\n    </th>\n    <th ng2-st-actions-title *ngIf=\"showActionColumnRight\" [grid]=\"grid\"></th>\n  `,\n                }]\n        }], propDecorators: { grid: [{\n                type: Input\n            }], isAllSelected: [{\n                type: Input\n            }], source: [{\n                type: Input\n            }], sort: [{\n                type: Output\n            }], selectAllRows: [{\n                type: Output\n            }] } });\n\nclass AddButtonComponent {\n    constructor(ref) {\n        this.ref = ref;\n        this.create = new EventEmitter();\n    }\n    ngAfterViewInit() {\n        this.ref.nativeElement.classList.add('ng2-smart-actions-title', 'ng2-smart-actions-title-add');\n    }\n    ngOnChanges() {\n        this.isActionAdd = this.grid.getSetting('actions.add');\n        this.addNewButtonContent = this.grid.getSetting('add.addButtonContent');\n    }\n    onAdd(event) {\n        event.preventDefault();\n        event.stopPropagation();\n        if (this.grid.getSetting('mode') === 'external') {\n            this.create.emit({\n                source: this.source,\n            });\n        }\n        else {\n            this.grid.createFormShown = true;\n        }\n    }\n}\nAddButtonComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: AddButtonComponent, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Component });\nAddButtonComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.3.11\", type: AddButtonComponent, selector: \"[ng2-st-add-button]\", inputs: { grid: \"grid\", source: \"source\" }, outputs: { create: \"create\" }, usesOnChanges: true, ngImport: i0, template: `\n    <a *ngIf=\"isActionAdd\" href=\"#\" class=\"ng2-smart-action ng2-smart-action-add-add\"\n        [innerHTML]=\"addNewButtonContent\" (click)=\"onAdd($event)\"></a>\n  `, isInline: true, directives: [{ type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: AddButtonComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: '[ng2-st-add-button]',\n                    template: `\n    <a *ngIf=\"isActionAdd\" href=\"#\" class=\"ng2-smart-action ng2-smart-action-add-add\"\n        [innerHTML]=\"addNewButtonContent\" (click)=\"onAdd($event)\"></a>\n  `,\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }]; }, propDecorators: { grid: [{\n                type: Input\n            }], source: [{\n                type: Input\n            }], create: [{\n                type: Output\n            }] } });\n\nclass TheadFitlersRowComponent {\n    constructor() {\n        this.create = new EventEmitter();\n        this.filter = new EventEmitter();\n    }\n    ngOnChanges() {\n        this.isMultiSelectVisible = this.grid.isMultiSelectVisible();\n        this.showActionColumnLeft = this.grid.showActionColumn('left');\n        this.showActionColumnRight = this.grid.showActionColumn('right');\n        this.filterInputClass = this.grid.getSetting('filter.inputClass');\n    }\n    getVisibleColumns(columns) {\n        return (columns || []).filter((column) => !column.hide);\n    }\n}\nTheadFitlersRowComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: TheadFitlersRowComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\nTheadFitlersRowComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.3.11\", type: TheadFitlersRowComponent, selector: \"[ng2-st-thead-filters-row]\", inputs: { grid: \"grid\", source: \"source\" }, outputs: { create: \"create\", filter: \"filter\" }, usesOnChanges: true, ngImport: i0, template: `\n    <th *ngIf=\"isMultiSelectVisible\"></th>\n    <th ng2-st-add-button *ngIf=\"showActionColumnLeft\"\n                          [grid]=\"grid\"\n                          (create)=\"create.emit($event)\">\n    </th>\n    <th *ngFor=\"let column of getVisibleColumns(grid.getColumns())\" class=\"ng2-smart-th {{ column.id }}\">\n      <ng2-smart-table-filter [source]=\"source\"\n                              [column]=\"column\"\n                              [inputClass]=\"filterInputClass\"\n                              (filter)=\"filter.emit($event)\">\n      </ng2-smart-table-filter>\n    </th>\n    <th ng2-st-add-button *ngIf=\"showActionColumnRight\"\n                          [grid]=\"grid\"\n                          [source]=\"source\"\n                          (create)=\"create.emit($event)\">\n    </th>\n  `, isInline: true, components: [{ type: AddButtonComponent, selector: \"[ng2-st-add-button]\", inputs: [\"grid\", \"source\"], outputs: [\"create\"] }, { type: FilterComponent, selector: \"ng2-smart-table-filter\" }], directives: [{ type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: TheadFitlersRowComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: '[ng2-st-thead-filters-row]',\n                    template: `\n    <th *ngIf=\"isMultiSelectVisible\"></th>\n    <th ng2-st-add-button *ngIf=\"showActionColumnLeft\"\n                          [grid]=\"grid\"\n                          (create)=\"create.emit($event)\">\n    </th>\n    <th *ngFor=\"let column of getVisibleColumns(grid.getColumns())\" class=\"ng2-smart-th {{ column.id }}\">\n      <ng2-smart-table-filter [source]=\"source\"\n                              [column]=\"column\"\n                              [inputClass]=\"filterInputClass\"\n                              (filter)=\"filter.emit($event)\">\n      </ng2-smart-table-filter>\n    </th>\n    <th ng2-st-add-button *ngIf=\"showActionColumnRight\"\n                          [grid]=\"grid\"\n                          [source]=\"source\"\n                          (create)=\"create.emit($event)\">\n    </th>\n  `,\n                }]\n        }], propDecorators: { grid: [{\n                type: Input\n            }], source: [{\n                type: Input\n            }], create: [{\n                type: Output\n            }], filter: [{\n                type: Output\n            }] } });\n\nclass ActionsComponent {\n    constructor() {\n        this.create = new EventEmitter();\n    }\n    ngOnChanges() {\n        this.createButtonContent = this.grid.getSetting('add.createButtonContent');\n        this.cancelButtonContent = this.grid.getSetting('add.cancelButtonContent');\n    }\n}\nActionsComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: ActionsComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\nActionsComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.3.11\", type: ActionsComponent, selector: \"ng2-st-actions\", inputs: { grid: \"grid\" }, outputs: { create: \"create\" }, usesOnChanges: true, ngImport: i0, template: `\n    <a href=\"#\" class=\"ng2-smart-action ng2-smart-action-add-create\"\n        [innerHTML]=\"createButtonContent\"\n        (click)=\"$event.preventDefault();create.emit($event)\"></a>\n    <a href=\"#\" class=\"ng2-smart-action ng2-smart-action-add-cancel\"\n        [innerHTML]=\"cancelButtonContent\"\n        (click)=\"$event.preventDefault();grid.createFormShown = false;\"></a>\n  `, isInline: true });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: ActionsComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'ng2-st-actions',\n                    template: `\n    <a href=\"#\" class=\"ng2-smart-action ng2-smart-action-add-create\"\n        [innerHTML]=\"createButtonContent\"\n        (click)=\"$event.preventDefault();create.emit($event)\"></a>\n    <a href=\"#\" class=\"ng2-smart-action ng2-smart-action-add-cancel\"\n        [innerHTML]=\"cancelButtonContent\"\n        (click)=\"$event.preventDefault();grid.createFormShown = false;\"></a>\n  `,\n                }]\n        }], propDecorators: { grid: [{\n                type: Input\n            }], create: [{\n                type: Output\n            }] } });\n\nclass TheadFormRowComponent {\n    constructor() {\n        this.create = new EventEmitter();\n    }\n    onCreate(event) {\n        event.stopPropagation();\n        this.grid.create(this.grid.getNewRow(), this.createConfirm);\n    }\n    ngOnChanges() {\n        this.isMultiSelectVisible = this.grid.isMultiSelectVisible();\n        this.showActionColumnLeft = this.grid.showActionColumn('left');\n        this.showActionColumnRight = this.grid.showActionColumn('right');\n        this.addInputClass = this.grid.getSetting('add.inputClass');\n    }\n    getVisibleCells(cells) {\n        return (cells || []).filter((cell) => !cell.getColumn().hide);\n    }\n}\nTheadFormRowComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: TheadFormRowComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\nTheadFormRowComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.3.11\", type: TheadFormRowComponent, selector: \"[ng2-st-thead-form-row]\", inputs: { grid: \"grid\", row: \"row\", createConfirm: \"createConfirm\" }, outputs: { create: \"create\" }, usesOnChanges: true, ngImport: i0, template: `\n      <td *ngIf=\"\"></td>\n      <td  *ngIf=\"showActionColumnLeft\"  class=\"ng2-smart-actions\">\n        <ng2-st-actions [grid]=\"grid\" (create)=\"onCreate($event)\"></ng2-st-actions>\n      </td>\n      <td *ngFor=\"let cell of getVisibleCells(grid.getNewRow().getCells())\">\n        <ng2-smart-table-cell [cell]=\"cell\"\n                              [grid]=\"grid\"\n                              [isNew]=\"true\"\n                              [createConfirm]=\"createConfirm\"\n                              [inputClass]=\"addInputClass\"\n                              [isInEditing]=\"grid.getNewRow().isInEditing\"\n                              (edited)=\"onCreate($event)\">\n        </ng2-smart-table-cell>\n      </td>\n      <td  *ngIf=\"showActionColumnRight\"  class=\"ng2-smart-actions\">\n        <ng2-st-actions [grid]=\"grid\" (create)=\"onCreate($event)\"></ng2-st-actions>\n      </td>\n  `, isInline: true, components: [{ type: ActionsComponent, selector: \"ng2-st-actions\", inputs: [\"grid\"], outputs: [\"create\"] }, { type: CellComponent, selector: \"ng2-smart-table-cell\", inputs: [\"grid\", \"row\", \"editConfirm\", \"createConfirm\", \"isNew\", \"cell\", \"inputClass\", \"mode\", \"isInEditing\"], outputs: [\"edited\"] }], directives: [{ type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: TheadFormRowComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: '[ng2-st-thead-form-row]',\n                    template: `\n      <td *ngIf=\"\"></td>\n      <td  *ngIf=\"showActionColumnLeft\"  class=\"ng2-smart-actions\">\n        <ng2-st-actions [grid]=\"grid\" (create)=\"onCreate($event)\"></ng2-st-actions>\n      </td>\n      <td *ngFor=\"let cell of getVisibleCells(grid.getNewRow().getCells())\">\n        <ng2-smart-table-cell [cell]=\"cell\"\n                              [grid]=\"grid\"\n                              [isNew]=\"true\"\n                              [createConfirm]=\"createConfirm\"\n                              [inputClass]=\"addInputClass\"\n                              [isInEditing]=\"grid.getNewRow().isInEditing\"\n                              (edited)=\"onCreate($event)\">\n        </ng2-smart-table-cell>\n      </td>\n      <td  *ngIf=\"showActionColumnRight\"  class=\"ng2-smart-actions\">\n        <ng2-st-actions [grid]=\"grid\" (create)=\"onCreate($event)\"></ng2-st-actions>\n      </td>\n  `,\n                }]\n        }], propDecorators: { grid: [{\n                type: Input\n            }], row: [{\n                type: Input\n            }], createConfirm: [{\n                type: Input\n            }], create: [{\n                type: Output\n            }] } });\n\nclass Ng2SmartTableTheadComponent {\n    constructor() {\n        this.sort = new EventEmitter();\n        this.selectAllRows = new EventEmitter();\n        this.create = new EventEmitter();\n        this.filter = new EventEmitter();\n    }\n    ngOnChanges() {\n        this.isHideHeader = this.grid.getSetting('hideHeader');\n        this.isHideSubHeader = this.grid.getSetting('hideSubHeader');\n    }\n}\nNg2SmartTableTheadComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: Ng2SmartTableTheadComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\nNg2SmartTableTheadComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.3.11\", type: Ng2SmartTableTheadComponent, selector: \"[ng2-st-thead]\", inputs: { grid: \"grid\", source: \"source\", isAllSelected: \"isAllSelected\", createConfirm: \"createConfirm\" }, outputs: { sort: \"sort\", selectAllRows: \"selectAllRows\", create: \"create\", filter: \"filter\" }, usesOnChanges: true, ngImport: i0, template: \"<tr ng2-st-thead-titles-row *ngIf=\\\"!isHideHeader\\\"\\n                            class=\\\"ng2-smart-titles\\\"\\n                            [grid]=\\\"grid\\\"\\n                            [isAllSelected]=\\\"isAllSelected\\\"\\n                            [source]=\\\"source\\\"\\n                            (sort)=\\\"sort.emit($event)\\\"\\n                            (selectAllRows)=\\\"selectAllRows.emit($event)\\\">\\n</tr>\\n\\n<tr ng2-st-thead-filters-row *ngIf=\\\"!isHideSubHeader\\\"\\n                              class=\\\"ng2-smart-filters\\\"\\n                              [grid]=\\\"grid\\\"\\n                              [source]=\\\"source\\\"\\n                              (create)=\\\"create.emit($event)\\\"\\n                              (filter)=\\\"filter.emit($event)\\\">\\n</tr>\\n\\n<tr ng2-st-thead-form-row *ngIf=\\\"grid.createFormShown\\\"\\n                          [grid]=\\\"grid\\\"\\n                          [createConfirm]=\\\"createConfirm\\\">\\n</tr>\\n\", components: [{ type: TheadTitlesRowComponent, selector: \"[ng2-st-thead-titles-row]\", inputs: [\"grid\", \"isAllSelected\", \"source\"], outputs: [\"sort\", \"selectAllRows\"] }, { type: TheadFitlersRowComponent, selector: \"[ng2-st-thead-filters-row]\", inputs: [\"grid\", \"source\"], outputs: [\"create\", \"filter\"] }, { type: TheadFormRowComponent, selector: \"[ng2-st-thead-form-row]\", inputs: [\"grid\", \"row\", \"createConfirm\"], outputs: [\"create\"] }], directives: [{ type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: Ng2SmartTableTheadComponent, decorators: [{\n            type: Component,\n            args: [{ selector: '[ng2-st-thead]', template: \"<tr ng2-st-thead-titles-row *ngIf=\\\"!isHideHeader\\\"\\n                            class=\\\"ng2-smart-titles\\\"\\n                            [grid]=\\\"grid\\\"\\n                            [isAllSelected]=\\\"isAllSelected\\\"\\n                            [source]=\\\"source\\\"\\n                            (sort)=\\\"sort.emit($event)\\\"\\n                            (selectAllRows)=\\\"selectAllRows.emit($event)\\\">\\n</tr>\\n\\n<tr ng2-st-thead-filters-row *ngIf=\\\"!isHideSubHeader\\\"\\n                              class=\\\"ng2-smart-filters\\\"\\n                              [grid]=\\\"grid\\\"\\n                              [source]=\\\"source\\\"\\n                              (create)=\\\"create.emit($event)\\\"\\n                              (filter)=\\\"filter.emit($event)\\\">\\n</tr>\\n\\n<tr ng2-st-thead-form-row *ngIf=\\\"grid.createFormShown\\\"\\n                          [grid]=\\\"grid\\\"\\n                          [createConfirm]=\\\"createConfirm\\\">\\n</tr>\\n\" }]\n        }], propDecorators: { grid: [{\n                type: Input\n            }], source: [{\n                type: Input\n            }], isAllSelected: [{\n                type: Input\n            }], createConfirm: [{\n                type: Input\n            }], sort: [{\n                type: Output\n            }], selectAllRows: [{\n                type: Output\n            }], create: [{\n                type: Output\n            }], filter: [{\n                type: Output\n            }] } });\n\nconst THEAD_COMPONENTS = [\n    ActionsComponent,\n    ActionsTitleComponent,\n    AddButtonComponent,\n    CheckboxSelectAllComponent,\n    ColumnTitleComponent,\n    TitleComponent,\n    TheadFitlersRowComponent,\n    TheadFormRowComponent,\n    TheadTitlesRowComponent,\n    Ng2SmartTableTheadComponent,\n];\nclass THeadModule {\n}\nTHeadModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: THeadModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nTHeadModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: THeadModule, declarations: [ActionsComponent,\n        ActionsTitleComponent,\n        AddButtonComponent,\n        CheckboxSelectAllComponent,\n        ColumnTitleComponent,\n        TitleComponent,\n        TheadFitlersRowComponent,\n        TheadFormRowComponent,\n        TheadTitlesRowComponent,\n        Ng2SmartTableTheadComponent], imports: [CommonModule,\n        FormsModule,\n        FilterModule,\n        CellModule], exports: [ActionsComponent,\n        ActionsTitleComponent,\n        AddButtonComponent,\n        CheckboxSelectAllComponent,\n        ColumnTitleComponent,\n        TitleComponent,\n        TheadFitlersRowComponent,\n        TheadFormRowComponent,\n        TheadTitlesRowComponent,\n        Ng2SmartTableTheadComponent] });\nTHeadModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: THeadModule, imports: [[\n            CommonModule,\n            FormsModule,\n            FilterModule,\n            CellModule,\n        ]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: THeadModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [\n                        CommonModule,\n                        FormsModule,\n                        FilterModule,\n                        CellModule,\n                    ],\n                    declarations: [\n                        ...THEAD_COMPONENTS,\n                    ],\n                    exports: [\n                        ...THEAD_COMPONENTS,\n                    ],\n                }]\n        }] });\n\n/**\n * Extending object that entered in first argument.\n *\n * Returns extended object or false if have no target object or incorrect type.\n *\n * If you wish to clone source object (without modify it), just use empty new\n * object as first argument, like this:\n *   deepExtend({}, yourObj_1, [yourObj_N]);\n */\nconst deepExtend = function (...objects) {\n    if (arguments.length < 1 || typeof arguments[0] !== 'object') {\n        return false;\n    }\n    if (arguments.length < 2) {\n        return arguments[0];\n    }\n    const target = arguments[0];\n    // convert arguments to array and cut off target object\n    const args = Array.prototype.slice.call(arguments, 1);\n    let val, src;\n    args.forEach((obj) => {\n        // skip argument if it is array or isn't object\n        if (typeof obj !== 'object' || Array.isArray(obj)) {\n            return;\n        }\n        Object.keys(obj).forEach(function (key) {\n            src = target[key]; // source value\n            val = obj[key]; // new value\n            // recursion prevention\n            if (val === target) {\n                return;\n                /**\n                 * if new value isn't object then just overwrite by new value\n                 * instead of extending.\n                 */\n            }\n            else if (typeof val !== 'object' || val === null) {\n                target[key] = val;\n                return;\n                // just clone arrays (and recursive clone objects inside)\n            }\n            else if (Array.isArray(val)) {\n                target[key] = cloneDeep(val);\n                return;\n                // overwrite by new value if source isn't object or array\n            }\n            else if (typeof src !== 'object' || src === null || Array.isArray(src)) {\n                target[key] = deepExtend({}, val);\n                return;\n                // source value and new value is objects both, extending...\n            }\n            else {\n                target[key] = deepExtend(src, val);\n                return;\n            }\n        });\n    });\n    return target;\n};\nclass Deferred {\n    constructor() {\n        this.promise = new Promise((resolve, reject) => {\n            this.resolve = resolve;\n            this.reject = reject;\n        });\n    }\n}\n// getDeepFromObject({result: {data: 1}}, 'result.data', 2); // returns 1\nfunction getDeepFromObject(object = {}, name, defaultValue) {\n    const keys = name.split('.');\n    // clone the object\n    let level = deepExtend({}, object);\n    keys.forEach((k) => {\n        if (level && typeof level[k] !== 'undefined') {\n            level = level[k];\n        }\n    });\n    return typeof level === 'undefined' ? defaultValue : level;\n}\nfunction getPageForRowIndex(index, perPage) {\n    // we need to add 1 to convert 0-based index to 1-based page number.\n    return Math.floor(index / perPage) + 1;\n}\n\nfunction prepareValue(value) { return value; }\nclass Cell {\n    constructor(value, row, column, dataSet) {\n        this.value = value;\n        this.row = row;\n        this.column = column;\n        this.dataSet = dataSet;\n        this.newValue = '';\n        this.newValue = value;\n    }\n    getColumn() {\n        return this.column;\n    }\n    getRow() {\n        return this.row;\n    }\n    getValue() {\n        const valid = this.column.getValuePrepareFunction() instanceof Function;\n        const prepare = valid ? this.column.getValuePrepareFunction() : Cell.PREPARE;\n        return prepare.call(null, this.value, this.row.getData(), this);\n    }\n    setValue(value) {\n        this.newValue = value;\n    }\n    getId() {\n        return this.getColumn().id;\n    }\n    getTitle() {\n        return this.getColumn().title;\n    }\n    isEditable() {\n        if (this.getRow().index === -1) {\n            return this.getColumn().isAddable;\n        }\n        else {\n            return this.getColumn().isEditable;\n        }\n    }\n}\nCell.PREPARE = prepareValue;\n\nclass Row {\n    constructor(index, data, _dataSet) {\n        this.index = index;\n        this.data = data;\n        this._dataSet = _dataSet;\n        this.isSelected = false;\n        this.isInEditing = false;\n        this.cells = [];\n        this.process();\n    }\n    getCell(column) {\n        return this.cells.find(el => el.getColumn() === column);\n    }\n    getCells() {\n        return this.cells;\n    }\n    getData() {\n        return this.data;\n    }\n    getIsSelected() {\n        return this.isSelected;\n    }\n    getNewData() {\n        const values = Object.assign({}, this.data);\n        this.getCells().forEach((cell) => values[cell.getColumn().id] = cell.newValue);\n        return values;\n    }\n    setData(data) {\n        this.data = data;\n        this.process();\n    }\n    process() {\n        this.cells = [];\n        this._dataSet.getColumns().forEach((column) => {\n            const cell = this.createCell(column);\n            this.cells.push(cell);\n        });\n    }\n    createCell(column) {\n        const defValue = column.settings.defaultValue ? column.settings.defaultValue : '';\n        const value = typeof this.data[column.id] === 'undefined' ? defValue : this.data[column.id];\n        return new Cell(value, this, column, this._dataSet);\n    }\n}\n\nclass Column {\n    constructor(id, settings, dataSet) {\n        this.id = id;\n        this.settings = settings;\n        this.dataSet = dataSet;\n        this.title = '';\n        this.type = '';\n        this.class = '';\n        this.width = '';\n        this.hide = false;\n        this.isSortable = false;\n        this.isEditable = true;\n        this.isAddable = true;\n        this.isFilterable = false;\n        this.sortDirection = '';\n        this.defaultSortDirection = '';\n        this.editor = { type: '', config: {}, component: null };\n        this.filter = { type: '', config: {}, component: null };\n        this.renderComponent = null;\n        this.process();\n    }\n    getOnComponentInitFunction() {\n        return this.onComponentInitFunction;\n    }\n    getCompareFunction() {\n        return this.compareFunction;\n    }\n    getValuePrepareFunction() {\n        return this.valuePrepareFunction;\n    }\n    getFilterFunction() {\n        return this.filterFunction;\n    }\n    getConfig() {\n        return this.editor && this.editor.config;\n    }\n    getFilterType() {\n        return this.filter && this.filter.type;\n    }\n    getFilterConfig() {\n        return this.filter && this.filter.config;\n    }\n    process() {\n        this.title = this.settings['title'];\n        this.class = this.settings['class'];\n        this.width = this.settings['width'];\n        this.hide = !!this.settings['hide'];\n        this.type = this.prepareType();\n        this.editor = this.settings['editor'];\n        this.filter = this.settings['filter'];\n        this.renderComponent = this.settings['renderComponent'];\n        this.isFilterable = typeof this.settings['filter'] === 'undefined' ? true : !!this.settings['filter'];\n        this.defaultSortDirection = ['asc', 'desc']\n            .indexOf(this.settings['sortDirection']) !== -1 ? this.settings['sortDirection'] : '';\n        this.isSortable = typeof this.settings['sort'] === 'undefined' ? true : !!this.settings['sort'];\n        this.isEditable = typeof this.settings['editable'] === 'undefined' ? true : !!this.settings['editable'];\n        this.isAddable = typeof this.settings['addable'] === 'undefined' ? true : !!this.settings['addable'];\n        this.sortDirection = this.prepareSortDirection();\n        this.compareFunction = this.settings['compareFunction'];\n        this.valuePrepareFunction = this.settings['valuePrepareFunction'];\n        this.filterFunction = this.settings['filterFunction'];\n        this.onComponentInitFunction = this.settings['onComponentInitFunction'];\n    }\n    prepareType() {\n        return this.settings['type'] || this.determineType();\n    }\n    prepareSortDirection() {\n        return this.settings['sort'] === 'desc' ? 'desc' : 'asc';\n    }\n    determineType() {\n        // TODO: determine type by data\n        return 'text';\n    }\n}\n\nclass DataSet {\n    constructor(data = [], columnSettings) {\n        this.columnSettings = columnSettings;\n        this.data = [];\n        this.columns = [];\n        this.rows = [];\n        this.createColumns(columnSettings);\n        this.setData(data);\n        this.createNewRow();\n    }\n    setData(data) {\n        this.data = data;\n        this.createRows();\n    }\n    getColumns() {\n        return this.columns;\n    }\n    getRows() {\n        return this.rows;\n    }\n    getFirstRow() {\n        return this.rows[0];\n    }\n    getLastRow() {\n        return this.rows[this.rows.length - 1];\n    }\n    findRowByData(data) {\n        return this.rows.find((row) => row.getData() === data);\n    }\n    deselectAll() {\n        this.rows.forEach((row) => {\n            row.isSelected = false;\n        });\n        // we need to clear selectedRow field because no one row selected\n        this.selectedRow = undefined;\n    }\n    selectRow(row) {\n        const previousIsSelected = row.isSelected;\n        this.deselectAll();\n        row.isSelected = !previousIsSelected;\n        this.selectedRow = row;\n        return this.selectedRow;\n    }\n    multipleSelectRow(row) {\n        row.isSelected = !row.isSelected;\n        this.selectedRow = row;\n        return this.selectedRow;\n    }\n    selectPreviousRow() {\n        if (this.rows.length > 0) {\n            let index = this.selectedRow ? this.selectedRow.index : 0;\n            if (index > this.rows.length - 1) {\n                index = this.rows.length - 1;\n            }\n            this.selectRow(this.rows[index]);\n            return this.selectedRow;\n        }\n    }\n    selectFirstRow() {\n        if (this.rows.length > 0) {\n            this.selectRow(this.rows[0]);\n            return this.selectedRow;\n        }\n    }\n    selectLastRow() {\n        if (this.rows.length > 0) {\n            this.selectRow(this.rows[this.rows.length - 1]);\n            return this.selectedRow;\n        }\n    }\n    selectRowByIndex(index) {\n        const rowsLength = this.rows.length;\n        if (rowsLength === 0) {\n            return;\n        }\n        if (!index) {\n            this.selectFirstRow();\n            return this.selectedRow;\n        }\n        if (index > 0 && index < rowsLength) {\n            this.selectRow(this.rows[index]);\n            return this.selectedRow;\n        }\n        // we need to deselect all rows if we got an incorrect index\n        this.deselectAll();\n    }\n    willSelectFirstRow() {\n        this.willSelect = 'first';\n    }\n    willSelectLastRow() {\n        this.willSelect = 'last';\n    }\n    select(selectedRowIndex) {\n        if (this.getRows().length === 0) {\n            return;\n        }\n        if (this.willSelect) {\n            if (this.willSelect === 'first') {\n                this.selectFirstRow();\n            }\n            if (this.willSelect === 'last') {\n                this.selectLastRow();\n            }\n            this.willSelect = '';\n        }\n        else {\n            this.selectRowByIndex(selectedRowIndex);\n        }\n        return this.selectedRow;\n    }\n    createNewRow() {\n        this.newRow = new Row(-1, {}, this);\n        this.newRow.isInEditing = true;\n    }\n    /**\n     * Create columns by mapping from the settings\n     * @param settings\n     * @private\n     */\n    createColumns(settings) {\n        for (const id in settings) {\n            if (settings.hasOwnProperty(id)) {\n                this.columns.push(new Column(id, settings[id], this));\n            }\n        }\n    }\n    /**\n     * Create rows based on current data prepared in data source\n     * @private\n     */\n    createRows() {\n        this.rows = [];\n        this.data.forEach((el, index) => {\n            this.rows.push(new Row(index, el, this));\n        });\n    }\n}\n\nclass Grid {\n    constructor(source, settings) {\n        this.createFormShown = false;\n        this.onSelectRowSource = new Subject();\n        this.onDeselectRowSource = new Subject();\n        this.setSettings(settings);\n        this.setSource(source);\n    }\n    detach() {\n        if (this.sourceOnChangedSubscription) {\n            this.sourceOnChangedSubscription.unsubscribe();\n        }\n        if (this.sourceOnUpdatedSubscription) {\n            this.sourceOnUpdatedSubscription.unsubscribe();\n        }\n    }\n    showActionColumn(position) {\n        return this.isCurrentActionsPosition(position) && this.isActionsVisible();\n    }\n    isCurrentActionsPosition(position) {\n        return position == this.getSetting('actions.position');\n    }\n    isActionsVisible() {\n        return this.getSetting('actions.add') || this.getSetting('actions.edit') || this.getSetting('actions.delete') || this.getSetting('actions.custom').length;\n    }\n    isMultiSelectVisible() {\n        return this.getSetting('selectMode') === 'multi';\n    }\n    getNewRow() {\n        return this.dataSet.newRow;\n    }\n    setSettings(settings) {\n        this.settings = settings;\n        this.dataSet = new DataSet([], this.getSetting('columns'));\n        if (this.source) {\n            this.source.refresh();\n        }\n    }\n    getDataSet() {\n        return this.dataSet;\n    }\n    setSource(source) {\n        this.source = this.prepareSource(source);\n        this.detach();\n        this.sourceOnChangedSubscription = this.source.onChanged().subscribe((changes) => this.processDataChange(changes));\n        this.sourceOnUpdatedSubscription = this.source.onUpdated().subscribe((data) => {\n            const changedRow = this.dataSet.findRowByData(data);\n            changedRow.setData(data);\n        });\n    }\n    getSetting(name, defaultValue) {\n        return getDeepFromObject(this.settings, name, defaultValue);\n    }\n    getColumns() {\n        return this.dataSet.getColumns();\n    }\n    getRows() {\n        return this.dataSet.getRows();\n    }\n    selectRow(row) {\n        this.dataSet.selectRow(row);\n    }\n    multipleSelectRow(row) {\n        this.dataSet.multipleSelectRow(row);\n    }\n    onSelectRow() {\n        return this.onSelectRowSource.asObservable();\n    }\n    onDeselectRow() {\n        return this.onDeselectRowSource.asObservable();\n    }\n    edit(row) {\n        row.isInEditing = true;\n    }\n    create(row, confirmEmitter) {\n        const deferred = new Deferred();\n        deferred.promise.then((newData) => {\n            newData = newData ? newData : row.getNewData();\n            if (deferred.resolve.skipAdd) {\n                this.createFormShown = false;\n            }\n            else {\n                this.source.prepend(newData).then(() => {\n                    this.createFormShown = false;\n                    this.dataSet.createNewRow();\n                });\n            }\n        }).catch((err) => {\n            // doing nothing\n        });\n        if (this.getSetting('add.confirmCreate')) {\n            confirmEmitter.emit({\n                newData: row.getNewData(),\n                source: this.source,\n                confirm: deferred,\n            });\n        }\n        else {\n            deferred.resolve();\n        }\n    }\n    save(row, confirmEmitter) {\n        const deferred = new Deferred();\n        deferred.promise.then((newData) => {\n            newData = newData ? newData : row.getNewData();\n            if (deferred.resolve.skipEdit) {\n                row.isInEditing = false;\n            }\n            else {\n                this.source.update(row.getData(), newData).then(() => {\n                    row.isInEditing = false;\n                });\n            }\n        }).catch((err) => {\n            // doing nothing\n        });\n        if (this.getSetting('edit.confirmSave')) {\n            confirmEmitter.emit({\n                data: row.getData(),\n                newData: row.getNewData(),\n                source: this.source,\n                confirm: deferred,\n            });\n        }\n        else {\n            deferred.resolve();\n        }\n    }\n    delete(row, confirmEmitter) {\n        const deferred = new Deferred();\n        deferred.promise.then(() => {\n            this.source.remove(row.getData());\n        }).catch((err) => {\n            // doing nothing\n        });\n        if (this.getSetting('delete.confirmDelete')) {\n            confirmEmitter.emit({\n                data: row.getData(),\n                source: this.source,\n                confirm: deferred,\n            });\n        }\n        else {\n            deferred.resolve();\n        }\n    }\n    processDataChange(changes) {\n        if (this.shouldProcessChange(changes)) {\n            this.dataSet.setData(changes['elements']);\n            if (this.getSetting('selectMode') !== 'multi') {\n                const row = this.determineRowToSelect(changes);\n                if (row) {\n                    this.onSelectRowSource.next(row);\n                }\n                else {\n                    this.onDeselectRowSource.next(null);\n                }\n            }\n        }\n    }\n    shouldProcessChange(changes) {\n        if (['filter', 'sort', 'page', 'remove', 'refresh', 'load', 'paging'].indexOf(changes['action']) !== -1) {\n            return true;\n        }\n        else if (['prepend', 'append'].indexOf(changes['action']) !== -1 && !this.getSetting('pager.display')) {\n            return true;\n        }\n        return false;\n    }\n    /**\n     * @breaking-change 1.8.0\n     * Need to add `| null` in return type\n     *\n     * TODO: move to selectable? Separate directive\n     */\n    determineRowToSelect(changes) {\n        if (['load', 'page', 'filter', 'sort', 'refresh'].indexOf(changes['action']) !== -1) {\n            return this.dataSet.select(this.getRowIndexToSelect());\n        }\n        if (this.shouldSkipSelection()) {\n            return null;\n        }\n        if (changes['action'] === 'remove') {\n            if (changes['elements'].length === 0) {\n                // we have to store which one to select as the data will be reloaded\n                this.dataSet.willSelectLastRow();\n            }\n            else {\n                return this.dataSet.selectPreviousRow();\n            }\n        }\n        if (changes['action'] === 'append') {\n            // we have to store which one to select as the data will be reloaded\n            this.dataSet.willSelectLastRow();\n        }\n        if (changes['action'] === 'add') {\n            return this.dataSet.selectFirstRow();\n        }\n        if (changes['action'] === 'update') {\n            return this.dataSet.selectFirstRow();\n        }\n        if (changes['action'] === 'prepend') {\n            // we have to store which one to select as the data will be reloaded\n            this.dataSet.willSelectFirstRow();\n        }\n        return null;\n    }\n    prepareSource(source) {\n        const initialSource = this.getInitialSort();\n        if (initialSource && initialSource['field'] && initialSource['direction']) {\n            source.setSort([initialSource], false);\n        }\n        if (this.getSetting('pager.display') === true) {\n            source.setPaging(this.getPageToSelect(source), this.getSetting('pager.perPage'), false);\n        }\n        source.refresh();\n        return source;\n    }\n    getInitialSort() {\n        const sortConf = {};\n        this.getColumns().forEach((column) => {\n            if (column.isSortable && column.defaultSortDirection) {\n                sortConf['field'] = column.id;\n                sortConf['direction'] = column.defaultSortDirection;\n                sortConf['compare'] = column.getCompareFunction();\n            }\n        });\n        return sortConf;\n    }\n    getSelectedRows() {\n        return this.dataSet.getRows()\n            .filter(r => r.isSelected);\n    }\n    selectAllRows(status) {\n        this.dataSet.getRows()\n            .forEach(r => r.isSelected = status);\n    }\n    getFirstRow() {\n        return this.dataSet.getFirstRow();\n    }\n    getLastRow() {\n        return this.dataSet.getLastRow();\n    }\n    getSelectionInfo() {\n        const switchPageToSelectedRowPage = this.getSetting('switchPageToSelectedRowPage');\n        const selectedRowIndex = Number(this.getSetting('selectedRowIndex', 0)) || 0;\n        const { perPage, page } = this.getSetting('pager');\n        return { perPage, page, selectedRowIndex, switchPageToSelectedRowPage };\n    }\n    getRowIndexToSelect() {\n        const { switchPageToSelectedRowPage, selectedRowIndex, perPage } = this.getSelectionInfo();\n        const dataAmount = this.source.count();\n        /**\n         * source - contains all table data\n         * dataSet - contains data for current page\n         * selectedRowIndex - contains index for data in all data\n         *\n         * because of that, we need to count index for a specific row in page\n         * if\n         * `switchPageToSelectedRowPage` - we need to change page automatically\n         * `selectedRowIndex < dataAmount && selectedRowIndex >= 0` - index points to existing data\n         * (if index points to non-existing data and we calculate index for current page - we will get wrong selected row.\n         *  if we return index witch not points to existing data - no line will be highlighted)\n         */\n        return (switchPageToSelectedRowPage &&\n            selectedRowIndex < dataAmount &&\n            selectedRowIndex >= 0) ?\n            selectedRowIndex % perPage :\n            selectedRowIndex;\n    }\n    getPageToSelect(source) {\n        const { switchPageToSelectedRowPage, selectedRowIndex, perPage, page } = this.getSelectionInfo();\n        let pageToSelect = Math.max(1, page);\n        if (switchPageToSelectedRowPage && selectedRowIndex >= 0) {\n            pageToSelect = getPageForRowIndex(selectedRowIndex, perPage);\n        }\n        const maxPageAmount = Math.ceil(source.count() / perPage);\n        return maxPageAmount ? Math.min(pageToSelect, maxPageAmount) : pageToSelect;\n    }\n    shouldSkipSelection() {\n        /**\n         * For backward compatibility when using `selectedRowIndex` with non-number values - ignored.\n         *\n         * Therefore, in order to select a row after some changes,\n         * the `selectedRowIndex` value must be invalid or >= 0 (< 0 means that no row is selected).\n         *\n         * `Number(value)` returns `NaN` on all invalid cases, and comparisons with `NaN` always return `false`.\n         *\n         * !!! We should skip a row only in cases when `selectedRowIndex` < 0\n         * because when < 0 all lines must be deselected\n         */\n        const selectedRowIndex = Number(this.getSetting('selectedRowIndex'));\n        return selectedRowIndex < 0;\n    }\n}\n\nclass DataSource {\n    constructor() {\n        this.onChangedSource = new Subject();\n        this.onAddedSource = new Subject();\n        this.onUpdatedSource = new Subject();\n        this.onRemovedSource = new Subject();\n    }\n    refresh() {\n        this.emitOnChanged('refresh');\n    }\n    load(data) {\n        this.emitOnChanged('load');\n        return Promise.resolve();\n    }\n    onChanged() {\n        return this.onChangedSource.asObservable();\n    }\n    onAdded() {\n        return this.onAddedSource.asObservable();\n    }\n    onUpdated() {\n        return this.onUpdatedSource.asObservable();\n    }\n    onRemoved() {\n        return this.onRemovedSource.asObservable();\n    }\n    prepend(element) {\n        this.emitOnAdded(element);\n        this.emitOnChanged('prepend');\n        return Promise.resolve();\n    }\n    append(element) {\n        this.emitOnAdded(element);\n        this.emitOnChanged('append');\n        return Promise.resolve();\n    }\n    add(element) {\n        this.emitOnAdded(element);\n        this.emitOnChanged('add');\n        return Promise.resolve();\n    }\n    remove(element) {\n        this.emitOnRemoved(element);\n        this.emitOnChanged('remove');\n        return Promise.resolve();\n    }\n    update(element, values) {\n        this.emitOnUpdated(element);\n        this.emitOnChanged('update');\n        return Promise.resolve();\n    }\n    empty() {\n        this.emitOnChanged('empty');\n        return Promise.resolve();\n    }\n    setSort(conf, doEmit) {\n        if (doEmit) {\n            this.emitOnChanged('sort');\n        }\n    }\n    setFilter(conf, andOperator, doEmit) {\n        if (doEmit) {\n            this.emitOnChanged('filter');\n        }\n    }\n    addFilter(fieldConf, andOperator, doEmit) {\n        if (doEmit) {\n            this.emitOnChanged('filter');\n        }\n    }\n    setPaging(page, perPage, doEmit) {\n        if (doEmit) {\n            this.emitOnChanged('paging');\n        }\n    }\n    setPage(page, doEmit) {\n        if (doEmit) {\n            this.emitOnChanged('page');\n        }\n    }\n    emitOnRemoved(element) {\n        this.onRemovedSource.next(element);\n    }\n    emitOnUpdated(element) {\n        this.onUpdatedSource.next(element);\n    }\n    emitOnAdded(element) {\n        this.onAddedSource.next(element);\n    }\n    emitOnChanged(action) {\n        this.getElements().then((elements) => this.onChangedSource.next({\n            action: action,\n            elements: elements,\n            paging: this.getPaging(),\n            filter: this.getFilter(),\n            sort: this.getSort(),\n        }));\n    }\n}\n\nfunction compareValues(direction, a, b) {\n    if (a < b) {\n        return -1 * direction;\n    }\n    if (a > b) {\n        return direction;\n    }\n    return 0;\n}\nclass LocalSorter {\n    static sort(data, field, direction, customCompare) {\n        const dir = (direction === 'asc') ? 1 : -1;\n        const compare = customCompare ? customCompare : compareValues;\n        return data.sort((a, b) => {\n            return compare.call(null, dir, a[field], b[field]);\n        });\n    }\n}\n\nfunction filterValues(value, search) {\n    return value.toString().toLowerCase().includes(search.toString().toLowerCase());\n}\nclass LocalFilter {\n    static filter(data, field, search, customFilter) {\n        const filter = customFilter ? customFilter : filterValues;\n        return data.filter((el) => {\n            const value = typeof el[field] === 'undefined' || el[field] === null ? '' : el[field];\n            return filter.call(null, value, search);\n        });\n    }\n}\n\nclass LocalPager {\n    static paginate(data, page, perPage) {\n        return data.slice(perPage * (page - 1), perPage * page);\n    }\n}\n\nclass LocalDataSource extends DataSource {\n    constructor(data = []) {\n        super();\n        this.data = [];\n        this.filteredAndSorted = [];\n        this.sortConf = [];\n        this.filterConf = {\n            filters: [],\n            andOperator: true,\n        };\n        this.pagingConf = {};\n        this.data = data;\n    }\n    load(data) {\n        this.data = data;\n        return super.load(data);\n    }\n    prepend(element) {\n        this.reset(true);\n        this.data.unshift(element);\n        return super.prepend(element);\n    }\n    append(element) {\n        this.reset(true);\n        this.data.push(element);\n        return super.append(element);\n    }\n    add(element) {\n        this.data.push(element);\n        return super.add(element);\n    }\n    remove(element) {\n        this.data = this.data.filter(el => el !== element);\n        return super.remove(element);\n    }\n    update(element, values) {\n        return new Promise((resolve, reject) => {\n            this.find(element).then((found) => {\n                found = deepExtend(found, values);\n                super.update(found, values).then(resolve).catch(reject);\n            }).catch(reject);\n        });\n    }\n    find(element) {\n        const found = this.data.find(el => el === element);\n        if (found) {\n            return Promise.resolve(found);\n        }\n        return Promise.reject(new Error('Element was not found in the dataset'));\n    }\n    getElements() {\n        const data = this.data.slice(0);\n        return Promise.resolve(this.prepareData(data));\n    }\n    getFilteredAndSorted() {\n        let data = this.data.slice(0);\n        this.prepareData(data);\n        return Promise.resolve(this.filteredAndSorted);\n    }\n    getAll() {\n        const data = this.data.slice(0);\n        return Promise.resolve(data);\n    }\n    reset(silent = false) {\n        if (silent) {\n            this.filterConf = {\n                filters: [],\n                andOperator: true,\n            };\n            this.sortConf = [];\n            this.pagingConf['page'] = 1;\n        }\n        else {\n            this.setFilter([], true, false);\n            this.setSort([], false);\n            this.setPage(1);\n        }\n    }\n    empty() {\n        this.data = [];\n        return super.empty();\n    }\n    count() {\n        return this.filteredAndSorted.length;\n    }\n    /**\n     *\n     * Array of conf objects\n     * [\n     *  {field: string, direction: asc|desc|null, compare: Function|null},\n     * ]\n     * @param conf\n     * @param doEmit\n     * @returns {LocalDataSource}\n     */\n    setSort(conf, doEmit = true) {\n        if (conf !== null) {\n            conf.forEach((fieldConf) => {\n                if (!fieldConf['field'] || typeof fieldConf['direction'] === 'undefined') {\n                    throw new Error('Sort configuration object is not valid');\n                }\n            });\n            this.sortConf = conf;\n        }\n        super.setSort(conf, doEmit);\n        return this;\n    }\n    /**\n     *\n     * Array of conf objects\n     * [\n     *  {field: string, search: string, filter: Function|null},\n     * ]\n     * @param conf\n     * @param andOperator\n     * @param doEmit\n     * @returns {LocalDataSource}\n     */\n    setFilter(conf, andOperator = true, doEmit = true) {\n        if (conf && conf.length > 0) {\n            conf.forEach((fieldConf) => {\n                this.addFilter(fieldConf, andOperator, false);\n            });\n        }\n        else {\n            this.filterConf = {\n                filters: [],\n                andOperator: true,\n            };\n        }\n        this.filterConf.andOperator = andOperator;\n        this.pagingConf['page'] = 1;\n        super.setFilter(conf, andOperator, doEmit);\n        return this;\n    }\n    addFilter(fieldConf, andOperator = true, doEmit = true) {\n        if (!fieldConf['field'] || typeof fieldConf['search'] === 'undefined') {\n            throw new Error('Filter configuration object is not valid');\n        }\n        let found = false;\n        this.filterConf.filters.forEach((currentFieldConf, index) => {\n            if (currentFieldConf['field'] === fieldConf['field']) {\n                this.filterConf.filters[index] = fieldConf;\n                found = true;\n            }\n        });\n        if (!found) {\n            this.filterConf.filters.push(fieldConf);\n        }\n        this.filterConf.andOperator = andOperator;\n        super.addFilter(fieldConf, andOperator, doEmit);\n        return this;\n    }\n    setPaging(page, perPage, doEmit = true) {\n        this.pagingConf['page'] = page;\n        this.pagingConf['perPage'] = perPage;\n        super.setPaging(page, perPage, doEmit);\n        return this;\n    }\n    setPage(page, doEmit = true) {\n        this.pagingConf['page'] = page;\n        super.setPage(page, doEmit);\n        return this;\n    }\n    getSort() {\n        return this.sortConf;\n    }\n    getFilter() {\n        return this.filterConf;\n    }\n    getPaging() {\n        return this.pagingConf;\n    }\n    prepareData(data) {\n        data = this.filter(data);\n        data = this.sort(data);\n        this.filteredAndSorted = data.slice(0);\n        return this.paginate(data);\n    }\n    sort(data) {\n        if (this.sortConf) {\n            this.sortConf.forEach((fieldConf) => {\n                data = LocalSorter\n                    .sort(data, fieldConf['field'], fieldConf['direction'], fieldConf['compare']);\n            });\n        }\n        return data;\n    }\n    // TODO: refactor?\n    filter(data) {\n        if (this.filterConf.filters) {\n            if (this.filterConf.andOperator) {\n                this.filterConf.filters.forEach((fieldConf) => {\n                    if (fieldConf['search'].length > 0) {\n                        data = LocalFilter\n                            .filter(data, fieldConf['field'], fieldConf['search'], fieldConf['filter']);\n                    }\n                });\n            }\n            else {\n                let mergedData = [];\n                this.filterConf.filters.forEach((fieldConf) => {\n                    if (fieldConf['search'].length > 0) {\n                        mergedData = mergedData.concat(LocalFilter\n                            .filter(data, fieldConf['field'], fieldConf['search'], fieldConf['filter']));\n                    }\n                });\n                // remove non unique items\n                data = mergedData.filter((elem, pos, arr) => {\n                    return arr.indexOf(elem) === pos;\n                });\n            }\n        }\n        return data;\n    }\n    paginate(data) {\n        if (this.pagingConf && this.pagingConf['page'] && this.pagingConf['perPage']) {\n            data = LocalPager.paginate(data, this.pagingConf['page'], this.pagingConf['perPage']);\n        }\n        return data;\n    }\n}\n\nclass Ng2SmartTableComponent {\n    constructor() {\n        this.settings = {};\n        this.rowSelect = new EventEmitter();\n        this.rowDeselect = new EventEmitter();\n        this.userRowSelect = new EventEmitter();\n        this.delete = new EventEmitter();\n        this.edit = new EventEmitter();\n        this.create = new EventEmitter();\n        this.custom = new EventEmitter();\n        this.deleteConfirm = new EventEmitter();\n        this.editConfirm = new EventEmitter();\n        this.createConfirm = new EventEmitter();\n        this.rowHover = new EventEmitter();\n        this.defaultSettings = {\n            mode: 'inline',\n            selectMode: 'single',\n            /**\n             * Points to an element in all data\n             *\n             * when < 0 all lines must be deselected\n             */\n            selectedRowIndex: 0,\n            switchPageToSelectedRowPage: false,\n            hideHeader: false,\n            hideSubHeader: false,\n            actions: {\n                columnTitle: 'Actions',\n                add: true,\n                edit: true,\n                delete: true,\n                custom: [],\n                position: 'left', // left|right\n            },\n            filter: {\n                inputClass: '',\n            },\n            edit: {\n                inputClass: '',\n                editButtonContent: 'Edit',\n                saveButtonContent: 'Update',\n                cancelButtonContent: 'Cancel',\n                confirmSave: false,\n            },\n            add: {\n                inputClass: '',\n                addButtonContent: 'Add New',\n                createButtonContent: 'Create',\n                cancelButtonContent: 'Cancel',\n                confirmCreate: false,\n            },\n            delete: {\n                deleteButtonContent: 'Delete',\n                confirmDelete: false,\n            },\n            attr: {\n                id: '',\n                class: '',\n            },\n            noDataMessage: 'No data found',\n            columns: {},\n            pager: {\n                display: true,\n                page: 1,\n                perPage: 10,\n            },\n            rowClassFunction: () => '',\n        };\n        this.isAllSelected = false;\n        this.destroyed$ = new Subject();\n    }\n    ngOnChanges(changes) {\n        if (this.grid) {\n            if (changes['settings']) {\n                this.grid.setSettings(this.prepareSettings());\n            }\n            if (changes['source']) {\n                this.source = this.prepareSource();\n                this.grid.setSource(this.source);\n            }\n        }\n        else {\n            this.initGrid();\n        }\n        this.tableId = this.grid.getSetting('attr.id');\n        this.tableClass = this.grid.getSetting('attr.class');\n        this.isHideHeader = this.grid.getSetting('hideHeader');\n        this.isHideSubHeader = this.grid.getSetting('hideSubHeader');\n        this.isPagerDisplay = this.grid.getSetting('pager.display');\n        this.isPagerDisplay = this.grid.getSetting('pager.display');\n        this.perPageSelect = this.grid.getSetting('pager.perPageSelect');\n        this.rowClassFunction = this.grid.getSetting('rowClassFunction');\n    }\n    ngOnDestroy() {\n        this.destroyed$.next();\n    }\n    selectRow(index, switchPageToSelectedRowPage = this.grid.getSetting('switchPageToSelectedRowPage')) {\n        if (!this.grid) {\n            return;\n        }\n        this.grid.settings.selectedRowIndex = index;\n        if (this.isIndexOutOfRange(index)) {\n            // we need to deselect all rows if we got an incorrect index\n            this.deselectAllRows();\n            return;\n        }\n        if (switchPageToSelectedRowPage) {\n            const source = this.source;\n            const paging = source.getPaging();\n            const page = getPageForRowIndex(index, paging.perPage);\n            index = index % paging.perPage;\n            this.grid.settings.selectedRowIndex = index;\n            if (page !== paging.page) {\n                source.setPage(page);\n                return;\n            }\n        }\n        const row = this.grid.getRows()[index];\n        if (row) {\n            this.onSelectRow(row);\n        }\n        else {\n            // we need to deselect all rows if we got an incorrect index\n            this.deselectAllRows();\n        }\n    }\n    deselectAllRows() {\n        this.grid.dataSet.deselectAll();\n        this.emitDeselectRow(null);\n    }\n    editRowSelect(row) {\n        if (this.grid.getSetting('selectMode') === 'multi') {\n            this.onMultipleSelectRow(row);\n        }\n        else {\n            this.onSelectRow(row);\n        }\n    }\n    onUserSelectRow(row) {\n        if (this.grid.getSetting('selectMode') !== 'multi') {\n            this.grid.selectRow(row);\n            this.emitUserSelectRow(row);\n            this.emitSelectRow(row);\n        }\n    }\n    onRowHover(row) {\n        this.rowHover.emit(row);\n    }\n    multipleSelectRow(row) {\n        this.grid.multipleSelectRow(row);\n        this.emitUserSelectRow(row);\n        this.emitSelectRow(row);\n    }\n    onSelectAllRows($event) {\n        this.isAllSelected = !this.isAllSelected;\n        this.grid.selectAllRows(this.isAllSelected);\n        this.emitUserSelectRow(null);\n        this.emitSelectRow(null);\n    }\n    onSelectRow(row) {\n        this.grid.selectRow(row);\n        this.emitSelectRow(row);\n    }\n    onMultipleSelectRow(row) {\n        this.emitSelectRow(row);\n    }\n    initGrid() {\n        this.source = this.prepareSource();\n        this.grid = new Grid(this.source, this.prepareSettings());\n        this.subscribeToOnSelectRow();\n        this.subscribeToOnDeselectRow();\n    }\n    prepareSource() {\n        if (this.source instanceof DataSource) {\n            return this.source;\n        }\n        else if (this.source instanceof Array) {\n            return new LocalDataSource(this.source);\n        }\n        return new LocalDataSource();\n    }\n    prepareSettings() {\n        return deepExtend({}, this.defaultSettings, this.settings);\n    }\n    changePage($event) {\n        this.resetAllSelector();\n    }\n    sort($event) {\n        this.resetAllSelector();\n    }\n    filter($event) {\n        this.resetAllSelector();\n    }\n    resetAllSelector() {\n        this.isAllSelected = false;\n    }\n    emitUserSelectRow(row) {\n        const selectedRows = this.grid.getSelectedRows();\n        this.userRowSelect.emit({\n            data: row ? row.getData() : null,\n            isSelected: row ? row.getIsSelected() : null,\n            source: this.source,\n            selected: selectedRows && selectedRows.length ? selectedRows.map((r) => r.getData()) : [],\n        });\n    }\n    emitSelectRow(row) {\n        const data = {\n            data: row ? row.getData() : null,\n            isSelected: row ? row.getIsSelected() : null,\n            source: this.source,\n        };\n        this.rowSelect.emit(data);\n        if (!(row === null || row === void 0 ? void 0 : row.isSelected)) {\n            this.rowDeselect.emit(data);\n        }\n    }\n    emitDeselectRow(row) {\n        this.rowDeselect.emit({\n            data: row ? row.getData() : null,\n            isSelected: row ? row.getIsSelected() : null,\n            source: this.source,\n        });\n    }\n    isIndexOutOfRange(index) {\n        var _a;\n        const dataAmount = (_a = this.source) === null || _a === void 0 ? void 0 : _a.count();\n        return index < 0 || (typeof dataAmount === 'number' && index >= dataAmount);\n    }\n    subscribeToOnSelectRow() {\n        if (this.onSelectRowSubscription) {\n            this.onSelectRowSubscription.unsubscribe();\n        }\n        this.onSelectRowSubscription = this.grid.onSelectRow()\n            .pipe(takeUntil(this.destroyed$))\n            .subscribe((row) => {\n            this.emitSelectRow(row);\n        });\n    }\n    subscribeToOnDeselectRow() {\n        if (this.onDeselectRowSubscription) {\n            this.onDeselectRowSubscription.unsubscribe();\n        }\n        this.onDeselectRowSubscription = this.grid.onDeselectRow()\n            .pipe(takeUntil(this.destroyed$))\n            .subscribe((row) => {\n            this.emitDeselectRow(row);\n        });\n    }\n}\nNg2SmartTableComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: Ng2SmartTableComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\nNg2SmartTableComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.3.11\", type: Ng2SmartTableComponent, selector: \"ng2-smart-table\", inputs: { source: \"source\", settings: \"settings\" }, outputs: { rowSelect: \"rowSelect\", rowDeselect: \"rowDeselect\", userRowSelect: \"userRowSelect\", delete: \"delete\", edit: \"edit\", create: \"create\", custom: \"custom\", deleteConfirm: \"deleteConfirm\", editConfirm: \"editConfirm\", createConfirm: \"createConfirm\", rowHover: \"rowHover\" }, usesOnChanges: true, ngImport: i0, template: \"<table [id]=\\\"tableId\\\" [ngClass]=\\\"tableClass\\\">\\n\\n  <thead ng2-st-thead *ngIf=\\\"!isHideHeader || !isHideSubHeader\\\"\\n                      [grid]=\\\"grid\\\"\\n                      [isAllSelected]=\\\"isAllSelected\\\"\\n                      [source]=\\\"source\\\"\\n                      [createConfirm]=\\\"createConfirm\\\"\\n                      (create)=\\\"create.emit($event)\\\"\\n                      (selectAllRows)=\\\"onSelectAllRows($event)\\\"\\n                      (sort)=\\\"sort($event)\\\"\\n                      (filter)=\\\"filter($event)\\\">\\n  </thead>\\n\\n  <tbody ng2-st-tbody [grid]=\\\"grid\\\"\\n                      [source]=\\\"source\\\"\\n                      [deleteConfirm]=\\\"deleteConfirm\\\"\\n                      [editConfirm]=\\\"editConfirm\\\"\\n                      [rowClassFunction]=\\\"rowClassFunction\\\"\\n                      (edit)=\\\"edit.emit($event)\\\"\\n                      (delete)=\\\"delete.emit($event)\\\"\\n                      (custom)=\\\"custom.emit($event)\\\"\\n                      (userSelectRow)=\\\"onUserSelectRow($event)\\\"\\n                      (editRowSelect)=\\\"editRowSelect($event)\\\"\\n                      (multipleSelectRow)=\\\"multipleSelectRow($event)\\\"\\n                      (rowHover)=\\\"onRowHover($event)\\\">\\n  </tbody>\\n\\n</table>\\n\\n<ng2-smart-table-pager *ngIf=\\\"isPagerDisplay\\\"\\n                        [source]=\\\"source\\\"\\n                        [perPageSelect]=\\\"perPageSelect\\\"\\n                        (changePage)=\\\"changePage($event)\\\">\\n</ng2-smart-table-pager>\\n\", styles: [\":host{font-size:1rem}:host ::ng-deep *{box-sizing:border-box}:host ::ng-deep button,:host ::ng-deep input,:host ::ng-deep optgroup,:host ::ng-deep select,:host ::ng-deep textarea{color:inherit;font:inherit;margin:0}:host ::ng-deep table{line-height:1.5em;border-collapse:collapse;border-spacing:0;display:table;width:100%;max-width:100%;overflow:auto;word-break:normal;word-break:keep-all}:host ::ng-deep table tr th{font-weight:700}:host ::ng-deep table tr section{font-size:.75em;font-weight:700}:host ::ng-deep table tr td,:host ::ng-deep table tr th{font-size:.875em;margin:0;padding:.5em 1em}:host ::ng-deep a{color:#1e6bb8;text-decoration:none}:host ::ng-deep a:hover{text-decoration:underline}\\n\"], components: [{ type: Ng2SmartTableTheadComponent, selector: \"[ng2-st-thead]\", inputs: [\"grid\", \"source\", \"isAllSelected\", \"createConfirm\"], outputs: [\"sort\", \"selectAllRows\", \"create\", \"filter\"] }, { type: Ng2SmartTableTbodyComponent, selector: \"[ng2-st-tbody]\", inputs: [\"grid\", \"source\", \"deleteConfirm\", \"editConfirm\", \"rowClassFunction\"], outputs: [\"save\", \"cancel\", \"edit\", \"delete\", \"custom\", \"edited\", \"userSelectRow\", \"editRowSelect\", \"multipleSelectRow\", \"rowHover\"] }, { type: PagerComponent, selector: \"ng2-smart-table-pager\", inputs: [\"source\", \"perPageSelect\"], outputs: [\"changePage\"] }], directives: [{ type: i2.NgClass, selector: \"[ngClass]\", inputs: [\"class\", \"ngClass\"] }, { type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: Ng2SmartTableComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'ng2-smart-table', template: \"<table [id]=\\\"tableId\\\" [ngClass]=\\\"tableClass\\\">\\n\\n  <thead ng2-st-thead *ngIf=\\\"!isHideHeader || !isHideSubHeader\\\"\\n                      [grid]=\\\"grid\\\"\\n                      [isAllSelected]=\\\"isAllSelected\\\"\\n                      [source]=\\\"source\\\"\\n                      [createConfirm]=\\\"createConfirm\\\"\\n                      (create)=\\\"create.emit($event)\\\"\\n                      (selectAllRows)=\\\"onSelectAllRows($event)\\\"\\n                      (sort)=\\\"sort($event)\\\"\\n                      (filter)=\\\"filter($event)\\\">\\n  </thead>\\n\\n  <tbody ng2-st-tbody [grid]=\\\"grid\\\"\\n                      [source]=\\\"source\\\"\\n                      [deleteConfirm]=\\\"deleteConfirm\\\"\\n                      [editConfirm]=\\\"editConfirm\\\"\\n                      [rowClassFunction]=\\\"rowClassFunction\\\"\\n                      (edit)=\\\"edit.emit($event)\\\"\\n                      (delete)=\\\"delete.emit($event)\\\"\\n                      (custom)=\\\"custom.emit($event)\\\"\\n                      (userSelectRow)=\\\"onUserSelectRow($event)\\\"\\n                      (editRowSelect)=\\\"editRowSelect($event)\\\"\\n                      (multipleSelectRow)=\\\"multipleSelectRow($event)\\\"\\n                      (rowHover)=\\\"onRowHover($event)\\\">\\n  </tbody>\\n\\n</table>\\n\\n<ng2-smart-table-pager *ngIf=\\\"isPagerDisplay\\\"\\n                        [source]=\\\"source\\\"\\n                        [perPageSelect]=\\\"perPageSelect\\\"\\n                        (changePage)=\\\"changePage($event)\\\">\\n</ng2-smart-table-pager>\\n\", styles: [\":host{font-size:1rem}:host ::ng-deep *{box-sizing:border-box}:host ::ng-deep button,:host ::ng-deep input,:host ::ng-deep optgroup,:host ::ng-deep select,:host ::ng-deep textarea{color:inherit;font:inherit;margin:0}:host ::ng-deep table{line-height:1.5em;border-collapse:collapse;border-spacing:0;display:table;width:100%;max-width:100%;overflow:auto;word-break:normal;word-break:keep-all}:host ::ng-deep table tr th{font-weight:700}:host ::ng-deep table tr section{font-size:.75em;font-weight:700}:host ::ng-deep table tr td,:host ::ng-deep table tr th{font-size:.875em;margin:0;padding:.5em 1em}:host ::ng-deep a{color:#1e6bb8;text-decoration:none}:host ::ng-deep a:hover{text-decoration:underline}\\n\"] }]\n        }], propDecorators: { source: [{\n                type: Input\n            }], settings: [{\n                type: Input\n            }], rowSelect: [{\n                type: Output\n            }], rowDeselect: [{\n                type: Output\n            }], userRowSelect: [{\n                type: Output\n            }], delete: [{\n                type: Output\n            }], edit: [{\n                type: Output\n            }], create: [{\n                type: Output\n            }], custom: [{\n                type: Output\n            }], deleteConfirm: [{\n                type: Output\n            }], editConfirm: [{\n                type: Output\n            }], createConfirm: [{\n                type: Output\n            }], rowHover: [{\n                type: Output\n            }] } });\n\nclass Ng2SmartTableModule {\n}\nNg2SmartTableModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: Ng2SmartTableModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nNg2SmartTableModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: Ng2SmartTableModule, declarations: [Ng2SmartTableComponent], imports: [CommonModule,\n        FormsModule,\n        ReactiveFormsModule,\n        CellModule,\n        FilterModule,\n        PagerModule,\n        TBodyModule,\n        THeadModule], exports: [Ng2SmartTableComponent] });\nNg2SmartTableModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: Ng2SmartTableModule, imports: [[\n            CommonModule,\n            FormsModule,\n            ReactiveFormsModule,\n            CellModule,\n            FilterModule,\n            PagerModule,\n            TBodyModule,\n            THeadModule,\n        ]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: Ng2SmartTableModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [\n                        CommonModule,\n                        FormsModule,\n                        ReactiveFormsModule,\n                        CellModule,\n                        FilterModule,\n                        PagerModule,\n                        TBodyModule,\n                        THeadModule,\n                    ],\n                    declarations: [\n                        Ng2SmartTableComponent,\n                    ],\n                    exports: [\n                        Ng2SmartTableComponent,\n                    ],\n                }]\n        }] });\n\nclass ServerSourceConf {\n    constructor({ endPoint = '', sortFieldKey = '', sortDirKey = '', pagerPageKey = '', pagerLimitKey = '', filterFieldKey = '', totalKey = '', dataKey = '' } = {}) {\n        this.endPoint = endPoint ? endPoint : '';\n        this.sortFieldKey = sortFieldKey ? sortFieldKey : ServerSourceConf.SORT_FIELD_KEY;\n        this.sortDirKey = sortDirKey ? sortDirKey : ServerSourceConf.SORT_DIR_KEY;\n        this.pagerPageKey = pagerPageKey ? pagerPageKey : ServerSourceConf.PAGER_PAGE_KEY;\n        this.pagerLimitKey = pagerLimitKey ? pagerLimitKey : ServerSourceConf.PAGER_LIMIT_KEY;\n        this.filterFieldKey = filterFieldKey ? filterFieldKey : ServerSourceConf.FILTER_FIELD_KEY;\n        this.totalKey = totalKey ? totalKey : ServerSourceConf.TOTAL_KEY;\n        this.dataKey = dataKey ? dataKey : ServerSourceConf.DATA_KEY;\n    }\n}\nServerSourceConf.SORT_FIELD_KEY = '_sort';\nServerSourceConf.SORT_DIR_KEY = '_order';\nServerSourceConf.PAGER_PAGE_KEY = '_page';\nServerSourceConf.PAGER_LIMIT_KEY = '_limit';\nServerSourceConf.FILTER_FIELD_KEY = '#field#_like';\nServerSourceConf.TOTAL_KEY = 'x-total-count';\nServerSourceConf.DATA_KEY = '';\n\nclass ServerDataSource extends LocalDataSource {\n    constructor(http, conf = {}) {\n        super();\n        this.http = http;\n        this.lastRequestCount = 0;\n        this.conf = new ServerSourceConf(conf);\n        if (!this.conf.endPoint) {\n            throw new Error('At least endPoint must be specified as a configuration of the server data source.');\n        }\n    }\n    count() {\n        return this.lastRequestCount;\n    }\n    getElements() {\n        return this.requestElements()\n            .pipe(map(res => {\n            this.lastRequestCount = this.extractTotalFromResponse(res);\n            this.data = this.extractDataFromResponse(res);\n            return this.data;\n        })).toPromise();\n    }\n    /**\n     * Extracts array of data from server response\n     * @param res\n     * @returns {any}\n     */\n    extractDataFromResponse(res) {\n        const rawData = res.body;\n        const data = !!this.conf.dataKey ? getDeepFromObject(rawData, this.conf.dataKey, []) : rawData;\n        if (data instanceof Array) {\n            return data;\n        }\n        throw new Error(`Data must be an array.\n    Please check that data extracted from the server response by the key '${this.conf.dataKey}' exists and is array.`);\n    }\n    /**\n     * Extracts total rows count from the server response\n     * Looks for the count in the heders first, then in the response body\n     * @param res\n     * @returns {any}\n     */\n    extractTotalFromResponse(res) {\n        if (res.headers.has(this.conf.totalKey)) {\n            return +res.headers.get(this.conf.totalKey);\n        }\n        else {\n            const rawData = res.body;\n            return getDeepFromObject(rawData, this.conf.totalKey, 0);\n        }\n    }\n    requestElements() {\n        let httpParams = this.createRequesParams();\n        return this.http.get(this.conf.endPoint, { params: httpParams, observe: 'response' });\n    }\n    createRequesParams() {\n        let httpParams = new HttpParams();\n        httpParams = this.addSortRequestParams(httpParams);\n        httpParams = this.addFilterRequestParams(httpParams);\n        return this.addPagerRequestParams(httpParams);\n    }\n    addSortRequestParams(httpParams) {\n        if (this.sortConf) {\n            this.sortConf.forEach((fieldConf) => {\n                httpParams = httpParams.set(this.conf.sortFieldKey, fieldConf.field);\n                httpParams = httpParams.set(this.conf.sortDirKey, fieldConf.direction.toUpperCase());\n            });\n        }\n        return httpParams;\n    }\n    addFilterRequestParams(httpParams) {\n        if (this.filterConf.filters) {\n            this.filterConf.filters.forEach((fieldConf) => {\n                if (fieldConf['search']) {\n                    httpParams = httpParams.set(this.conf.filterFieldKey.replace('#field#', fieldConf['field']), fieldConf['search']);\n                }\n            });\n        }\n        return httpParams;\n    }\n    addPagerRequestParams(httpParams) {\n        if (this.pagingConf && this.pagingConf['page'] && this.pagingConf['perPage']) {\n            httpParams = httpParams.set(this.conf.pagerPageKey, this.pagingConf['page']);\n            httpParams = httpParams.set(this.conf.pagerLimitKey, this.pagingConf['perPage']);\n        }\n        return httpParams;\n    }\n}\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { Cell, DefaultEditor, DefaultFilter, LocalDataSource, Ng2SmartTableComponent, Ng2SmartTableModule, ServerDataSource };\n//# sourceMappingURL=ng2-smart-table.mjs.map\n","map":{"version":3,"file":"ng2-smart-table.mjs","sources":["../../../projects/ng2-smart-table/src/lib/components/cell/cell-view-mode/custom-view.component.ts","../../../projects/ng2-smart-table/src/lib/components/cell/cell-view-mode/view-cell.component.ts","../../../projects/ng2-smart-table/src/lib/components/cell/cell-edit-mode/edit-cell-default.ts","../../../projects/ng2-smart-table/src/lib/components/cell/cell-edit-mode/custom-edit.component.ts","../../../projects/ng2-smart-table/src/lib/components/cell/cell-editors/default-editor.ts","../../../projects/ng2-smart-table/src/lib/components/cell/cell-editors/select-editor.component.ts","../../../projects/ng2-smart-table/src/lib/components/cell/cell-editors/textarea-editor.component.ts","../../../projects/ng2-smart-table/src/lib/components/cell/cell-editors/checkbox-editor.component.ts","../../../projects/ng2-smart-table/src/lib/components/cell/cell-editors/completer-editor.component.ts","../../../projects/ng2-smart-table/src/lib/components/cell/cell-editors/input-editor.component.ts","../../../projects/ng2-smart-table/src/lib/components/cell/cell-edit-mode/default-edit.component.ts","../../../projects/ng2-smart-table/src/lib/components/cell/cell-edit-mode/default-edit.component.html","../../../projects/ng2-smart-table/src/lib/components/cell/cell-edit-mode/edit-cell.component.ts","../../../projects/ng2-smart-table/src/lib/components/cell/cell.component.ts","../../../projects/ng2-smart-table/src/lib/components/cell/cell.module.ts","../../../projects/ng2-smart-table/src/lib/components/filter/filter-default.ts","../../../projects/ng2-smart-table/src/lib/components/filter/custom-filter.component.ts","../../../projects/ng2-smart-table/src/lib/components/filter/filter-types/default-filter.ts","../../../projects/ng2-smart-table/src/lib/components/filter/filter-types/select-filter.component.ts","../../../projects/ng2-smart-table/src/lib/components/filter/filter-types/checkbox-filter.component.ts","../../../projects/ng2-smart-table/src/lib/components/filter/filter-types/completer-filter.component.ts","../../../projects/ng2-smart-table/src/lib/components/filter/filter-types/input-filter.component.ts","../../../projects/ng2-smart-table/src/lib/components/filter/default-filter.component.ts","../../../projects/ng2-smart-table/src/lib/components/filter/filter.component.ts","../../../projects/ng2-smart-table/src/lib/components/filter/filter.module.ts","../../../projects/ng2-smart-table/src/lib/components/pager/pager.component.ts","../../../projects/ng2-smart-table/src/lib/components/pager/pager.module.ts","../../../projects/ng2-smart-table/src/lib/components/tbody/cells/custom.component.ts","../../../projects/ng2-smart-table/src/lib/components/tbody/cells/edit-delete.component.ts","../../../projects/ng2-smart-table/src/lib/components/tbody/cells/create-cancel.component.ts","../../../projects/ng2-smart-table/src/lib/components/tbody/tbody.component.ts","../../../projects/ng2-smart-table/src/lib/components/tbody/tbody.component.html","../../../projects/ng2-smart-table/src/lib/components/tbody/tbody.module.ts","../../../projects/ng2-smart-table/src/lib/components/thead/cells/checkbox-select-all.component.ts","../../../projects/ng2-smart-table/src/lib/components/thead/cells/actions-title.component.ts","../../../projects/ng2-smart-table/src/lib/components/thead/cells/title/title.component.ts","../../../projects/ng2-smart-table/src/lib/components/thead/cells/column-title.component.ts","../../../projects/ng2-smart-table/src/lib/components/thead/rows/thead-titles-row.component.ts","../../../projects/ng2-smart-table/src/lib/components/thead/cells/add-button.component.ts","../../../projects/ng2-smart-table/src/lib/components/thead/rows/thead-filters-row.component.ts","../../../projects/ng2-smart-table/src/lib/components/thead/cells/actions.component.ts","../../../projects/ng2-smart-table/src/lib/components/thead/rows/thead-form-row.component.ts","../../../projects/ng2-smart-table/src/lib/components/thead/thead.component.ts","../../../projects/ng2-smart-table/src/lib/components/thead/thead.component.html","../../../projects/ng2-smart-table/src/lib/components/thead/thead.module.ts","../../../projects/ng2-smart-table/src/lib/lib/helpers.ts","../../../projects/ng2-smart-table/src/lib/lib/data-set/cell.ts","../../../projects/ng2-smart-table/src/lib/lib/data-set/row.ts","../../../projects/ng2-smart-table/src/lib/lib/data-set/column.ts","../../../projects/ng2-smart-table/src/lib/lib/data-set/data-set.ts","../../../projects/ng2-smart-table/src/lib/lib/grid.ts","../../../projects/ng2-smart-table/src/lib/lib/data-source/data-source.ts","../../../projects/ng2-smart-table/src/lib/lib/data-source/local/local.sorter.ts","../../../projects/ng2-smart-table/src/lib/lib/data-source/local/local.filter.ts","../../../projects/ng2-smart-table/src/lib/lib/data-source/local/local.pager.ts","../../../projects/ng2-smart-table/src/lib/lib/data-source/local/local.data-source.ts","../../../projects/ng2-smart-table/src/lib/ng2-smart-table.component.ts","../../../projects/ng2-smart-table/src/lib/ng2-smart-table.component.html","../../../projects/ng2-smart-table/src/lib/ng2-smart-table.module.ts","../../../projects/ng2-smart-table/src/lib/lib/data-source/server/server-source.conf.ts","../../../projects/ng2-smart-table/src/lib/lib/data-source/server/server.data-source.ts","../../../projects/ng2-smart-table/src/ng2-smart-table.ts"],"sourcesContent":["import {\n  Component,\n  Input,\n  ComponentFactoryResolver,\n  ViewChild,\n  ViewContainerRef,\n  OnInit,\n  OnDestroy,\n} from '@angular/core';\n\nimport { Cell } from '../../../lib/data-set/cell';\nimport { ViewCell } from './view-cell';\n\n@Component({\n  selector: 'custom-view-component',\n  template: `\n    <ng-template #dynamicTarget></ng-template>\n  `,\n})\nexport class CustomViewComponent implements OnInit, OnDestroy {\n\n  customComponent: any;\n  @Input() cell: Cell;\n  @ViewChild('dynamicTarget', { read: ViewContainerRef, static: true }) dynamicTarget: any;\n\n  constructor(private resolver: ComponentFactoryResolver) {\n  }\n\n  ngOnInit() {\n    if (this.cell && !this.customComponent) {\n      this.createCustomComponent();\n      this.callOnComponentInit();\n      this.patchInstance();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this.customComponent) {\n      this.customComponent.destroy();\n    }\n  }\n\n  protected createCustomComponent() {\n    const componentFactory = this.resolver.resolveComponentFactory(this.cell.getColumn().renderComponent);\n    this.customComponent = this.dynamicTarget.createComponent(componentFactory);\n  }\n\n  protected callOnComponentInit() {\n    const onComponentInitFunction = this.cell.getColumn().getOnComponentInitFunction();\n    onComponentInitFunction && onComponentInitFunction(this.customComponent.instance);\n  }\n\n  protected patchInstance() {\n    Object.assign(this.customComponent.instance, this.getPatch());\n  }\n\n  protected getPatch(): ViewCell {\n    return {\n      value: this.cell.getValue(),\n      rowData: this.cell.getRow().getData()\n    }\n  }\n}\n","import {Component, Input, ChangeDetectionStrategy } from '@angular/core';\n\nimport { Cell } from '../../../lib/data-set/cell';\n\n@Component({\n  selector: 'table-cell-view-mode',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  template: `\n    <div [ngSwitch]=\"cell.getColumn().type\">\n        <custom-view-component *ngSwitchCase=\"'custom'\" [cell]=\"cell\"></custom-view-component>\n        <div *ngSwitchCase=\"'html'\" [innerHTML]=\"cell.getValue()\"></div>\n        <div *ngSwitchDefault>{{ cell.getValue() }}</div>\n    </div>\n    `,\n})\nexport class ViewCellComponent {\n\n  @Input() cell: Cell;\n}\n","import { Component, Output, EventEmitter, Input } from '@angular/core';\n\nimport { Cell } from '../../../lib/data-set/cell';\n\n@Component({\n  template: ''\n})\nexport class EditCellDefault {\n\n  @Input() cell: Cell;\n  @Input() inputClass: string = '';\n\n  @Output() edited = new EventEmitter<any>();\n\n  onEdited(event: any): boolean {\n    this.edited.next(event);\n    return false;\n  }\n\n  onStopEditing(): boolean {\n    this.cell.getRow().isInEditing = false;\n    return false;\n  }\n\n  onClick(event: any) {\n    event.stopPropagation();\n  }\n}\n","import {\n  Component,\n  ComponentFactoryResolver,\n  ViewChild,\n  ViewContainerRef,\n  SimpleChanges,\n  OnChanges,\n  OnDestroy,\n} from '@angular/core';\n\nimport { EditCellDefault } from './edit-cell-default';\n\n@Component({\n  selector: 'table-cell-custom-editor',\n  template: `\n    <ng-template #dynamicTarget></ng-template>\n  `,\n})\nexport class CustomEditComponent extends EditCellDefault implements OnChanges, OnDestroy {\n\n  customComponent: any;\n  @ViewChild('dynamicTarget', { read: ViewContainerRef, static: true }) dynamicTarget: any;\n\n  constructor(private resolver: ComponentFactoryResolver) {\n    super();\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (this.cell && !this.customComponent) {\n      const componentFactory = this.resolver.resolveComponentFactory(this.cell.getColumn().editor.component);\n      this.customComponent = this.dynamicTarget.createComponent(componentFactory);\n\n      // set @Inputs and @Outputs of custom component\n      this.customComponent.instance.cell = this.cell;\n      this.customComponent.instance.inputClass = this.inputClass;\n      this.customComponent.instance.onStopEditing.subscribe(() => this.onStopEditing());\n      this.customComponent.instance.onEdited.subscribe((event: any) => this.onEdited(event));\n      this.customComponent.instance.onClick.subscribe((event: any) => this.onClick(event));\n    }\n  }\n\n  ngOnDestroy() {\n    if (this.customComponent) {\n      this.customComponent.destroy();\n    }\n  }\n}\n","import { Component, Output, EventEmitter, Input } from '@angular/core';\n\nimport { Cell } from '../../../lib/data-set/cell';\n\n@Component({\n  template: '',\n})\nexport class DefaultEditor implements Editor {\n  @Input() cell: Cell;\n  @Input() inputClass: string;\n\n  @Output() onStopEditing = new EventEmitter<any>();\n  @Output() onEdited = new EventEmitter<any>();\n  @Output() onClick = new EventEmitter<any>();\n}\n\nexport interface Editor {\n  cell: Cell;\n  inputClass: string;\n  onStopEditing: EventEmitter<any>;\n  onEdited: EventEmitter<any>;\n  onClick: EventEmitter<any>;\n}\n","import { Component } from '@angular/core';\n\nimport { DefaultEditor } from './default-editor';\n\n@Component({\n  selector: 'select-editor',\n  template: `\n    <select [ngClass]=\"inputClass\"\n            class=\"form-control\"\n            [(ngModel)]=\"cell.newValue\"\n            [name]=\"cell.getId()\"\n            [disabled]=\"!cell.isEditable()\"\n            (click)=\"onClick.emit($event)\"\n            (keydown.enter)=\"onEdited.emit($event)\"\n            (keydown.esc)=\"onStopEditing.emit()\">\n\n        <option *ngFor=\"let option of cell.getColumn().getConfig()?.list\" [value]=\"option.value\"\n                [selected]=\"option.value === cell.getValue()\">{{ option.title }}\n        </option>\n    </select>\n    `,\n})\nexport class SelectEditorComponent extends DefaultEditor {\n\n  constructor() {\n    super();\n  }\n}\n","import { Component } from '@angular/core';\n\nimport { DefaultEditor } from './default-editor';\n\n@Component({\n  selector: 'textarea-editor',\n  styleUrls: ['./editor.component.scss'],\n  template: `\n    <textarea [ngClass]=\"inputClass\"\n              class=\"form-control\"\n              [(ngModel)]=\"cell.newValue\"\n              [name]=\"cell.getId()\"\n              [disabled]=\"!cell.isEditable()\"\n              [placeholder]=\"cell.getTitle()\"\n              (click)=\"onClick.emit($event)\"\n              (keydown.enter)=\"onEdited.emit($event)\"\n              (keydown.esc)=\"onStopEditing.emit()\">\n    </textarea>\n    `,\n})\nexport class TextareaEditorComponent extends DefaultEditor {\n\n  constructor() {\n    super();\n  }\n}\n","import { Component } from '@angular/core';\n\nimport { DefaultEditor } from './default-editor';\n\n@Component({\n  selector: 'checkbox-editor',\n  styleUrls: ['./editor.component.scss'],\n  template: `\n    <input [ngClass]=\"inputClass\"\n           type=\"checkbox\"\n           class=\"form-control\"\n           [name]=\"cell.getId()\"\n           [disabled]=\"!cell.isEditable()\"\n           [checked]=\"cell.getValue() == (cell.getColumn().getConfig()?.true || true)\"\n           (click)=\"onClick.emit($event)\"\n           (change)=\"onChange($event)\">\n    `,\n})\nexport class CheckboxEditorComponent extends DefaultEditor {\n\n  constructor() {\n    super();\n  }\n\n  onChange(event: any) {\n    const trueVal = (this.cell.getColumn().getConfig() && this.cell.getColumn().getConfig().true) || true;\n    const falseVal = (this.cell.getColumn().getConfig() && this.cell.getColumn().getConfig().false) || false;\n    this.cell.newValue = event.target.checked ? trueVal : falseVal;\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { CompleterService } from 'ng2-completer';\n\nimport { DefaultEditor } from './default-editor';\n\n@Component({\n  selector: 'completer-editor',\n  template: `\n    <ng2-completer [(ngModel)]=\"completerStr\"\n                   [dataService]=\"cell.getColumn().getConfig().completer.dataService\"\n                   [minSearchLength]=\"cell.getColumn().getConfig().completer.minSearchLength || 0\"\n                   [pause]=\"cell.getColumn().getConfig().completer.pause || 0\"\n                   [placeholder]=\"cell.getColumn().getConfig().completer.placeholder || 'Start typing...'\"\n                   (selected)=\"onEditedCompleter($event)\">\n    </ng2-completer>\n    `,\n})\nexport class CompleterEditorComponent extends DefaultEditor implements OnInit {\n\n  completerStr: string = '';\n\n  constructor(private completerService: CompleterService) {\n    super();\n  }\n\n  ngOnInit() {\n    if (this.cell.getColumn().editor && this.cell.getColumn().editor.type === 'completer') {\n      const config = this.cell.getColumn().getConfig().completer;\n      config.dataService = this.completerService.local(config.data, config.searchFields, config.titleField);\n      config.dataService.descriptionField(config.descriptionField);\n    }\n  }\n\n  onEditedCompleter(event: { title: '' }): boolean {\n    this.cell.newValue = event.title;\n    return false;\n  }\n}\n","import { Component } from '@angular/core';\n\nimport { DefaultEditor } from './default-editor';\n\n@Component({\n  selector: 'input-editor',\n  styleUrls: ['./editor.component.scss'],\n  template: `\n    <input [ngClass]=\"inputClass\"\n           class=\"form-control\"\n           [(ngModel)]=\"cell.newValue\"\n           [name]=\"cell.getId()\"\n           [placeholder]=\"cell.getTitle()\"\n           [disabled]=\"!cell.isEditable()\"\n           (click)=\"onClick.emit($event)\"\n           (keydown.enter)=\"onEdited.emit($event)\"\n           (keydown.esc)=\"onStopEditing.emit()\">\n    `,\n})\nexport class InputEditorComponent extends DefaultEditor {\n\n  constructor() {\n    super();\n  }\n}\n","import { Component } from '@angular/core';\n\nimport { EditCellDefault } from './edit-cell-default';\nimport { Cell } from '../../../lib/data-set/cell';\n\n@Component({\n  selector: 'table-cell-default-editor',\n  templateUrl: './default-edit.component.html',\n})\nexport class DefaultEditComponent extends EditCellDefault {\n\n  constructor() {\n    super();\n  }\n\n  getEditorType(): string {\n    return this.cell.getColumn().editor && this.cell.getColumn().editor.type;\n  }\n}\n","<div [ngSwitch]=\"getEditorType()\">\n    <select-editor *ngSwitchCase=\"'list'\"\n                   [cell]=\"cell\"\n                   [inputClass]=\"inputClass\"\n                   (onClick)=\"onClick($event)\"\n                   (onEdited)=\"onEdited($event)\"\n                   (onStopEditing)=\"onStopEditing()\">\n    </select-editor>\n\n    <textarea-editor *ngSwitchCase=\"'textarea'\"\n                     [cell]=\"cell\"\n                     [inputClass]=\"inputClass\"\n                     (onClick)=\"onClick($event)\"\n                     (onEdited)=\"onEdited($event)\"\n                     (onStopEditing)=\"onStopEditing()\">\n    </textarea-editor>\n\n    <checkbox-editor *ngSwitchCase=\"'checkbox'\"\n                     [cell]=\"cell\"\n                     [inputClass]=\"inputClass\"\n                     (onClick)=\"onClick($event)\">\n    </checkbox-editor>\n\n    <completer-editor *ngSwitchCase=\"'completer'\"\n                      [cell]=\"cell\">\n    </completer-editor>\n\n    <input-editor *ngSwitchDefault\n                  [cell]=\"cell\"\n                  [inputClass]=\"inputClass\"\n                  (onClick)=\"onClick($event)\"\n                  (onEdited)=\"onEdited($event)\"\n                  (onStopEditing)=\"onStopEditing()\">\n    </input-editor>\n</div>","import { Component, Input, Output, EventEmitter } from '@angular/core';\n\nimport { Cell } from '../../../lib/data-set/cell';\n\n@Component({\n  selector: 'table-cell-edit-mode',\n  template: `\n      <div [ngSwitch]=\"getEditorType()\">\n        <table-cell-custom-editor *ngSwitchCase=\"'custom'\"\n                                  [cell]=\"cell\"\n                                  [inputClass]=\"inputClass\"\n                                  (edited)=\"onEdited($event)\">\n        </table-cell-custom-editor>\n        <table-cell-default-editor *ngSwitchDefault\n                                  [cell]=\"cell\"\n                                  [inputClass]=\"inputClass\"\n                                  (edited)=\"onEdited($event)\">\n        </table-cell-default-editor>\n      </div>\n    `,\n})\nexport class EditCellComponent {\n\n  @Input() cell: Cell;\n  @Input() inputClass: string = '';\n\n  @Output() edited = new EventEmitter<any>();\n\n  onEdited(event: any): boolean {\n    this.edited.next(event);\n    return false;\n  }\n\n  getEditorType(): string {\n    return this.cell.getColumn().editor && this.cell.getColumn().editor.type;\n  }\n}\n","import { Component, Input, Output, EventEmitter } from '@angular/core';\n\nimport { Grid } from '../../lib/grid';\nimport { Cell } from '../../lib/data-set/cell';\nimport { Row } from '../../lib/data-set/row';\n\n@Component({\n  selector: 'ng2-smart-table-cell',\n  template: `\n    <table-cell-view-mode *ngIf=\"!isInEditing\" [cell]=\"cell\"></table-cell-view-mode>\n    <table-cell-edit-mode *ngIf=\"isInEditing\" [cell]=\"cell\"\n                          [inputClass]=\"inputClass\"\n                          (edited)=\"onEdited($event)\">\n    </table-cell-edit-mode>\n  `,\n})\nexport class CellComponent {\n\n  @Input() grid: Grid;\n  @Input() row: Row;\n  @Input() editConfirm: EventEmitter<any>;\n  @Input() createConfirm: EventEmitter<any>;\n  @Input() isNew: boolean;\n  @Input() cell: Cell;\n  @Input() inputClass: string = '';\n  @Input() mode: string = 'inline';\n  @Input() isInEditing: boolean = false;\n\n  @Output() edited = new EventEmitter<any>();\n\n  onEdited(event: any) {\n    if (this.isNew) {\n      this.grid.create(this.grid.getNewRow(), this.createConfirm);\n    } else {\n      this.grid.save(this.row, this.editConfirm);\n    }\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { Ng2CompleterModule } from 'ng2-completer';\n\nimport { CellComponent } from './cell.component';\nimport { CustomEditComponent } from './cell-edit-mode/custom-edit.component';\nimport { DefaultEditComponent } from './cell-edit-mode/default-edit.component';\nimport { EditCellComponent } from './cell-edit-mode/edit-cell.component';\nimport { CheckboxEditorComponent } from './cell-editors/checkbox-editor.component';\nimport { CompleterEditorComponent } from './cell-editors/completer-editor.component';\nimport { InputEditorComponent } from './cell-editors/input-editor.component';\nimport { SelectEditorComponent } from './cell-editors/select-editor.component';\nimport { TextareaEditorComponent } from './cell-editors/textarea-editor.component';\nimport { CustomViewComponent } from './cell-view-mode/custom-view.component';\nimport { ViewCellComponent } from './cell-view-mode/view-cell.component';\nimport { EditCellDefault } from './cell-edit-mode/edit-cell-default';\nimport { DefaultEditor } from './cell-editors/default-editor';\n\nconst CELL_COMPONENTS = [\n  CellComponent,\n  EditCellDefault,\n  DefaultEditor,\n  CustomEditComponent,\n  DefaultEditComponent,\n  EditCellComponent,\n  CheckboxEditorComponent,\n  CompleterEditorComponent,\n  InputEditorComponent,\n  SelectEditorComponent,\n  TextareaEditorComponent,\n  CustomViewComponent,\n  ViewCellComponent,\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    Ng2CompleterModule,\n  ],\n  declarations: [\n    ...CELL_COMPONENTS,\n  ],\n  exports: [\n    ...CELL_COMPONENTS,\n  ],\n})\nexport class CellModule { }\n","import { Output, EventEmitter, Input, Component } from '@angular/core';\n\nimport { Column } from '../../lib/data-set/column';\nimport { DataSource } from '../../lib/data-source/data-source';\n\n@Component({\n  template: '',\n})\nexport class FilterDefault {\n\n  @Input() column: Column;\n  @Input() source: DataSource;\n  @Input() inputClass: string = '';\n\n  @Output() filter = new EventEmitter<any>();\n\n  query: string = '';\n\n  onFilter(query: string) {\n    this.source.addFilter({\n      field: this.column.id,\n      search: query,\n      filter: this.column.getFilterFunction(),\n    });\n  }\n}\n","import {\n  Component,\n  ComponentFactoryResolver, Input,\n  OnChanges,\n  OnDestroy,\n  SimpleChanges,\n  ViewChild,\n  ViewContainerRef\n} from '@angular/core';\n\nimport { FilterDefault } from './filter-default';\n\n@Component({\n  selector: 'custom-table-filter',\n  template: `<ng-template #dynamicTarget></ng-template>`,\n})\nexport class CustomFilterComponent extends FilterDefault implements OnChanges, OnDestroy {\n  @Input() query: string;\n  customComponent: any;\n  @ViewChild('dynamicTarget', { read: ViewContainerRef, static: true }) dynamicTarget: any;\n\n  constructor(private resolver: ComponentFactoryResolver) {\n    super();\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (this.column && !this.customComponent) {\n      const componentFactory = this.resolver.resolveComponentFactory(this.column.filter.component);\n      this.customComponent = this.dynamicTarget.createComponent(componentFactory);\n\n      // set @Inputs and @Outputs of custom component\n      this.customComponent.instance.query = this.query;\n      this.customComponent.instance.column = this.column;\n      this.customComponent.instance.source = this.source;\n      this.customComponent.instance.inputClass = this.inputClass;\n      this.customComponent.instance.filter.subscribe((event: any) => this.onFilter(event));\n    }\n    if (this.customComponent) {\n      this.customComponent.instance.ngOnChanges(changes);\n    }\n  }\n\n  ngOnDestroy() {\n    if (this.customComponent) {\n      this.customComponent.destroy();\n    }\n  }\n}\n","import { Input, Output, EventEmitter, OnDestroy, Component } from '@angular/core';\nimport { Subscription } from 'rxjs';\n\nimport { Column } from '../../../lib/data-set/column';\n\n@Component({\n  template: '',\n})\nexport class DefaultFilter implements Filter, OnDestroy {\n\n  delay: number = 300;\n  changesSubscription: Subscription;\n  @Input() query: string;\n  @Input() inputClass: string;\n  @Input() column: Column;\n  @Output() filter = new EventEmitter<string>();\n\n  ngOnDestroy() {\n    if (this.changesSubscription) {\n      this.changesSubscription.unsubscribe();\n    }\n  }\n\n  setFilter() {\n    this.filter.emit(this.query);\n  }\n}\n\nexport interface Filter {\n\n  delay?: number;\n  changesSubscription?: Subscription;\n  query: string;\n  inputClass: string;\n  column: Column;\n  filter: EventEmitter<string>;\n}\n","import { Component, OnInit, ViewChild } from '@angular/core';\nimport { NgControl } from '@angular/forms';\nimport { distinctUntilChanged, debounceTime, skip } from 'rxjs/operators';\n\nimport { DefaultFilter } from './default-filter';\n\n@Component({\n  selector: 'select-filter',\n  template: `\n    <select [ngClass]=\"inputClass\"\n            class=\"form-control\"\n            #inputControl\n            [(ngModel)]=\"query\">\n\n        <option value=\"\">{{ column.getFilterConfig().selectText }}</option>\n        <option *ngFor=\"let option of column.getFilterConfig().list\" [value]=\"option.value\">\n          {{ option.title }}\n        </option>\n    </select>\n  `,\n})\nexport class SelectFilterComponent extends DefaultFilter implements OnInit {\n\n  @ViewChild('inputControl', { read: NgControl, static: true }) inputControl: NgControl;\n\n  constructor() {\n    super();\n  }\n\n  ngOnInit() {\n    this.inputControl.valueChanges\n      .pipe(\n        skip(1),\n        distinctUntilChanged(),\n        debounceTime(this.delay)\n      )\n      .subscribe((value: string) => this.setFilter());\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { FormControl } from '@angular/forms';\n\nimport { DefaultFilter } from './default-filter';\nimport { debounceTime } from 'rxjs/operators';\n\n@Component({\n  selector: 'checkbox-filter',\n  template: `\n    <input type=\"checkbox\" [formControl]=\"inputControl\" [ngClass]=\"inputClass\" class=\"form-control\">\n    <a href=\"#\" *ngIf=\"filterActive\"\n                (click)=\"resetFilter($event)\">{{column.getFilterConfig()?.resetText || 'reset'}}</a>\n  `,\n})\nexport class CheckboxFilterComponent extends DefaultFilter implements OnInit {\n\n  filterActive: boolean = false;\n  inputControl = new FormControl();\n\n  constructor() {\n    super();\n  }\n\n  ngOnInit() {\n    this.changesSubscription = this.inputControl.valueChanges\n      .pipe(debounceTime(this.delay))\n      .subscribe((checked: boolean) => {\n        this.filterActive = true;\n        const trueVal = (this.column.getFilterConfig() && this.column.getFilterConfig().true) || true;\n        const falseVal = (this.column.getFilterConfig() && this.column.getFilterConfig().false) || false;\n        this.query = checked ? trueVal : falseVal;\n        this.setFilter();\n      });\n  }\n\n  resetFilter(event: any) {\n    event.preventDefault();\n    this.query = '';\n    this.inputControl.setValue(false, { emitEvent: false });\n    this.filterActive = false;\n    this.setFilter();\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { CompleterService } from 'ng2-completer';\n\nimport { DefaultFilter } from './default-filter';\nimport { distinctUntilChanged, debounceTime, map } from 'rxjs/operators';\n\n@Component({\n  selector: 'completer-filter',\n  template: `\n    <ng2-completer [(ngModel)]=\"query\"\n                   (ngModelChange)=\"inputTextChanged($event)\"\n                   [dataService]=\"column.getFilterConfig().completer.dataService\"\n                   [minSearchLength]=\"column.getFilterConfig().completer.minSearchLength || 0\"\n                   [pause]=\"column.getFilterConfig().completer.pause || 0\"\n                   [placeholder]=\"column.getFilterConfig().completer.placeholder || 'Start typing...'\"\n                   (selected)=\"completerContent.next($event)\">\n    </ng2-completer>\n  `,\n})\nexport class CompleterFilterComponent extends DefaultFilter implements OnInit {\n\n  completerContent = new Subject<any>();\n\n  constructor(private completerService: CompleterService) {\n    super();\n  }\n\n  ngOnInit() {\n    const config = this.column.getFilterConfig().completer;\n    config.dataService = this.completerService.local(config.data, config.searchFields, config.titleField);\n    config.dataService.descriptionField(config.descriptionField);\n\n    this.changesSubscription = this.completerContent\n      .pipe(\n        map((ev: any) => (ev && ev.title) || ev || ''),\n        distinctUntilChanged(),\n        debounceTime(this.delay)\n      )\n      .subscribe((search: string) => {\n        this.query = search;\n        this.setFilter();\n      });\n  }\n\n  inputTextChanged(event: string) {\n    // workaround to trigger the search event when the home/end buttons are clicked\n    // when this happens the [(ngModel)]=\"query\" is set to \"\" but the (selected) method is not called\n    // so here it gets called manually\n    if (event === '') {\n      this.completerContent.next(event);\n    }\n  }\n}\n","import { Component, OnChanges, OnInit, SimpleChanges } from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { debounceTime, distinctUntilChanged, skip } from 'rxjs/operators';\n\nimport { DefaultFilter } from './default-filter';\n\n@Component({\n  selector: 'input-filter',\n  template: `\n    <input\n      [ngClass]=\"inputClass\"\n      [formControl]=\"inputControl\"\n      class=\"form-control\"\n      type=\"text\"\n      placeholder=\"{{ column.title }}\"/>\n  `,\n})\nexport class InputFilterComponent extends DefaultFilter implements OnInit, OnChanges {\n\n  inputControl = new FormControl();\n\n  constructor() {\n    super();\n  }\n\n  ngOnInit() {\n    if (this.query) {\n      this.inputControl.setValue(this.query);\n    }\n    this.inputControl.valueChanges\n      .pipe(\n        distinctUntilChanged(),\n        debounceTime(this.delay),\n      )\n      .subscribe((value: string) => {\n        this.query = this.inputControl.value;\n        this.setFilter();\n      });\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.query) {\n      this.inputControl.setValue(this.query);\n    }\n  }\n}\n","import {Component, Input} from '@angular/core';\n\nimport {FilterDefault} from \"./filter-default\";\n\n@Component({\n  selector: 'default-table-filter',\n  template: `\n    <ng-container [ngSwitch]=\"column.getFilterType()\">\n      <select-filter *ngSwitchCase=\"'list'\"\n                     [query]=\"query\"\n                     [ngClass]=\"inputClass\"\n                     [column]=\"column\"\n                     (filter)=\"onFilter($event)\">\n      </select-filter>\n      <checkbox-filter *ngSwitchCase=\"'checkbox'\"\n                       [query]=\"query\"\n                       [ngClass]=\"inputClass\"\n                       [column]=\"column\"\n                       (filter)=\"onFilter($event)\">\n      </checkbox-filter>\n      <completer-filter *ngSwitchCase=\"'completer'\"\n                        [query]=\"query\"\n                        [ngClass]=\"inputClass\"\n                        [column]=\"column\"\n                        (filter)=\"onFilter($event)\">\n      </completer-filter>\n      <input-filter *ngSwitchDefault\n                    [query]=\"query\"\n                    [ngClass]=\"inputClass\"\n                    [column]=\"column\"\n                    (filter)=\"onFilter($event)\">\n      </input-filter>\n    </ng-container>\n  `,\n})\nexport class DefaultFilterComponent extends FilterDefault {\n  @Input() query: string;\n}\n","import { Component, OnChanges, SimpleChanges } from '@angular/core';\nimport { FilterDefault } from './filter-default';\nimport { Subscription } from 'rxjs';\n\n@Component({\n  selector: 'ng2-smart-table-filter',\n  styleUrls: ['./filter.component.scss'],\n  template: `\n      <div class=\"ng2-smart-filter\" *ngIf=\"column.isFilterable\" [ngSwitch]=\"column.getFilterType()\">\n        <custom-table-filter *ngSwitchCase=\"'custom'\"\n                             [query]=\"query\"\n                             [column]=\"column\"\n                             [source]=\"source\"\n                             [inputClass]=\"inputClass\"\n                             (filter)=\"onFilter($event)\">\n        </custom-table-filter>\n        <default-table-filter *ngSwitchDefault\n                              [query]=\"query\"\n                              [column]=\"column\"\n                              [source]=\"source\"\n                              [inputClass]=\"inputClass\"\n                              (filter)=\"onFilter($event)\">\n        </default-table-filter>\n      </div>\n    `,\n})\nexport class FilterComponent extends FilterDefault implements OnChanges {\n  query: string = '';\n  protected dataChangedSub: Subscription;\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.source) {\n      if (!changes.source.firstChange) {\n        this.dataChangedSub.unsubscribe();\n      }\n      this.dataChangedSub = this.source.onChanged().subscribe((dataChanges) => {\n        const filterConf = this.source.getFilter();\n        if (filterConf && filterConf.filters && filterConf.filters.length === 0) {\n          this.query = '';\n\n          // add a check for existing filters an set the query if one exists for this column\n          // this covers instances where the filter is set by user code while maintaining existing functionality\n        } else if (filterConf && filterConf.filters && filterConf.filters.length > 0) {\n          filterConf.filters.forEach((k: any, v: any) => {\n            if (k.field == this.column.id) {\n              this.query = k.search;\n            }\n          });\n        }\n      });\n    }\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { Ng2CompleterModule } from 'ng2-completer';\n\nimport { FilterComponent } from './filter.component';\nimport { DefaultFilterComponent } from \"./default-filter.component\";\nimport { CustomFilterComponent } from \"./custom-filter.component\";\nimport { CheckboxFilterComponent } from './filter-types/checkbox-filter.component';\nimport { CompleterFilterComponent } from './filter-types/completer-filter.component';\nimport { InputFilterComponent } from './filter-types/input-filter.component';\nimport { SelectFilterComponent } from './filter-types/select-filter.component';\nimport { DefaultFilter } from './filter-types/default-filter';\nimport { FilterDefault } from './filter-default';\n\nconst FILTER_COMPONENTS = [\n  FilterDefault,\n  DefaultFilter,\n  FilterComponent,\n  DefaultFilterComponent,\n  CustomFilterComponent,\n  CheckboxFilterComponent,\n  CompleterFilterComponent,\n  InputFilterComponent,\n  SelectFilterComponent,\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    Ng2CompleterModule,\n  ],\n  declarations: [\n    ...FILTER_COMPONENTS,\n  ],\n  exports: [\n    ...FILTER_COMPONENTS,\n  ],\n})\nexport class FilterModule { }\n","import { Component, Input, Output, EventEmitter, OnChanges, SimpleChanges } from '@angular/core';\nimport { Subscription } from 'rxjs';\n\nimport { DataSource } from '../../lib/data-source/data-source';\n\n@Component({\n  selector: 'ng2-smart-table-pager',\n  styleUrls: ['./pager.component.scss'],\n  template: `\n    <nav *ngIf=\"shouldShow()\" class=\"ng2-smart-pagination-nav\">\n      <ul class=\"ng2-smart-pagination pagination\">\n        <li class=\"ng2-smart-page-item page-item\" [ngClass]=\"{disabled: getPage() == 1}\">\n          <a class=\"ng2-smart-page-link page-link\" href=\"#\"\n          (click)=\"getPage() == 1 ? false : paginate(1)\" aria-label=\"First\">\n            <span aria-hidden=\"true\">&laquo;</span>\n            <span class=\"sr-only\">First</span>\n          </a>\n        </li>\n        <li class=\"ng2-smart-page-item page-item\" [ngClass]=\"{disabled: getPage() == 1}\">\n          <a class=\"ng2-smart-page-link page-link page-link-prev\" href=\"#\"\n             (click)=\"getPage() == 1 ? false : prev()\" aria-label=\"Prev\">\n            <span aria-hidden=\"true\">&lt;</span>\n            <span class=\"sr-only\">Prev</span>\n          </a>\n        </li>\n        <li class=\"ng2-smart-page-item page-item\"\n        [ngClass]=\"{active: getPage() == page}\" *ngFor=\"let page of getPages()\">\n          <span class=\"ng2-smart-page-link page-link\"\n          *ngIf=\"getPage() == page\">{{ page }} <span class=\"sr-only\">(current)</span></span>\n          <a class=\"ng2-smart-page-link page-link\" href=\"#\"\n          (click)=\"paginate(page)\" *ngIf=\"getPage() != page\">{{ page }}</a>\n        </li>\n\n        <li class=\"ng2-smart-page-item page-item\"\n            [ngClass]=\"{disabled: getPage() == getLast()}\">\n          <a class=\"ng2-smart-page-link page-link page-link-next\" href=\"#\"\n             (click)=\"getPage() == getLast() ? false : next()\" aria-label=\"Next\">\n            <span aria-hidden=\"true\">&gt;</span>\n            <span class=\"sr-only\">Next</span>\n          </a>\n        </li>\n        \n        <li class=\"ng2-smart-page-item page-item\"\n        [ngClass]=\"{disabled: getPage() == getLast()}\">\n          <a class=\"ng2-smart-page-link page-link\" href=\"#\"\n          (click)=\"getPage() == getLast() ? false : paginate(getLast())\" aria-label=\"Last\">\n            <span aria-hidden=\"true\">&raquo;</span>\n            <span class=\"sr-only\">Last</span>\n          </a>\n        </li>\n      </ul>\n    </nav>\n    \n    <nav *ngIf=\"perPageSelect && perPageSelect.length > 0\" class=\"ng2-smart-pagination-per-page\">\n      <label for=\"per-page\">\n        Per Page:\n      </label>\n      <select (change)=\"onChangePerPage($event)\" [(ngModel)]=\"currentPerPage\" id=\"per-page\">\n        <option *ngFor=\"let item of perPageSelect\" [value]=\"item\">{{ item }}</option>\n      </select>\n    </nav>\n  `,\n})\nexport class PagerComponent implements OnChanges {\n\n  @Input() source: DataSource;\n  @Input() perPageSelect: any[] = [];\n\n  @Output() changePage = new EventEmitter<any>();\n\n  currentPerPage: any;\n\n  protected pages: Array<any>;\n  protected page: number;\n  protected count: number = 0;\n  protected perPage: number;\n\n  protected dataChangedSub: Subscription;\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.source) {\n      if (!changes.source.firstChange) {\n        this.dataChangedSub.unsubscribe();\n      }\n      this.dataChangedSub = this.source.onChanged().subscribe((dataChanges) => {\n        this.page = this.source.getPaging().page;\n        this.perPage = this.source.getPaging().perPage;\n        this.currentPerPage = this.perPage;\n        this.count = this.source.count();\n        if (this.isPageOutOfBounce()) {\n          this.source.setPage(--this.page);\n        }\n\n        this.processPageChange(dataChanges);\n        this.initPages();\n      });\n    }\n  }\n\n  /**\n   * We change the page here depending on the action performed against data source\n   * if a new element was added to the end of the table - then change the page to the last\n   * if a new element was added to the beginning of the table - then to the first page\n   * @param changes\n   */\n  processPageChange(changes: any) {\n    if (changes['action'] === 'prepend') {\n      this.source.setPage(1);\n    }\n    if (changes['action'] === 'append') {\n      this.source.setPage(this.getLast());\n    }\n  }\n\n  shouldShow(): boolean {\n    return this.source.count() > this.perPage;\n  }\n\n  paginate(page: number): boolean {\n    this.source.setPage(page);\n    this.page = page;\n    this.changePage.emit({ page });\n    return false;\n  }\n\n  next(): boolean {\n    return this.paginate(this.getPage() + 1);\n  }\n\n  prev(): boolean {\n    return this.paginate(this.getPage() - 1);\n  }\n\n  getPage(): number {\n    return this.page;\n  }\n\n  getPages(): Array<any> {\n    return this.pages;\n  }\n\n  getLast(): number {\n    return Math.ceil(this.count / this.perPage);\n  }\n\n  isPageOutOfBounce(): boolean {\n    return (this.page * this.perPage) >= (this.count + this.perPage) && this.page > 1;\n  }\n\n  initPages() {\n    const pagesCount = this.getLast();\n    let showPagesCount = 4;\n    showPagesCount = pagesCount < showPagesCount ? pagesCount : showPagesCount;\n    this.pages = [];\n\n    if (this.shouldShow()) {\n\n      let middleOne = Math.ceil(showPagesCount / 2);\n      middleOne = this.page >= middleOne ? this.page : middleOne;\n\n      let lastOne = middleOne + Math.floor(showPagesCount / 2);\n      lastOne = lastOne >= pagesCount ? pagesCount : lastOne;\n\n      const firstOne = lastOne - showPagesCount + 1;\n\n      for (let i = firstOne; i <= lastOne; i++) {\n        this.pages.push(i);\n      }\n    }\n  }\n\n  onChangePerPage(event: any) {\n    if (this.currentPerPage) {\n\n      if (typeof this.currentPerPage === 'string' && this.currentPerPage.toLowerCase() === 'all') {\n        this.source.getPaging().perPage = null;\n      } else {\n        this.source.getPaging().perPage = this.currentPerPage * 1;\n        this.source.refresh();\n      }\n      this.initPages();\n    }\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\n\nimport { PagerComponent } from './pager.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n  ],\n  declarations: [\n    PagerComponent,\n  ],\n  exports: [\n    PagerComponent,\n  ],\n})\nexport class PagerModule { }\n","import { ChangeDetectionStrategy, Component, EventEmitter, Input, Output } from '@angular/core';\nimport { Row } from '../../../lib/data-set/row';\n\nimport { Grid } from '../../../lib/grid';\n\n@Component({\n    selector: 'ng2-st-tbody-custom',\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    template: `\n      <a *ngFor=\"let action of grid.getSetting('actions.custom')\" href=\"#\"\n         class=\"ng2-smart-action ng2-smart-action-custom-custom\" \n         [innerHTML]=\"action.title\"\n         (click)=\"onCustom(action, $event)\"></a>\n        `\n})\nexport class TbodyCustomComponent {\n\n    @Input() grid: Grid;\n    @Input() row: Row;\n    @Input() source: any;\n    @Output() custom = new EventEmitter<any>();\n\n    onCustom(action: any, event: any) {\n        event.preventDefault();\n        event.stopPropagation();\n\n        this.custom.emit({\n            action: action.name,\n            data: this.row.getData(),\n            source: this.source\n        });\n    }\n\n}\n","import {Component, Input, Output, EventEmitter, OnChanges, ChangeDetectionStrategy } from '@angular/core';\n\nimport { Grid } from '../../../lib/grid';\nimport { Row } from '../../../lib/data-set/row';\nimport { DataSource } from '../../../lib/data-source/data-source';\n\n@Component({\n  selector: 'ng2-st-tbody-edit-delete',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  template: `\n    <a href=\"#\" *ngIf=\"isActionEdit\" class=\"ng2-smart-action ng2-smart-action-edit-edit\"\n        [innerHTML]=\"editRowButtonContent\" (click)=\"onEdit($event)\"></a>\n    <a href=\"#\" *ngIf=\"isActionDelete\" class=\"ng2-smart-action ng2-smart-action-delete-delete\"\n        [innerHTML]=\"deleteRowButtonContent\" (click)=\"onDelete($event)\"></a>\n  `,\n})\nexport class TbodyEditDeleteComponent implements OnChanges {\n\n  @Input() grid: Grid;\n  @Input() row: Row;\n  @Input() source: DataSource;\n  @Input() deleteConfirm: EventEmitter<any>;\n  @Input() editConfirm: EventEmitter<any>;\n\n  @Output() edit = new EventEmitter<any>();\n  @Output() delete = new EventEmitter<any>();\n  @Output() editRowSelect = new EventEmitter<any>();\n\n  isActionEdit: boolean;\n  isActionDelete: boolean;\n  editRowButtonContent: string;\n  deleteRowButtonContent: string;\n\n  onEdit(event: any) {\n    event.preventDefault();\n    event.stopPropagation();\n\n    this.editRowSelect.emit(this.row);\n\n    if (this.grid.getSetting('mode') === 'external') {\n      this.edit.emit({\n        data: this.row.getData(),\n        source: this.source,\n      });\n    } else {\n      this.grid.edit(this.row);\n    }\n  }\n\n  onDelete(event: any) {\n    event.preventDefault();\n    event.stopPropagation();\n\n    if (this.grid.getSetting('mode') === 'external') {\n      this.delete.emit({\n        data: this.row.getData(),\n        source: this.source,\n      });\n    } else {\n      this.grid.delete(this.row, this.deleteConfirm);\n    }\n  }\n\n  ngOnChanges(){\n    this.isActionEdit = this.grid.getSetting('actions.edit');\n    this.isActionDelete = this.grid.getSetting('actions.delete');\n    this.editRowButtonContent = this.grid.getSetting('edit.editButtonContent');\n    this.deleteRowButtonContent = this.grid.getSetting('delete.deleteButtonContent');\n  }\n}\n","import { Component, Input, EventEmitter, OnChanges } from '@angular/core';\n\nimport { Grid } from '../../../lib/grid';\nimport { Row } from '../../../lib/data-set/row';\n\n@Component({\n  selector: 'ng2-st-tbody-create-cancel',\n  template: `\n    <a href=\"#\" class=\"ng2-smart-action ng2-smart-action-edit-save\"\n        [innerHTML]=\"saveButtonContent\" (click)=\"onSave($event)\"></a>\n    <a href=\"#\" class=\"ng2-smart-action ng2-smart-action-edit-cancel\"\n        [innerHTML]=\"cancelButtonContent\" (click)=\"onCancelEdit($event)\"></a>\n  `,\n})\nexport class TbodyCreateCancelComponent implements OnChanges {\n\n  @Input() grid: Grid;\n  @Input() row: Row;\n  @Input() editConfirm: EventEmitter<any>;\n\n  cancelButtonContent: string;\n  saveButtonContent: string;\n\n  onSave(event: any) {\n    event.preventDefault();\n    event.stopPropagation();\n\n    this.grid.save(this.row, this.editConfirm);\n  }\n\n  onCancelEdit(event: any) {\n    event.preventDefault();\n    event.stopPropagation();\n\n    this.row.isInEditing = false;\n  }\n\n  ngOnChanges() {\n    this.saveButtonContent = this.grid.getSetting('edit.saveButtonContent');\n    this.cancelButtonContent = this.grid.getSetting('edit.cancelButtonContent')\n  }\n}\n","import {Component, Input, Output, EventEmitter, } from '@angular/core';\n\nimport { Grid } from '../../lib/grid';\nimport { DataSource } from '../../lib/data-source/data-source';\nimport { Cell } from '../../lib/data-set/cell';\n\n@Component({\n  selector: '[ng2-st-tbody]',\n  styleUrls: ['./tbody.component.scss'],\n  templateUrl: './tbody.component.html',\n})\nexport class Ng2SmartTableTbodyComponent {\n\n  @Input() grid: Grid;\n  @Input() source: DataSource;\n  @Input() deleteConfirm: EventEmitter<any>;\n  @Input() editConfirm: EventEmitter<any>;\n  @Input() rowClassFunction: Function;\n\n  @Output() save = new EventEmitter<any>();\n  @Output() cancel = new EventEmitter<any>();\n  @Output() edit = new EventEmitter<any>();\n  @Output() delete = new EventEmitter<any>();\n  @Output() custom = new EventEmitter<any>();\n  @Output() edited = new EventEmitter<any>();\n  @Output() userSelectRow = new EventEmitter<any>();\n  @Output() editRowSelect = new EventEmitter<any>();\n  @Output() multipleSelectRow = new EventEmitter<any>();\n  @Output() rowHover = new EventEmitter<any>();\n\n  isMultiSelectVisible: boolean;\n  showActionColumnLeft: boolean;\n  showActionColumnRight: boolean;\n  mode: string;\n  editInputClass: string;\n  isActionAdd: boolean;\n  isActionEdit: boolean;\n  isActionDelete: boolean;\n  noDataMessage: boolean;\n\n  get tableColumnsCount() {\n    const actionColumns = this.isActionAdd || this.isActionEdit || this.isActionDelete ? 1 : 0;\n    return this.grid.getColumns().length + actionColumns;\n  }\n\n  ngOnChanges() {\n    this.isMultiSelectVisible = this.grid.isMultiSelectVisible();\n    this.showActionColumnLeft = this.grid.showActionColumn('left');\n    this.mode = this.grid.getSetting('mode');\n    this.editInputClass = this.grid.getSetting('edit.inputClass');\n    this.showActionColumnRight = this.grid.showActionColumn('right');\n    this.isActionAdd = this.grid.getSetting('actions.add');\n    this.isActionEdit = this.grid.getSetting('actions.edit');\n    this.isActionDelete = this.grid.getSetting('actions.delete');\n    this.noDataMessage = this.grid.getSetting('noDataMessage');\n  }\n\n  getVisibleCells(cells: Array<Cell>): Array<Cell> {\n    return (cells || []).filter((cell: Cell) => !cell.getColumn().hide);\n  }\n}\n","<tr *ngFor=\"let row of grid.getRows()\" (click)=\"userSelectRow.emit(row)\" (mouseover)=\"rowHover.emit(row)\" class=\"ng2-smart-row\" [className]=\"rowClassFunction(row)\" [ngClass]=\"{selected: row.isSelected}\">\n  <td *ngIf=\"isMultiSelectVisible\" class=\"ng2-smart-actions ng2-smart-action-multiple-select\" (click)=\"multipleSelectRow.emit(row)\">\n    <input type=\"checkbox\" class=\"form-control\" [ngModel]=\"row.isSelected\">\n  </td>\n  <td *ngIf=\"!row.isInEditing && showActionColumnLeft\" class=\"ng2-smart-actions\">\n    <ng2-st-tbody-custom [grid]=\"grid\" (custom)=\"custom.emit($event)\" [row]=\"row\" [source]=\"source\"></ng2-st-tbody-custom>\n\n    <ng2-st-tbody-edit-delete [grid]=\"grid\"\n                              [deleteConfirm]=\"deleteConfirm\"\n                              [editConfirm]=\"editConfirm\"\n                              (edit)=\"edit.emit(row)\"\n                              (delete)=\"delete.emit(row)\"\n                              (editRowSelect)=\"editRowSelect.emit($event)\"\n                              [row]=\"row\"\n                              [source]=\"source\">\n    </ng2-st-tbody-edit-delete>\n  </td>\n   <td *ngIf=\"row.isInEditing && showActionColumnLeft\"  class=\"ng2-smart-actions\">\n    <ng2-st-tbody-create-cancel [grid]=\"grid\" [row]=\"row\" [editConfirm]=\"editConfirm\"></ng2-st-tbody-create-cancel>\n  </td>\n  <td *ngFor=\"let cell of getVisibleCells(row.cells)\">\n    <ng2-smart-table-cell [cell]=\"cell\"\n                          [grid]=\"grid\"\n                          [row]=\"row\"\n                          [isNew]=\"false\"\n                          [mode]=\"mode\"\n                          [editConfirm]=\"editConfirm\"\n                          [inputClass]=\"editInputClass\"\n                          [isInEditing]=\"row.isInEditing\">\n    </ng2-smart-table-cell>\n  </td>\n\n  <td *ngIf=\"row.isInEditing && showActionColumnRight\"  class=\"ng2-smart-actions\">\n    <ng2-st-tbody-create-cancel [grid]=\"grid\" [row]=\"row\" [editConfirm]=\"editConfirm\"></ng2-st-tbody-create-cancel>\n  </td>\n\n  <td *ngIf=\"!row.isInEditing && showActionColumnRight\" class=\"ng2-smart-actions\">\n    <ng2-st-tbody-custom [grid]=\"grid\" (custom)=\"custom.emit($event)\" [row]=\"row\" [source]=\"source\"></ng2-st-tbody-custom>\n\n    <ng2-st-tbody-edit-delete [grid]=\"grid\"\n                              [deleteConfirm]=\"deleteConfirm\"\n                              [editConfirm]=\"editConfirm\"\n                              [row]=\"row\"\n                              [source]=\"source\"\n                              (edit)=\"edit.emit(row)\"\n                              (delete)=\"delete.emit(row)\"\n                              (editRowSelect)=\"editRowSelect.emit($event)\">\n    </ng2-st-tbody-edit-delete>\n  </td>\n</tr>\n\n<tr *ngIf=\"grid.getRows().length == 0\">\n  <td [attr.colspan]=\"tableColumnsCount\">\n    {{ noDataMessage }}\n  </td>\n</tr>\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\n\nimport { CellModule } from '../cell/cell.module';\n\nimport { Ng2SmartTableTbodyComponent } from './tbody.component';\nimport { TbodyCreateCancelComponent } from './cells/create-cancel.component';\nimport { TbodyEditDeleteComponent } from './cells/edit-delete.component';\nimport { TbodyCustomComponent } from './cells/custom.component';\n\nconst TBODY_COMPONENTS = [\n  TbodyCreateCancelComponent,\n  TbodyEditDeleteComponent,\n  TbodyCustomComponent,\n  Ng2SmartTableTbodyComponent\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    CellModule,\n  ],\n  declarations: [\n    ...TBODY_COMPONENTS,\n  ],\n  exports: [\n    ...TBODY_COMPONENTS,\n  ],\n})\nexport class TBodyModule { }\n","import { Component, Input } from '@angular/core';\n\nimport { Grid } from '../../../lib/grid';\nimport { DataSource } from '../../../lib/data-source/data-source';\n\n@Component({\n  selector: '[ng2-st-checkbox-select-all]',\n  template: `\n    <input type=\"checkbox\" [ngModel]=\"isAllSelected\">\n  `,\n})\nexport class CheckboxSelectAllComponent {\n\n  @Input() grid: Grid;\n  @Input() source: DataSource;\n  @Input() isAllSelected: boolean;\n}\n","import {Component, Input, AfterViewInit, ElementRef, OnChanges} from '@angular/core';\n\nimport { Grid } from '../../../lib/grid';\n\n@Component({\n  selector: '[ng2-st-actions-title]',\n  template: `\n    <div class=\"ng2-smart-title\">{{ actionsColumnTitle }}</div>\n  `,\n})\nexport class ActionsTitleComponent implements AfterViewInit, OnChanges {\n\n  @Input() grid: Grid;\n\n  actionsColumnTitle: string;\n\n  constructor(private ref: ElementRef) {\n  }\n\n  ngAfterViewInit() {\n    this.ref.nativeElement.classList.add('ng2-smart-actions');\n  }\n\n  ngOnChanges() {\n    this.actionsColumnTitle = this.grid.getSetting('actions.columnTitle');\n  }\n}\n","import { Component, Input, Output, EventEmitter, OnChanges, SimpleChanges } from '@angular/core';\nimport { Subscription } from 'rxjs';\n\nimport { DataSource } from '../../../../lib/data-source/data-source';\nimport { Column } from '../../../../lib/data-set/column';\n\n@Component({\n  selector: 'ng2-smart-table-title',\n  styleUrls: ['./title.component.scss'],\n  template: `\n    <a href=\"#\" *ngIf=\"column.isSortable\"\n                (click)=\"_sort($event)\"\n                class=\"ng2-smart-sort-link sort\"\n                [ngClass]=\"currentDirection\">\n      {{ column.title }}\n    </a>\n    <span class=\"ng2-smart-sort\" *ngIf=\"!column.isSortable\">{{ column.title }}</span>\n  `,\n})\nexport class TitleComponent implements OnChanges {\n\n  currentDirection = '';\n  @Input() column: Column;\n  @Input() source: DataSource;\n  @Output() sort = new EventEmitter<any>();\n\n  protected dataChangedSub: Subscription;\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.source) {\n      if (!changes.source.firstChange) {\n        this.dataChangedSub.unsubscribe();\n      }\n      this.dataChangedSub = this.source.onChanged().subscribe((dataChanges) => {\n        const sortConf = this.source.getSort();\n\n        if (sortConf.length > 0 && sortConf[0]['field'] === this.column.id) {\n          this.currentDirection = sortConf[0]['direction'];\n        } else {\n          this.currentDirection = '';\n        }\n\n        sortConf.forEach((fieldConf: any) => {\n\n        });\n      });\n    }\n  }\n\n  _sort(event: any) {\n    event.preventDefault();\n    this.changeSortDirection();\n    this.source.setSort([\n      {\n        field: this.column.id,\n        direction: this.currentDirection,\n        compare: this.column.getCompareFunction(),\n      },\n    ]);\n    this.sort.emit(null);\n  }\n\n  changeSortDirection(): string {\n    if (this.currentDirection) {\n      const newDirection = this.currentDirection === 'asc' ? 'desc' : 'asc';\n      this.currentDirection = newDirection;\n    } else {\n      this.currentDirection = this.column.sortDirection;\n    }\n    return this.currentDirection;\n  }\n}\n","import { Component, Input, Output, EventEmitter } from '@angular/core';\n\nimport { Column } from '../../../lib/data-set/column';\nimport { DataSource } from '../../../lib/data-source/data-source';\n\n@Component({\n  selector: 'ng2-st-column-title',\n  template: `\n    <div class=\"ng2-smart-title\">\n      <ng2-smart-table-title [source]=\"source\" [column]=\"column\" (sort)=\"sort.emit($event)\"></ng2-smart-table-title>\n    </div>\n  `,\n})\nexport class ColumnTitleComponent {\n\n  @Input() column: Column;\n  @Input() source: DataSource;\n\n  @Output() sort = new EventEmitter<any>();\n\n}\n","import {Component, Input, Output, EventEmitter, OnChanges} from '@angular/core';\n\nimport { Grid } from '../../../lib/grid';\nimport { DataSource } from '../../../lib/data-source/data-source';\nimport { Column } from \"../../../lib/data-set/column\";\n\n@Component({\n  selector: '[ng2-st-thead-titles-row]',\n  template: `\n    <th ng2-st-checkbox-select-all *ngIf=\"isMultiSelectVisible\"\n                                   [grid]=\"grid\"\n                                   [source]=\"source\"\n                                   [isAllSelected]=\"isAllSelected\"\n                                   (click)=\"selectAllRows.emit($event)\">\n    </th>\n    <th ng2-st-actions-title *ngIf=\"showActionColumnLeft\" [grid]=\"grid\"></th>\n    <th *ngFor=\"let column of getVisibleColumns(grid.getColumns())\"\n        class=\"ng2-smart-th {{ column.id }}\"\n        [ngClass]=\"column.class\"\n        [style.width]=\"column.width\">\n      <ng2-st-column-title [source]=\"source\" [column]=\"column\" (sort)=\"sort.emit($event)\"></ng2-st-column-title>\n    </th>\n    <th ng2-st-actions-title *ngIf=\"showActionColumnRight\" [grid]=\"grid\"></th>\n  `,\n})\nexport class TheadTitlesRowComponent implements OnChanges {\n\n  @Input() grid: Grid;\n  @Input() isAllSelected: boolean;\n  @Input() source: DataSource;\n\n  @Output() sort = new EventEmitter<any>();\n  @Output() selectAllRows = new EventEmitter<any>();\n\n  isMultiSelectVisible: boolean;\n  showActionColumnLeft: boolean;\n  showActionColumnRight: boolean;\n\n\n  ngOnChanges() {\n    this.isMultiSelectVisible = this.grid.isMultiSelectVisible();\n    this.showActionColumnLeft = this.grid.showActionColumn('left');\n    this.showActionColumnRight = this.grid.showActionColumn('right');\n  }\n\n  getVisibleColumns(columns: Array<Column>): Array<Column> {\n    return (columns || []).filter((column: Column) => !column.hide);\n  }\n}\n","import { Component, Input, Output, EventEmitter, AfterViewInit, ElementRef, OnChanges } from '@angular/core';\n\nimport { Grid } from '../../../lib/grid';\nimport { DataSource } from '../../../lib/data-source/data-source';\n\n@Component({\n  selector: '[ng2-st-add-button]',\n  template: `\n    <a *ngIf=\"isActionAdd\" href=\"#\" class=\"ng2-smart-action ng2-smart-action-add-add\"\n        [innerHTML]=\"addNewButtonContent\" (click)=\"onAdd($event)\"></a>\n  `,\n})\nexport class AddButtonComponent implements AfterViewInit, OnChanges {\n\n  @Input() grid: Grid;\n  @Input() source: DataSource;\n  @Output() create = new EventEmitter<any>();\n\n  isActionAdd: boolean;\n  addNewButtonContent: string;\n\n  constructor(private ref: ElementRef) {\n  }\n\n  ngAfterViewInit() {\n    this.ref.nativeElement.classList.add('ng2-smart-actions-title', 'ng2-smart-actions-title-add');\n  }\n\n  ngOnChanges() {\n    this.isActionAdd = this.grid.getSetting('actions.add');\n    this.addNewButtonContent = this.grid.getSetting('add.addButtonContent');\n  }\n\n  onAdd(event: any) {\n    event.preventDefault();\n    event.stopPropagation();\n    if (this.grid.getSetting('mode') === 'external') {\n      this.create.emit({\n        source: this.source,\n      });\n    } else {\n      this.grid.createFormShown = true;\n    }\n  }\n}\n","import {Component, Input, Output, EventEmitter, OnChanges} from '@angular/core';\n\nimport { Grid } from '../../../lib/grid';\nimport { DataSource } from '../../../lib/data-source/data-source';\nimport { Column } from \"../../../lib/data-set/column\";\n\n@Component({\n  selector: '[ng2-st-thead-filters-row]',\n  template: `\n    <th *ngIf=\"isMultiSelectVisible\"></th>\n    <th ng2-st-add-button *ngIf=\"showActionColumnLeft\"\n                          [grid]=\"grid\"\n                          (create)=\"create.emit($event)\">\n    </th>\n    <th *ngFor=\"let column of getVisibleColumns(grid.getColumns())\" class=\"ng2-smart-th {{ column.id }}\">\n      <ng2-smart-table-filter [source]=\"source\"\n                              [column]=\"column\"\n                              [inputClass]=\"filterInputClass\"\n                              (filter)=\"filter.emit($event)\">\n      </ng2-smart-table-filter>\n    </th>\n    <th ng2-st-add-button *ngIf=\"showActionColumnRight\"\n                          [grid]=\"grid\"\n                          [source]=\"source\"\n                          (create)=\"create.emit($event)\">\n    </th>\n  `,\n})\nexport class TheadFitlersRowComponent implements OnChanges {\n\n  @Input() grid: Grid;\n  @Input() source: DataSource;\n\n  @Output() create = new EventEmitter<any>();\n  @Output() filter = new EventEmitter<any>();\n\n  isMultiSelectVisible: boolean;\n  showActionColumnLeft: boolean;\n  showActionColumnRight: boolean;\n  filterInputClass: string;\n\n  ngOnChanges() {\n    this.isMultiSelectVisible = this.grid.isMultiSelectVisible();\n    this.showActionColumnLeft = this.grid.showActionColumn('left');\n    this.showActionColumnRight = this.grid.showActionColumn('right');\n    this.filterInputClass = this.grid.getSetting('filter.inputClass');\n  }\n\n  getVisibleColumns(columns: Array<Column>): Array<Column> {\n    return (columns || []).filter((column: Column) => !column.hide);\n  }\n}\n","import {Component, Input, Output, EventEmitter, OnChanges } from '@angular/core';\n\nimport { Grid } from '../../../lib/grid';\n\n@Component({\n  selector: 'ng2-st-actions',\n  template: `\n    <a href=\"#\" class=\"ng2-smart-action ng2-smart-action-add-create\"\n        [innerHTML]=\"createButtonContent\"\n        (click)=\"$event.preventDefault();create.emit($event)\"></a>\n    <a href=\"#\" class=\"ng2-smart-action ng2-smart-action-add-cancel\"\n        [innerHTML]=\"cancelButtonContent\"\n        (click)=\"$event.preventDefault();grid.createFormShown = false;\"></a>\n  `,\n})\nexport class ActionsComponent implements OnChanges {\n\n  @Input() grid: Grid;\n  @Output() create = new EventEmitter<any>();\n\n  createButtonContent: string;\n  cancelButtonContent: string;\n\n  ngOnChanges() {\n    this.createButtonContent = this.grid.getSetting('add.createButtonContent');\n    this.cancelButtonContent = this.grid.getSetting('add.cancelButtonContent');\n  }\n}\n","import { Component, Input, Output, EventEmitter, OnChanges } from '@angular/core';\n\nimport { Grid } from '../../../lib/grid';\nimport { Row } from '../../../lib/data-set/row';\nimport { Cell } from '../../../lib/data-set/cell';\n\n@Component({\n  selector: '[ng2-st-thead-form-row]',\n  template: `\n      <td *ngIf=\"\"></td>\n      <td  *ngIf=\"showActionColumnLeft\"  class=\"ng2-smart-actions\">\n        <ng2-st-actions [grid]=\"grid\" (create)=\"onCreate($event)\"></ng2-st-actions>\n      </td>\n      <td *ngFor=\"let cell of getVisibleCells(grid.getNewRow().getCells())\">\n        <ng2-smart-table-cell [cell]=\"cell\"\n                              [grid]=\"grid\"\n                              [isNew]=\"true\"\n                              [createConfirm]=\"createConfirm\"\n                              [inputClass]=\"addInputClass\"\n                              [isInEditing]=\"grid.getNewRow().isInEditing\"\n                              (edited)=\"onCreate($event)\">\n        </ng2-smart-table-cell>\n      </td>\n      <td  *ngIf=\"showActionColumnRight\"  class=\"ng2-smart-actions\">\n        <ng2-st-actions [grid]=\"grid\" (create)=\"onCreate($event)\"></ng2-st-actions>\n      </td>\n  `,\n})\nexport class TheadFormRowComponent implements OnChanges {\n\n  @Input() grid: Grid;\n  @Input() row: Row;\n  @Input() createConfirm: EventEmitter<any>;\n\n  @Output() create = new EventEmitter<any>();\n\n  isMultiSelectVisible: boolean;\n  showActionColumnLeft: boolean;\n  showActionColumnRight: boolean;\n  addInputClass: string;\n\n  onCreate(event: any) {\n    event.stopPropagation();\n\n    this.grid.create(this.grid.getNewRow(), this.createConfirm);\n  }\n\n  ngOnChanges(){\n    this.isMultiSelectVisible = this.grid.isMultiSelectVisible();\n    this.showActionColumnLeft = this.grid.showActionColumn('left');\n    this.showActionColumnRight = this.grid.showActionColumn('right');\n    this.addInputClass = this.grid.getSetting('add.inputClass');\n  }\n\n  getVisibleCells(cells: Array<Cell>): Array<Cell> {\n    return (cells || []).filter((cell: Cell) => !cell.getColumn().hide);\n  }\n}\n","import {Component, Input, Output, EventEmitter, OnChanges} from '@angular/core';\n\nimport { Grid } from '../../lib/grid';\nimport { DataSource } from '../../lib/data-source/data-source';\n\n@Component({\n    selector: '[ng2-st-thead]',\n    templateUrl: './thead.component.html',\n})\nexport class Ng2SmartTableTheadComponent implements OnChanges {\n\n    @Input() grid: Grid;\n    @Input() source: DataSource;\n    @Input() isAllSelected: boolean;\n    @Input() createConfirm: EventEmitter<any>;\n\n    @Output() sort = new EventEmitter<any>();\n    @Output() selectAllRows = new EventEmitter<any>();\n    @Output() create = new EventEmitter<any>();\n    @Output() filter = new EventEmitter<any>();\n\n    isHideHeader: boolean;\n    isHideSubHeader: boolean;\n\n  ngOnChanges() {\n      this.isHideHeader = this.grid.getSetting('hideHeader');\n      this.isHideSubHeader = this.grid.getSetting('hideSubHeader');\n    }\n}\n","<tr ng2-st-thead-titles-row *ngIf=\"!isHideHeader\"\n                            class=\"ng2-smart-titles\"\n                            [grid]=\"grid\"\n                            [isAllSelected]=\"isAllSelected\"\n                            [source]=\"source\"\n                            (sort)=\"sort.emit($event)\"\n                            (selectAllRows)=\"selectAllRows.emit($event)\">\n</tr>\n\n<tr ng2-st-thead-filters-row *ngIf=\"!isHideSubHeader\"\n                              class=\"ng2-smart-filters\"\n                              [grid]=\"grid\"\n                              [source]=\"source\"\n                              (create)=\"create.emit($event)\"\n                              (filter)=\"filter.emit($event)\">\n</tr>\n\n<tr ng2-st-thead-form-row *ngIf=\"grid.createFormShown\"\n                          [grid]=\"grid\"\n                          [createConfirm]=\"createConfirm\">\n</tr>\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\n\nimport { FilterModule } from '../filter/filter.module';\nimport { CellModule } from '../cell/cell.module';\n\nimport { Ng2SmartTableTheadComponent } from './thead.component';\nimport { ActionsComponent } from './cells/actions.component';\nimport { ActionsTitleComponent } from './cells/actions-title.component';\nimport { AddButtonComponent } from './cells/add-button.component';\nimport { CheckboxSelectAllComponent } from './cells/checkbox-select-all.component';\nimport { ColumnTitleComponent } from './cells/column-title.component';\nimport { TitleComponent } from './cells/title/title.component';\nimport { TheadFitlersRowComponent } from './rows/thead-filters-row.component';\nimport { TheadFormRowComponent } from './rows/thead-form-row.component';\nimport { TheadTitlesRowComponent } from './rows/thead-titles-row.component';\n\nconst THEAD_COMPONENTS = [\n  ActionsComponent,\n  ActionsTitleComponent,\n  AddButtonComponent,\n  CheckboxSelectAllComponent,\n  ColumnTitleComponent,\n  TitleComponent,\n  TheadFitlersRowComponent,\n  TheadFormRowComponent,\n  TheadTitlesRowComponent,\n  Ng2SmartTableTheadComponent,\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    FilterModule,\n    CellModule,\n  ],\n  declarations: [\n    ...THEAD_COMPONENTS,\n  ],\n  exports: [\n    ...THEAD_COMPONENTS,\n  ],\n})\nexport class THeadModule { }\n","import { cloneDeep } from 'lodash';\n\n/**\n * Extending object that entered in first argument.\n *\n * Returns extended object or false if have no target object or incorrect type.\n *\n * If you wish to clone source object (without modify it), just use empty new\n * object as first argument, like this:\n *   deepExtend({}, yourObj_1, [yourObj_N]);\n */\nexport const deepExtend = function(...objects: Array<any>): any {\n  if (arguments.length < 1 || typeof arguments[0] !== 'object') {\n    return false;\n  }\n\n  if (arguments.length < 2) {\n    return arguments[0];\n  }\n\n  const target = arguments[0];\n\n  // convert arguments to array and cut off target object\n  const args = Array.prototype.slice.call(arguments, 1);\n\n  let val, src;\n\n  args.forEach((obj: any) => {\n    // skip argument if it is array or isn't object\n    if (typeof obj !== 'object' || Array.isArray(obj)) {\n      return;\n    }\n\n    Object.keys(obj).forEach(function (key) {\n      src = target[key]; // source value\n      val = obj[key]; // new value\n\n      // recursion prevention\n      if (val === target) {\n        return;\n\n        /**\n         * if new value isn't object then just overwrite by new value\n         * instead of extending.\n         */\n      } else if (typeof val !== 'object' || val === null) {\n        target[key] = val;\n        return;\n\n        // just clone arrays (and recursive clone objects inside)\n      } else if (Array.isArray(val)) {\n        target[key] = cloneDeep(val);\n        return;\n\n        // overwrite by new value if source isn't object or array\n      } else if (typeof src !== 'object' || src === null || Array.isArray(src)) {\n        target[key] = deepExtend({}, val);\n        return;\n\n        // source value and new value is objects both, extending...\n      } else {\n        target[key] = deepExtend(src, val);\n        return;\n      }\n    });\n  });\n\n  return target;\n};\n\nexport class Deferred {\n\n  promise: Promise<any>;\n\n  resolve: any;\n  reject: any;\n\n  constructor() {\n    this.promise = new Promise((resolve, reject) => {\n      this.resolve = resolve;\n      this.reject = reject;\n    });\n  }\n}\n\n// getDeepFromObject({result: {data: 1}}, 'result.data', 2); // returns 1\nexport function getDeepFromObject(object = {}, name: string, defaultValue?: any) {\n  const keys = name.split('.');\n  // clone the object\n  let level = deepExtend({}, object);\n  keys.forEach((k) => {\n    if (level && typeof level[k] !== 'undefined') {\n      level = level[k];\n    }\n  });\n\n  return typeof level === 'undefined' ? defaultValue : level;\n}\n\nexport function getPageForRowIndex(index: number, perPage: number): number {\n  // we need to add 1 to convert 0-based index to 1-based page number.\n  return Math.floor(index / perPage) + 1;\n}\n","import { Column } from './column';\nimport { DataSet } from './data-set';\nimport { Row } from './row';\n\nexport function prepareValue (value: any) { return value }\n\nexport class Cell {\n\n  newValue: any = '';\n  protected static PREPARE = prepareValue;\n\n  constructor(protected value: any, protected row: Row, protected column: any, protected dataSet: DataSet) {\n    this.newValue = value;\n  }\n\n  getColumn(): Column {\n    return this.column;\n  }\n\n  getRow(): Row {\n    return this.row;\n  }\n\n  getValue(): any {\n    const valid = this.column.getValuePrepareFunction() instanceof Function;\n    const prepare = valid ? this.column.getValuePrepareFunction() : Cell.PREPARE;\n    return prepare.call(null, this.value, this.row.getData(), this);\n  }\n\n  setValue(value: any): any {\n    this.newValue = value;\n  }\n\n  getId(): string {\n    return this.getColumn().id;\n  }\n\n  getTitle(): string {\n    return this.getColumn().title;\n  }\n\n  isEditable(): boolean {\n    if (this.getRow().index === -1) {\n      return this.getColumn().isAddable;\n    }\n    else {\n      return this.getColumn().isEditable;\n    }\n  }\n\n}\n","import { Cell } from './cell';\nimport { Column } from './column';\nimport { DataSet } from './data-set';\n\nexport class Row {\n\n  isSelected: boolean = false;\n  isInEditing: boolean = false;\n  cells: Array<Cell> = [];\n\n\n  constructor(public index: number, protected data: any, protected _dataSet: DataSet) {\n    this.process();\n  }\n\n  getCell(column: Column): Cell {\n    return this.cells.find(el => el.getColumn() === column);\n  }\n\n  getCells() {\n    return this.cells;\n  }\n\n  getData(): any {\n    return this.data;\n  }\n\n  getIsSelected(): boolean {\n    return this.isSelected;\n  }\n\n  getNewData(): any {\n    const values = Object.assign({}, this.data);\n    this.getCells().forEach((cell) => values[cell.getColumn().id] = cell.newValue);\n    return values;\n  }\n\n  setData(data: any): any {\n    this.data = data;\n    this.process();\n  }\n\n  process() {\n    this.cells = [];\n    this._dataSet.getColumns().forEach((column: Column) => {\n      const cell = this.createCell(column);\n      this.cells.push(cell);\n    });\n  }\n\n  createCell(column: Column): Cell {\n    const defValue = (column as any).settings.defaultValue ? (column as any).settings.defaultValue : '';\n    const value = typeof this.data[column.id] === 'undefined' ? defValue : this.data[column.id];\n    return new Cell(value, this, column, this._dataSet);\n  }\n}\n","import { DataSet } from './data-set';\n\nexport class Column {\n\n  title: string = '';\n  type: string = '';\n  class: string = '';\n  width: string = '';\n  hide: boolean = false;\n  isSortable: boolean = false;\n  isEditable: boolean = true;\n  isAddable: boolean = true;\n  isFilterable: boolean = false;\n  sortDirection: string = '';\n  defaultSortDirection: string = '';\n  editor: { type: string, config: any, component: any } = { type: '', config: {}, component: null };\n  filter: { type: string, config: any, component: any } = { type: '', config: {}, component: null };\n  renderComponent: any = null;\n  compareFunction: Function;\n  valuePrepareFunction: Function;\n  filterFunction: Function;\n  onComponentInitFunction: Function;\n\n  constructor(public id: string, protected settings: any, protected dataSet: DataSet) {\n    this.process();\n  }\n\n  getOnComponentInitFunction(): Function {\n    return this.onComponentInitFunction;\n  }\n\n  getCompareFunction(): Function {\n    return this.compareFunction;\n  }\n\n  getValuePrepareFunction(): Function {\n    return this.valuePrepareFunction;\n  }\n\n  getFilterFunction(): Function {\n    return this.filterFunction;\n  }\n\n  getConfig(): any {\n    return this.editor && this.editor.config;\n  }\n\n  getFilterType(): any {\n    return this.filter && this.filter.type;\n  }\n\n  getFilterConfig(): any {\n    return this.filter && this.filter.config;\n  }\n\n  protected process() {\n    this.title = this.settings['title'];\n    this.class = this.settings['class'];\n    this.width = this.settings['width'];\n    this.hide = !!this.settings['hide'];\n    this.type = this.prepareType();\n    this.editor = this.settings['editor'];\n    this.filter = this.settings['filter'];\n    this.renderComponent = this.settings['renderComponent'];\n\n    this.isFilterable = typeof this.settings['filter'] === 'undefined' ? true : !!this.settings['filter'];\n    this.defaultSortDirection = ['asc', 'desc']\n      .indexOf(this.settings['sortDirection']) !== -1 ? this.settings['sortDirection'] : '';\n    this.isSortable = typeof this.settings['sort'] === 'undefined' ? true : !!this.settings['sort'];\n    this.isEditable = typeof this.settings['editable'] === 'undefined' ? true : !!this.settings['editable'];\n    this.isAddable=typeof this.settings['addable'] === 'undefined' ? true : !!this.settings['addable'];\n    this.sortDirection = this.prepareSortDirection();\n\n    this.compareFunction = this.settings['compareFunction'];\n    this.valuePrepareFunction = this.settings['valuePrepareFunction'];\n    this.filterFunction = this.settings['filterFunction'];\n    this.onComponentInitFunction = this.settings['onComponentInitFunction'];\n  }\n\n  prepareType(): string {\n    return this.settings['type'] || this.determineType();\n  }\n\n  prepareSortDirection(): string {\n    return this.settings['sort'] === 'desc' ? 'desc' : 'asc';\n  }\n\n  determineType(): string {\n    // TODO: determine type by data\n    return 'text';\n  }\n}\n","import { Row } from './row';\nimport { Column } from './column';\n\nexport class DataSet {\n\n  newRow: Row;\n\n  protected data: Array<any> = [];\n  protected columns: Array<Column> = [];\n  protected rows: Array<Row> = [];\n  protected selectedRow: Row;\n  protected willSelect: string;\n\n  constructor(data: Array<any> = [], protected columnSettings: Object) {\n    this.createColumns(columnSettings);\n    this.setData(data);\n\n    this.createNewRow();\n  }\n\n  setData(data: Array<any>) {\n    this.data = data;\n    this.createRows();\n  }\n\n  getColumns(): Array<Column> {\n    return this.columns;\n  }\n\n  getRows(): Array<Row> {\n    return this.rows;\n  }\n\n  getFirstRow(): Row {\n    return this.rows[0];\n  }\n\n  getLastRow(): Row {\n    return this.rows[this.rows.length - 1];\n  }\n\n  findRowByData(data: any): Row {\n    return this.rows.find((row: Row) => row.getData() === data);\n  }\n\n  deselectAll() {\n    this.rows.forEach((row) => {\n      row.isSelected = false;\n    });\n    // we need to clear selectedRow field because no one row selected\n    this.selectedRow = undefined;\n  }\n\n  selectRow(row: Row): Row | undefined {\n    const previousIsSelected = row.isSelected;\n    this.deselectAll();\n\n    row.isSelected = !previousIsSelected;\n    this.selectedRow = row;\n\n    return this.selectedRow;\n  }\n\n  multipleSelectRow(row: Row): Row {\n    row.isSelected = !row.isSelected;\n    this.selectedRow = row;\n\n    return this.selectedRow;\n  }\n\n  selectPreviousRow(): Row {\n    if (this.rows.length > 0) {\n      let index = this.selectedRow ? this.selectedRow.index : 0;\n      if (index > this.rows.length - 1) {\n        index = this.rows.length - 1;\n      }\n      this.selectRow(this.rows[index]);\n      return this.selectedRow;\n    }\n  }\n\n  selectFirstRow(): Row | undefined {\n    if (this.rows.length > 0) {\n      this.selectRow(this.rows[0]);\n      return this.selectedRow;\n    }\n  }\n\n  selectLastRow(): Row | undefined {\n    if (this.rows.length > 0) {\n      this.selectRow(this.rows[this.rows.length - 1]);\n      return this.selectedRow;\n    }\n  }\n\n  selectRowByIndex(index: number): Row | undefined {\n    const rowsLength: number = this.rows.length;\n    if (rowsLength === 0) {\n      return;\n    }\n    if (!index) {\n      this.selectFirstRow();\n      return this.selectedRow;\n    }\n    if (index > 0 && index < rowsLength) {\n      this.selectRow(this.rows[index]);\n      return this.selectedRow;\n    }\n    // we need to deselect all rows if we got an incorrect index\n    this.deselectAll();\n  }\n\n  willSelectFirstRow() {\n    this.willSelect = 'first';\n  }\n\n  willSelectLastRow() {\n    this.willSelect = 'last';\n  }\n\n  select(selectedRowIndex?: number): Row | undefined {\n    if (this.getRows().length === 0) {\n      return;\n    }\n    if (this.willSelect) {\n      if (this.willSelect === 'first') {\n        this.selectFirstRow();\n      }\n      if (this.willSelect === 'last') {\n        this.selectLastRow();\n      }\n      this.willSelect = '';\n    } else {\n      this.selectRowByIndex(selectedRowIndex);\n    }\n\n    return this.selectedRow;\n  }\n\n  createNewRow() {\n    this.newRow = new Row(-1, {}, this);\n    this.newRow.isInEditing = true;\n  }\n\n  /**\n   * Create columns by mapping from the settings\n   * @param settings\n   * @private\n   */\n  createColumns(settings: any) {\n    for (const id in settings) {\n      if (settings.hasOwnProperty(id)) {\n        this.columns.push(new Column(id, settings[id], this));\n      }\n    }\n  }\n\n  /**\n   * Create rows based on current data prepared in data source\n   * @private\n   */\n  createRows() {\n    this.rows = [];\n    this.data.forEach((el, index) => {\n      this.rows.push(new Row(index, el, this));\n    });\n  }\n}\n","import { Subject, Subscription } from 'rxjs';\nimport { Observable } from 'rxjs';\nimport { EventEmitter } from '@angular/core';\n\nimport { Deferred, getDeepFromObject, getPageForRowIndex } from './helpers';\nimport { Column } from './data-set/column';\nimport { Row } from './data-set/row';\nimport { DataSet } from './data-set/data-set';\nimport { DataSource } from './data-source/data-source';\n\nexport class Grid {\n\n  createFormShown: boolean = false;\n\n  source: DataSource;\n  settings: any;\n  dataSet: DataSet;\n\n  onSelectRowSource = new Subject<any>();\n  onDeselectRowSource = new Subject<any>();\n\n  private sourceOnChangedSubscription: Subscription;\n  private sourceOnUpdatedSubscription: Subscription;\n\n  constructor(source: DataSource, settings: any) {\n    this.setSettings(settings);\n    this.setSource(source);\n  }\n\n  detach(): void {\n    if (this.sourceOnChangedSubscription) {\n      this.sourceOnChangedSubscription.unsubscribe();\n    }\n    if (this.sourceOnUpdatedSubscription) {\n      this.sourceOnUpdatedSubscription.unsubscribe();\n    }\n  }\n\n  showActionColumn(position: string): boolean {\n    return this.isCurrentActionsPosition(position) && this.isActionsVisible();\n  }\n\n  isCurrentActionsPosition(position: string): boolean {\n    return position == this.getSetting('actions.position');\n  }\n\n  isActionsVisible(): boolean {\n    return this.getSetting('actions.add') || this.getSetting('actions.edit') || this.getSetting('actions.delete') || this.getSetting('actions.custom').length;\n  }\n\n  isMultiSelectVisible(): boolean {\n    return this.getSetting('selectMode') === 'multi';\n  }\n\n  getNewRow(): Row {\n    return this.dataSet.newRow;\n  }\n\n  setSettings(settings: Object) {\n    this.settings = settings;\n    this.dataSet = new DataSet([], this.getSetting('columns'));\n\n    if (this.source) {\n      this.source.refresh();\n    }\n  }\n\n  getDataSet(): DataSet {\n    return this.dataSet;\n  }\n\n  setSource(source: DataSource) {\n    this.source = this.prepareSource(source);\n    this.detach();\n\n    this.sourceOnChangedSubscription = this.source.onChanged().subscribe((changes: any) => this.processDataChange(changes));\n\n    this.sourceOnUpdatedSubscription = this.source.onUpdated().subscribe((data: any) => {\n      const changedRow = this.dataSet.findRowByData(data);\n      changedRow.setData(data);\n    });\n  }\n\n  getSetting(name: string, defaultValue?: any): any {\n    return getDeepFromObject(this.settings, name, defaultValue);\n  }\n\n  getColumns(): Array<Column> {\n    return this.dataSet.getColumns();\n  }\n\n  getRows(): Array<Row> {\n    return this.dataSet.getRows();\n  }\n\n  selectRow(row: Row) {\n    this.dataSet.selectRow(row);\n  }\n\n  multipleSelectRow(row: Row) {\n    this.dataSet.multipleSelectRow(row);\n  }\n\n  onSelectRow(): Observable<any> {\n    return this.onSelectRowSource.asObservable();\n  }\n\n  onDeselectRow(): Observable<any> {\n    return this.onDeselectRowSource.asObservable();\n  }\n\n  edit(row: Row) {\n    row.isInEditing = true;\n  }\n\n  create(row: Row, confirmEmitter: EventEmitter<any>) {\n\n    const deferred = new Deferred();\n    deferred.promise.then((newData) => {\n      newData = newData ? newData : row.getNewData();\n      if (deferred.resolve.skipAdd) {\n        this.createFormShown = false;\n      } else {\n        this.source.prepend(newData).then(() => {\n          this.createFormShown = false;\n          this.dataSet.createNewRow();\n        });\n      }\n    }).catch((err) => {\n      // doing nothing\n    });\n\n    if (this.getSetting('add.confirmCreate')) {\n      confirmEmitter.emit({\n        newData: row.getNewData(),\n        source: this.source,\n        confirm: deferred,\n      });\n    } else {\n      deferred.resolve();\n    }\n  }\n\n  save(row: Row, confirmEmitter: EventEmitter<any>) {\n\n    const deferred = new Deferred();\n    deferred.promise.then((newData) => {\n      newData = newData ? newData : row.getNewData();\n      if (deferred.resolve.skipEdit) {\n        row.isInEditing = false;\n      } else {\n        this.source.update(row.getData(), newData).then(() => {\n          row.isInEditing = false;\n        });\n      }\n    }).catch((err) => {\n      // doing nothing\n    });\n\n    if (this.getSetting('edit.confirmSave')) {\n      confirmEmitter.emit({\n        data: row.getData(),\n        newData: row.getNewData(),\n        source: this.source,\n        confirm: deferred,\n      });\n    } else {\n      deferred.resolve();\n    }\n  }\n\n  delete(row: Row, confirmEmitter: EventEmitter<any>) {\n\n    const deferred = new Deferred();\n    deferred.promise.then(() => {\n      this.source.remove(row.getData());\n    }).catch((err) => {\n      // doing nothing\n    });\n\n    if (this.getSetting('delete.confirmDelete')) {\n      confirmEmitter.emit({\n        data: row.getData(),\n        source: this.source,\n        confirm: deferred,\n      });\n    } else {\n      deferred.resolve();\n    }\n  }\n\n  processDataChange(changes: any) {\n    if (this.shouldProcessChange(changes)) {\n      this.dataSet.setData(changes['elements']);\n      if (this.getSetting('selectMode') !== 'multi') {\n        const row = this.determineRowToSelect(changes);\n\n        if (row) {\n          this.onSelectRowSource.next(row);\n        } else {\n          this.onDeselectRowSource.next(null);\n        }\n      }\n    }\n  }\n\n  shouldProcessChange(changes: any): boolean {\n    if (['filter', 'sort', 'page', 'remove', 'refresh', 'load', 'paging'].indexOf(changes['action']) !== -1) {\n      return true;\n    } else if (['prepend', 'append'].indexOf(changes['action']) !== -1 && !this.getSetting('pager.display')) {\n      return true;\n    }\n\n    return false;\n  }\n\n  /**\n   * @breaking-change 1.8.0\n   * Need to add `| null` in return type\n   *\n   * TODO: move to selectable? Separate directive\n   */\n  determineRowToSelect(changes: any): Row {\n\n    if (['load', 'page', 'filter', 'sort', 'refresh'].indexOf(changes['action']) !== -1) {\n      return this.dataSet.select(this.getRowIndexToSelect());\n    }\n\n    if (this.shouldSkipSelection()) {\n      return null;\n    }\n\n    if (changes['action'] === 'remove') {\n      if (changes['elements'].length === 0) {\n        // we have to store which one to select as the data will be reloaded\n        this.dataSet.willSelectLastRow();\n      } else {\n        return this.dataSet.selectPreviousRow();\n      }\n    }\n    if (changes['action'] === 'append') {\n      // we have to store which one to select as the data will be reloaded\n      this.dataSet.willSelectLastRow();\n    }\n    if (changes['action'] === 'add') {\n      return this.dataSet.selectFirstRow();\n    }\n    if (changes['action'] === 'update') {\n      return this.dataSet.selectFirstRow();\n    }\n    if (changes['action'] === 'prepend') {\n      // we have to store which one to select as the data will be reloaded\n      this.dataSet.willSelectFirstRow();\n    }\n    return null;\n  }\n\n  prepareSource(source: any): DataSource {\n    const initialSource: any = this.getInitialSort();\n    if (initialSource && initialSource['field'] && initialSource['direction']) {\n      source.setSort([initialSource], false);\n    }\n    if (this.getSetting('pager.display') === true) {\n      source.setPaging(this.getPageToSelect(source), this.getSetting('pager.perPage'), false);\n    }\n\n    source.refresh();\n    return source;\n  }\n\n  getInitialSort() {\n    const sortConf: any = {};\n    this.getColumns().forEach((column: Column) => {\n      if (column.isSortable && column.defaultSortDirection) {\n        sortConf['field'] = column.id;\n        sortConf['direction'] = column.defaultSortDirection;\n        sortConf['compare'] = column.getCompareFunction();\n      }\n    });\n    return sortConf;\n  }\n\n  getSelectedRows(): Array<any> {\n    return this.dataSet.getRows()\n      .filter(r => r.isSelected);\n  }\n\n  selectAllRows(status: any) {\n    this.dataSet.getRows()\n      .forEach(r => r.isSelected = status);\n  }\n\n  getFirstRow(): Row {\n    return this.dataSet.getFirstRow();\n  }\n\n  getLastRow(): Row {\n    return this.dataSet.getLastRow();\n  }\n\n  private getSelectionInfo(): { perPage: number, page: number, selectedRowIndex: number, switchPageToSelectedRowPage: boolean } {\n    const switchPageToSelectedRowPage: boolean = this.getSetting('switchPageToSelectedRowPage');\n    const selectedRowIndex: number = Number(this.getSetting('selectedRowIndex', 0)) || 0;\n    const { perPage, page }: { perPage: number, page: number } = this.getSetting('pager');\n    return { perPage, page, selectedRowIndex, switchPageToSelectedRowPage };\n  }\n\n  private getRowIndexToSelect(): number {\n    const { switchPageToSelectedRowPage, selectedRowIndex, perPage } = this.getSelectionInfo();\n    const dataAmount: number = this.source.count();\n    /**\n     * source - contains all table data\n     * dataSet - contains data for current page\n     * selectedRowIndex - contains index for data in all data\n     *\n     * because of that, we need to count index for a specific row in page\n     * if\n     * `switchPageToSelectedRowPage` - we need to change page automatically\n     * `selectedRowIndex < dataAmount && selectedRowIndex >= 0` - index points to existing data\n     * (if index points to non-existing data and we calculate index for current page - we will get wrong selected row.\n     *  if we return index witch not points to existing data - no line will be highlighted)\n     */\n    return (\n      switchPageToSelectedRowPage &&\n      selectedRowIndex < dataAmount &&\n      selectedRowIndex >= 0\n    ) ?\n      selectedRowIndex % perPage :\n      selectedRowIndex;\n  }\n\n  private getPageToSelect(source: DataSource): number {\n    const { switchPageToSelectedRowPage, selectedRowIndex, perPage, page } = this.getSelectionInfo();\n    let pageToSelect: number = Math.max(1, page);\n    if (switchPageToSelectedRowPage && selectedRowIndex >= 0) {\n      pageToSelect = getPageForRowIndex(selectedRowIndex, perPage);\n    }\n    const maxPageAmount: number = Math.ceil(source.count() / perPage);\n    return maxPageAmount ? Math.min(pageToSelect, maxPageAmount) : pageToSelect;\n  }\n\n  private shouldSkipSelection(): boolean {\n    /**\n     * For backward compatibility when using `selectedRowIndex` with non-number values - ignored.\n     *\n     * Therefore, in order to select a row after some changes,\n     * the `selectedRowIndex` value must be invalid or >= 0 (< 0 means that no row is selected).\n     *\n     * `Number(value)` returns `NaN` on all invalid cases, and comparisons with `NaN` always return `false`.\n     *\n     * !!! We should skip a row only in cases when `selectedRowIndex` < 0\n     * because when < 0 all lines must be deselected\n     */\n    const selectedRowIndex = Number(this.getSetting('selectedRowIndex'));\n    return selectedRowIndex < 0;\n  }\n}\n","import { Subject } from 'rxjs';\nimport { Observable } from 'rxjs';\n\nexport abstract class DataSource {\n\n  protected onChangedSource = new Subject<any>();\n  protected onAddedSource = new Subject<any>();\n  protected onUpdatedSource = new Subject<any>();\n  protected onRemovedSource = new Subject<any>();\n\n  abstract getAll(): Promise<any>;\n  abstract getElements(): Promise<any>;\n  abstract getSort(): any;\n  abstract getFilter(): any;\n  abstract getPaging(): any;\n  abstract count(): number;\n\n  refresh() {\n    this.emitOnChanged('refresh');\n  }\n\n  load(data: Array<any>): Promise<any> {\n    this.emitOnChanged('load');\n    return Promise.resolve();\n  }\n\n  onChanged(): Observable<any> {\n    return this.onChangedSource.asObservable();\n  }\n\n  onAdded(): Observable<any> {\n    return this.onAddedSource.asObservable();\n  }\n\n  onUpdated(): Observable<any> {\n    return this.onUpdatedSource.asObservable();\n  }\n\n  onRemoved(): Observable<any> {\n    return this.onRemovedSource.asObservable();\n  }\n\n  prepend(element: any): Promise<any> {\n    this.emitOnAdded(element);\n    this.emitOnChanged('prepend');\n    return Promise.resolve();\n  }\n\n  append(element: any): Promise<any> {\n    this.emitOnAdded(element);\n    this.emitOnChanged('append');\n    return Promise.resolve();\n  }\n\n  add(element: any): Promise<any> {\n    this.emitOnAdded(element);\n    this.emitOnChanged('add');\n    return Promise.resolve();\n  }\n\n  remove(element: any): Promise<any> {\n    this.emitOnRemoved(element);\n    this.emitOnChanged('remove');\n    return Promise.resolve();\n  }\n\n  update(element: any, values: any): Promise<any> {\n    this.emitOnUpdated(element);\n    this.emitOnChanged('update');\n    return Promise.resolve();\n  }\n\n  empty(): Promise<any> {\n    this.emitOnChanged('empty');\n    return Promise.resolve();\n  }\n\n  setSort(conf: Array<any>, doEmit?: boolean) {\n    if (doEmit) {\n      this.emitOnChanged('sort');\n    }\n  }\n\n  setFilter(conf: Array<any>, andOperator?: boolean, doEmit?: boolean) {\n    if (doEmit) {\n      this.emitOnChanged('filter');\n    }\n  }\n\n  addFilter(fieldConf: {}, andOperator?: boolean, doEmit?: boolean) {\n    if (doEmit) {\n      this.emitOnChanged('filter');\n    }\n  }\n\n  setPaging(page: number, perPage: number, doEmit?: boolean) {\n    if (doEmit) {\n      this.emitOnChanged('paging');\n    }\n  }\n\n  setPage(page: number, doEmit?: boolean) {\n    if (doEmit) {\n      this.emitOnChanged('page');\n    }\n  }\n\n  protected emitOnRemoved(element: any) {\n    this.onRemovedSource.next(element);\n  }\n\n  protected emitOnUpdated(element: any) {\n    this.onUpdatedSource.next(element);\n  }\n\n  protected emitOnAdded(element: any) {\n    this.onAddedSource.next(element);\n  }\n\n  protected emitOnChanged(action: string) {\n    this.getElements().then((elements) => this.onChangedSource.next({\n      action: action,\n      elements: elements,\n      paging: this.getPaging(),\n      filter: this.getFilter(),\n      sort: this.getSort(),\n    }));\n  }\n}\n","export function compareValues(direction: any, a: any, b: any) {\n  if (a < b) {\n    return -1 * direction;\n  }\n  if (a > b) {\n    return direction;\n  }\n  return 0;\n}\n\nexport class LocalSorter {\n\n  static sort(data: Array<any>, field: string, direction: string, customCompare?: Function): Array<any> {\n\n    const dir: number = (direction === 'asc') ? 1 : -1;\n    const compare: Function = customCompare ? customCompare : compareValues;\n\n    return data.sort((a, b) => {\n      return compare.call(null, dir, a[field], b[field]);\n    });\n  }\n}\n","export function filterValues(value: string, search: string) {\n  return value.toString().toLowerCase().includes(search.toString().toLowerCase());\n}\n\nexport class LocalFilter {\n\n  static filter(data: Array<any>, field: string, search: string, customFilter?: Function): Array<any> {\n    const filter: Function = customFilter ? customFilter : filterValues;\n\n    return data.filter((el) => {\n      const value = typeof el[field] === 'undefined' || el[field] === null ? '' : el[field];\n      return filter.call(null, value, search);\n    });\n  }\n}\n","export class LocalPager {\n\n  static paginate(data: Array<any>, page: number, perPage: number): Array<any> {\n    return data.slice(perPage * (page - 1), perPage * page);\n  }\n}\n","import { LocalSorter } from './local.sorter';\nimport { LocalFilter } from './local.filter';\nimport { LocalPager } from './local.pager';\nimport { DataSource } from '../data-source';\nimport { deepExtend } from '../../helpers';\n\nexport class LocalDataSource extends DataSource {\n\n  protected data: Array<any> = [];\n  protected filteredAndSorted: Array<any> = [];\n  protected sortConf: Array<any> = [];\n  protected filterConf: any = {\n    filters: [],\n    andOperator: true,\n  };\n  protected pagingConf: any = {};\n\n  constructor(data: Array<any> = []) {\n    super();\n\n    this.data = data;\n  }\n\n  load(data: Array<any>): Promise<any> {\n    this.data = data;\n\n    return super.load(data);\n  }\n\n  prepend(element: any): Promise<any> {\n    this.reset(true);\n\n    this.data.unshift(element);\n    return super.prepend(element);\n  }\n\n  append(element: any): Promise<any> {\n    this.reset(true);\n\n    this.data.push(element);\n    return super.append(element);\n  }\n\n  add(element: any): Promise<any> {\n    this.data.push(element);\n\n    return super.add(element);\n  }\n\n  remove(element: any): Promise<any> {\n    this.data = this.data.filter(el => el !== element);\n\n    return super.remove(element);\n  }\n\n  update(element: any, values: any): Promise<any> {\n    return new Promise((resolve, reject) => {\n      this.find(element).then((found) => {\n        found = deepExtend(found, values);\n        super.update(found, values).then(resolve).catch(reject);\n      }).catch(reject);\n    });\n  }\n\n  find(element: any): Promise<any> {\n    const found = this.data.find(el => el === element);\n    if (found) {\n      return Promise.resolve(found);\n    }\n\n    return Promise.reject(new Error('Element was not found in the dataset'));\n  }\n\n  getElements(): Promise<any> {\n    const data = this.data.slice(0);\n    return Promise.resolve(this.prepareData(data));\n  }\n\n  getFilteredAndSorted(): Promise<any> {\n    let data = this.data.slice(0);\n    this.prepareData(data);\n    return Promise.resolve(this.filteredAndSorted);\n  }\n\n  getAll(): Promise<any> {\n    const data = this.data.slice(0);\n    return Promise.resolve(data);\n  }\n\n  reset(silent = false) {\n    if (silent) {\n      this.filterConf = {\n        filters: [],\n        andOperator: true,\n      };\n      this.sortConf = [];\n      this.pagingConf['page'] = 1;\n    } else {\n      this.setFilter([], true, false);\n      this.setSort([], false);\n      this.setPage(1);\n    }\n  }\n\n  empty(): Promise<any> {\n    this.data = [];\n\n    return super.empty();\n  }\n\n  count(): number {\n    return this.filteredAndSorted.length;\n  }\n\n  /**\n   *\n   * Array of conf objects\n   * [\n   *  {field: string, direction: asc|desc|null, compare: Function|null},\n   * ]\n   * @param conf\n   * @param doEmit\n   * @returns {LocalDataSource}\n   */\n  setSort(conf: Array<any>, doEmit = true): LocalDataSource {\n    if (conf !== null) {\n\n      conf.forEach((fieldConf) => {\n        if (!fieldConf['field'] || typeof fieldConf['direction'] === 'undefined') {\n          throw new Error('Sort configuration object is not valid');\n        }\n      });\n      this.sortConf = conf;\n    }\n\n    super.setSort(conf, doEmit);\n    return this;\n  }\n\n  /**\n   *\n   * Array of conf objects\n   * [\n   *  {field: string, search: string, filter: Function|null},\n   * ]\n   * @param conf\n   * @param andOperator\n   * @param doEmit\n   * @returns {LocalDataSource}\n   */\n  setFilter(conf: Array<any>, andOperator = true, doEmit = true): LocalDataSource {\n    if (conf && conf.length > 0) {\n      conf.forEach((fieldConf) => {\n        this.addFilter(fieldConf, andOperator, false);\n      });\n    } else {\n      this.filterConf = {\n        filters: [],\n        andOperator: true,\n      };\n    }\n    this.filterConf.andOperator = andOperator;\n    this.pagingConf['page'] = 1;\n\n    super.setFilter(conf, andOperator, doEmit);\n    return this;\n  }\n\n  addFilter(fieldConf: any, andOperator = true, doEmit: boolean = true): LocalDataSource {\n    if (!fieldConf['field'] || typeof fieldConf['search'] === 'undefined') {\n      throw new Error('Filter configuration object is not valid');\n    }\n\n    let found = false;\n    this.filterConf.filters.forEach((currentFieldConf: any, index: any) => {\n      if (currentFieldConf['field'] === fieldConf['field']) {\n        this.filterConf.filters[index] = fieldConf;\n        found = true;\n      }\n    });\n    if (!found) {\n      this.filterConf.filters.push(fieldConf);\n    }\n    this.filterConf.andOperator = andOperator;\n    super.addFilter(fieldConf, andOperator, doEmit);\n    return this;\n  }\n\n  setPaging(page: number, perPage: number, doEmit: boolean = true): LocalDataSource {\n    this.pagingConf['page'] = page;\n    this.pagingConf['perPage'] = perPage;\n\n    super.setPaging(page, perPage, doEmit);\n    return this;\n  }\n\n  setPage(page: number, doEmit: boolean = true): LocalDataSource {\n    this.pagingConf['page'] = page;\n    super.setPage(page, doEmit);\n    return this;\n  }\n\n  getSort(): any {\n    return this.sortConf;\n  }\n\n  getFilter(): any {\n    return this.filterConf;\n  }\n\n  getPaging(): any {\n    return this.pagingConf;\n  }\n\n  protected prepareData(data: Array<any>): Array<any> {\n    data = this.filter(data);\n    data = this.sort(data);\n    this.filteredAndSorted = data.slice(0);\n\n    return this.paginate(data);\n  }\n\n  protected sort(data: Array<any>): Array<any> {\n    if (this.sortConf) {\n      this.sortConf.forEach((fieldConf) => {\n        data = LocalSorter\n          .sort(data, fieldConf['field'], fieldConf['direction'], fieldConf['compare']);\n      });\n    }\n    return data;\n  }\n\n  // TODO: refactor?\n  protected filter(data: Array<any>): Array<any> {\n    if (this.filterConf.filters) {\n      if (this.filterConf.andOperator) {\n        this.filterConf.filters.forEach((fieldConf: any) => {\n          if (fieldConf['search'].length > 0) {\n            data = LocalFilter\n              .filter(data, fieldConf['field'], fieldConf['search'], fieldConf['filter']);\n          }\n        });\n      } else {\n        let mergedData: any = [];\n        this.filterConf.filters.forEach((fieldConf: any) => {\n          if (fieldConf['search'].length > 0) {\n            mergedData = mergedData.concat(LocalFilter\n              .filter(data, fieldConf['field'], fieldConf['search'], fieldConf['filter']));\n          }\n        });\n        // remove non unique items\n        data = mergedData.filter((elem: any, pos: any, arr: any) => {\n          return arr.indexOf(elem) === pos;\n        });\n      }\n    }\n    return data;\n  }\n\n  protected paginate(data: Array<any>): Array<any> {\n    if (this.pagingConf && this.pagingConf['page'] && this.pagingConf['perPage']) {\n      data = LocalPager.paginate(data, this.pagingConf['page'], this.pagingConf['perPage']);\n    }\n    return data;\n  }\n}\n","import { Component, Input, Output, SimpleChange, EventEmitter, OnChanges, OnDestroy } from '@angular/core';\nimport { Subject, Subscription } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\n\nimport { Grid } from './lib/grid';\nimport { DataSource } from './lib/data-source/data-source';\nimport { Row } from './lib/data-set/row';\nimport { deepExtend, getPageForRowIndex } from './lib/helpers';\nimport { LocalDataSource } from './lib/data-source/local/local.data-source';\n\n@Component({\n  selector: 'ng2-smart-table',\n  styleUrls: ['./ng2-smart-table.component.scss'],\n  templateUrl: './ng2-smart-table.component.html',\n})\nexport class Ng2SmartTableComponent implements OnChanges, OnDestroy {\n\n  @Input() source: any;\n  @Input() settings: Object = {};\n\n  @Output() rowSelect = new EventEmitter<any>();\n  @Output() rowDeselect = new EventEmitter<any>();\n  @Output() userRowSelect = new EventEmitter<any>();\n  @Output() delete = new EventEmitter<any>();\n  @Output() edit = new EventEmitter<any>();\n  @Output() create = new EventEmitter<any>();\n  @Output() custom = new EventEmitter<any>();\n  @Output() deleteConfirm = new EventEmitter<any>();\n  @Output() editConfirm = new EventEmitter<any>();\n  @Output() createConfirm = new EventEmitter<any>();\n  @Output() rowHover: EventEmitter<any> = new EventEmitter<any>();\n\n  tableClass: string;\n  tableId: string;\n  perPageSelect: any;\n  isHideHeader: boolean;\n  isHideSubHeader: boolean;\n  isPagerDisplay: boolean;\n  rowClassFunction: Function;\n\n  grid: Grid;\n  defaultSettings: Object = {\n    mode: 'inline', // inline|external|click-to-edit\n    selectMode: 'single', // single|multi\n    /**\n     * Points to an element in all data\n     *\n     * when < 0 all lines must be deselected\n     */\n    selectedRowIndex: 0,\n    switchPageToSelectedRowPage: false,\n    hideHeader: false,\n    hideSubHeader: false,\n    actions: {\n      columnTitle: 'Actions',\n      add: true,\n      edit: true,\n      delete: true,\n      custom: [],\n      position: 'left', // left|right\n    },\n    filter: {\n      inputClass: '',\n    },\n    edit: {\n      inputClass: '',\n      editButtonContent: 'Edit',\n      saveButtonContent: 'Update',\n      cancelButtonContent: 'Cancel',\n      confirmSave: false,\n    },\n    add: {\n      inputClass: '',\n      addButtonContent: 'Add New',\n      createButtonContent: 'Create',\n      cancelButtonContent: 'Cancel',\n      confirmCreate: false,\n    },\n    delete: {\n      deleteButtonContent: 'Delete',\n      confirmDelete: false,\n    },\n    attr: {\n      id: '',\n      class: '',\n    },\n    noDataMessage: 'No data found',\n    columns: {},\n    pager: {\n      display: true,\n      page: 1,\n      perPage: 10,\n    },\n    rowClassFunction: () => '',\n  };\n\n  isAllSelected: boolean = false;\n\n  private onSelectRowSubscription: Subscription;\n  private onDeselectRowSubscription: Subscription;\n  private destroyed$: Subject<void> = new Subject<void>();\n\n  ngOnChanges(changes: { [propertyName: string]: SimpleChange }) {\n    if (this.grid) {\n      if (changes['settings']) {\n        this.grid.setSettings(this.prepareSettings());\n      }\n      if (changes['source']) {\n        this.source = this.prepareSource();\n        this.grid.setSource(this.source);\n      }\n    } else {\n      this.initGrid();\n    }\n    this.tableId = this.grid.getSetting('attr.id');\n    this.tableClass = this.grid.getSetting('attr.class');\n    this.isHideHeader = this.grid.getSetting('hideHeader');\n    this.isHideSubHeader = this.grid.getSetting('hideSubHeader');\n    this.isPagerDisplay = this.grid.getSetting('pager.display');\n    this.isPagerDisplay = this.grid.getSetting('pager.display');\n    this.perPageSelect = this.grid.getSetting('pager.perPageSelect');\n    this.rowClassFunction = this.grid.getSetting('rowClassFunction');\n  }\n\n  ngOnDestroy(): void {\n    this.destroyed$.next();\n  }\n\n  selectRow(index: number, switchPageToSelectedRowPage: boolean = this.grid.getSetting('switchPageToSelectedRowPage')): void {\n    if (!this.grid) {\n      return;\n    }\n    this.grid.settings.selectedRowIndex = index;\n    if (this.isIndexOutOfRange(index)) {\n      // we need to deselect all rows if we got an incorrect index\n      this.deselectAllRows();\n      return;\n    }\n\n    if (switchPageToSelectedRowPage) {\n      const source: DataSource = this.source;\n      const paging: { page: number, perPage: number } = source.getPaging();\n      const page: number = getPageForRowIndex(index, paging.perPage);\n      index = index % paging.perPage;\n      this.grid.settings.selectedRowIndex = index;\n\n      if (page !== paging.page) {\n        source.setPage(page);\n        return;\n      }\n\n    }\n\n    const row: Row = this.grid.getRows()[index];\n    if (row) {\n      this.onSelectRow(row);\n    } else {\n      // we need to deselect all rows if we got an incorrect index\n      this.deselectAllRows();\n    }\n  }\n\n  private deselectAllRows(): void {\n    this.grid.dataSet.deselectAll();\n    this.emitDeselectRow(null);\n  }\n\n  editRowSelect(row: Row) {\n    if (this.grid.getSetting('selectMode') === 'multi') {\n      this.onMultipleSelectRow(row);\n    } else {\n      this.onSelectRow(row);\n    }\n  }\n\n  onUserSelectRow(row: Row) {\n    if (this.grid.getSetting('selectMode') !== 'multi') {\n      this.grid.selectRow(row);\n      this.emitUserSelectRow(row);\n      this.emitSelectRow(row);\n    }\n  }\n\n  onRowHover(row: Row) {\n    this.rowHover.emit(row);\n  }\n\n  multipleSelectRow(row: Row) {\n    this.grid.multipleSelectRow(row);\n    this.emitUserSelectRow(row);\n    this.emitSelectRow(row);\n  }\n\n  onSelectAllRows($event: any) {\n    this.isAllSelected = !this.isAllSelected;\n    this.grid.selectAllRows(this.isAllSelected);\n\n    this.emitUserSelectRow(null);\n    this.emitSelectRow(null);\n  }\n\n  onSelectRow(row: Row) {\n    this.grid.selectRow(row);\n    this.emitSelectRow(row);\n  }\n\n  onMultipleSelectRow(row: Row) {\n    this.emitSelectRow(row);\n  }\n\n  initGrid() {\n    this.source = this.prepareSource();\n    this.grid = new Grid(this.source, this.prepareSettings());\n\n    this.subscribeToOnSelectRow();\n    this.subscribeToOnDeselectRow();\n  }\n\n  prepareSource(): DataSource {\n    if (this.source instanceof DataSource) {\n      return this.source;\n    } else if (this.source instanceof Array) {\n      return new LocalDataSource(this.source);\n    }\n\n    return new LocalDataSource();\n  }\n\n  prepareSettings(): Object {\n    return deepExtend({}, this.defaultSettings, this.settings);\n  }\n\n  changePage($event: any) {\n    this.resetAllSelector();\n  }\n\n  sort($event: any) {\n    this.resetAllSelector();\n  }\n\n  filter($event: any) {\n    this.resetAllSelector();\n  }\n\n  private resetAllSelector() {\n    this.isAllSelected = false;\n  }\n\n  private emitUserSelectRow(row: Row) {\n    const selectedRows = this.grid.getSelectedRows();\n\n    this.userRowSelect.emit({\n      data: row ? row.getData() : null,\n      isSelected: row ? row.getIsSelected() : null,\n      source: this.source,\n      selected: selectedRows && selectedRows.length ? selectedRows.map((r: Row) => r.getData()) : [],\n    });\n  }\n\n  private emitSelectRow(row: Row) {\n    const data = {\n      data: row ? row.getData() : null,\n      isSelected: row ? row.getIsSelected() : null,\n      source: this.source,\n    };\n    this.rowSelect.emit(data);\n    if (!row?.isSelected) {\n      this.rowDeselect.emit(data);\n    }\n  }\n\n  private emitDeselectRow(row: Row): void {\n    this.rowDeselect.emit({\n      data: row ? row.getData() : null,\n      isSelected: row ? row.getIsSelected() : null,\n      source: this.source,\n    });\n  }\n\n  private isIndexOutOfRange(index: number): boolean {\n    const dataAmount: number = this.source?.count();\n    return index < 0 || (typeof dataAmount === 'number' && index >= dataAmount);\n  }\n\n  private subscribeToOnSelectRow(): void {\n    if (this.onSelectRowSubscription) {\n      this.onSelectRowSubscription.unsubscribe();\n    }\n    this.onSelectRowSubscription = this.grid.onSelectRow()\n      .pipe(takeUntil(this.destroyed$))\n      .subscribe((row) => {\n        this.emitSelectRow(row);\n      });\n  }\n\n  private subscribeToOnDeselectRow(): void {\n    if (this.onDeselectRowSubscription) {\n      this.onDeselectRowSubscription.unsubscribe();\n    }\n    this.onDeselectRowSubscription = this.grid.onDeselectRow()\n      .pipe(takeUntil(this.destroyed$))\n      .subscribe((row) => {\n        this.emitDeselectRow(row);\n      });\n  }\n\n}\n","<table [id]=\"tableId\" [ngClass]=\"tableClass\">\n\n  <thead ng2-st-thead *ngIf=\"!isHideHeader || !isHideSubHeader\"\n                      [grid]=\"grid\"\n                      [isAllSelected]=\"isAllSelected\"\n                      [source]=\"source\"\n                      [createConfirm]=\"createConfirm\"\n                      (create)=\"create.emit($event)\"\n                      (selectAllRows)=\"onSelectAllRows($event)\"\n                      (sort)=\"sort($event)\"\n                      (filter)=\"filter($event)\">\n  </thead>\n\n  <tbody ng2-st-tbody [grid]=\"grid\"\n                      [source]=\"source\"\n                      [deleteConfirm]=\"deleteConfirm\"\n                      [editConfirm]=\"editConfirm\"\n                      [rowClassFunction]=\"rowClassFunction\"\n                      (edit)=\"edit.emit($event)\"\n                      (delete)=\"delete.emit($event)\"\n                      (custom)=\"custom.emit($event)\"\n                      (userSelectRow)=\"onUserSelectRow($event)\"\n                      (editRowSelect)=\"editRowSelect($event)\"\n                      (multipleSelectRow)=\"multipleSelectRow($event)\"\n                      (rowHover)=\"onRowHover($event)\">\n  </tbody>\n\n</table>\n\n<ng2-smart-table-pager *ngIf=\"isPagerDisplay\"\n                        [source]=\"source\"\n                        [perPageSelect]=\"perPageSelect\"\n                        (changePage)=\"changePage($event)\">\n</ng2-smart-table-pager>\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\nimport { CellModule } from './components/cell/cell.module';\nimport { FilterModule } from './components/filter/filter.module';\nimport { PagerModule } from './components/pager/pager.module';\nimport { TBodyModule } from './components/tbody/tbody.module';\nimport { THeadModule } from './components/thead/thead.module';\n\nimport { Ng2SmartTableComponent } from './ng2-smart-table.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    CellModule,\n    FilterModule,\n    PagerModule,\n    TBodyModule,\n    THeadModule,\n  ],\n  declarations: [\n    Ng2SmartTableComponent,\n  ],\n  exports: [\n    Ng2SmartTableComponent,\n  ],\n})\nexport class Ng2SmartTableModule {\n}\n","export class ServerSourceConf {\n\n  protected static readonly SORT_FIELD_KEY = '_sort';\n  protected static readonly SORT_DIR_KEY = '_order';\n  protected static readonly PAGER_PAGE_KEY = '_page';\n  protected static readonly PAGER_LIMIT_KEY = '_limit';\n  protected static readonly FILTER_FIELD_KEY = '#field#_like';\n  protected static readonly TOTAL_KEY = 'x-total-count';\n  protected static readonly DATA_KEY = '';\n\n  endPoint: string;\n\n  sortFieldKey: string;\n  sortDirKey: string;\n  pagerPageKey: string;\n  pagerLimitKey: string;\n  filterFieldKey: string;\n  totalKey: string;\n  dataKey: string;\n\n  constructor(\n    { endPoint = '', sortFieldKey = '', sortDirKey = '',\n      pagerPageKey = '', pagerLimitKey = '', filterFieldKey = '', totalKey = '', dataKey = '' } = {}) {\n\n    this.endPoint = endPoint ? endPoint : '';\n\n    this.sortFieldKey = sortFieldKey ? sortFieldKey : ServerSourceConf.SORT_FIELD_KEY;\n    this.sortDirKey = sortDirKey ? sortDirKey : ServerSourceConf.SORT_DIR_KEY;\n    this.pagerPageKey = pagerPageKey ? pagerPageKey : ServerSourceConf.PAGER_PAGE_KEY;\n    this.pagerLimitKey = pagerLimitKey ? pagerLimitKey : ServerSourceConf.PAGER_LIMIT_KEY;\n    this.filterFieldKey = filterFieldKey ? filterFieldKey : ServerSourceConf.FILTER_FIELD_KEY;\n    this.totalKey = totalKey ? totalKey : ServerSourceConf.TOTAL_KEY;\n    this.dataKey = dataKey ? dataKey : ServerSourceConf.DATA_KEY;\n  }\n}\n","import { HttpClient, HttpParams } from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\nimport { LocalDataSource } from '../local/local.data-source';\nimport { ServerSourceConf } from './server-source.conf';\nimport { getDeepFromObject } from '../../helpers';\n\nimport { map } from 'rxjs/operators';\n\nexport class ServerDataSource extends LocalDataSource {\n\n  protected conf: ServerSourceConf;\n\n  protected lastRequestCount: number = 0;\n\n  constructor(protected http: HttpClient, conf: ServerSourceConf | {} = {}) {\n    super();\n\n    this.conf = new ServerSourceConf(conf);\n\n    if (!this.conf.endPoint) {\n      throw new Error('At least endPoint must be specified as a configuration of the server data source.');\n    }\n  }\n\n  count(): number {\n    return this.lastRequestCount;\n  }\n\n  getElements(): Promise<any> {\n    return this.requestElements()\n      .pipe(map(res => {\n        this.lastRequestCount = this.extractTotalFromResponse(res);\n        this.data = this.extractDataFromResponse(res);\n\n        return this.data;\n      })).toPromise();\n  }\n\n  /**\n   * Extracts array of data from server response\n   * @param res\n   * @returns {any}\n   */\n  protected extractDataFromResponse(res: any): Array<any> {\n    const rawData = res.body;\n    const data = !!this.conf.dataKey ? getDeepFromObject(rawData, this.conf.dataKey, []) : rawData;\n\n    if (data instanceof Array) {\n      return data;\n    }\n\n    throw new Error(`Data must be an array.\n    Please check that data extracted from the server response by the key '${this.conf.dataKey}' exists and is array.`);\n  }\n\n  /**\n   * Extracts total rows count from the server response\n   * Looks for the count in the heders first, then in the response body\n   * @param res\n   * @returns {any}\n   */\n  protected extractTotalFromResponse(res: any): number {\n    if (res.headers.has(this.conf.totalKey)) {\n      return +res.headers.get(this.conf.totalKey);\n    } else {\n      const rawData = res.body;\n      return getDeepFromObject(rawData, this.conf.totalKey, 0);\n    }\n  }\n\n  protected requestElements(): Observable<any> {\n    let httpParams = this.createRequesParams();\n    return this.http.get(this.conf.endPoint, { params: httpParams, observe: 'response' });\n  }\n\n  protected createRequesParams(): HttpParams {\n    let httpParams = new HttpParams();\n\n    httpParams = this.addSortRequestParams(httpParams);\n    httpParams = this.addFilterRequestParams(httpParams);\n    return this.addPagerRequestParams(httpParams);\n  }\n\n  protected addSortRequestParams(httpParams: HttpParams): HttpParams {\n    if (this.sortConf) {\n      this.sortConf.forEach((fieldConf) => {\n        httpParams = httpParams.set(this.conf.sortFieldKey, fieldConf.field);\n        httpParams = httpParams.set(this.conf.sortDirKey, fieldConf.direction.toUpperCase());\n      });\n    }\n\n    return httpParams;\n  }\n\n  protected addFilterRequestParams(httpParams: HttpParams): HttpParams {\n\n    if (this.filterConf.filters) {\n      this.filterConf.filters.forEach((fieldConf: any) => {\n        if (fieldConf['search']) {\n          httpParams = httpParams.set(this.conf.filterFieldKey.replace('#field#', fieldConf['field']), fieldConf['search']);\n        }\n      });\n    }\n\n    return httpParams;\n  }\n\n  protected addPagerRequestParams(httpParams: HttpParams): HttpParams {\n\n    if (this.pagingConf && this.pagingConf['page'] && this.pagingConf['perPage']) {\n      httpParams = httpParams.set(this.conf.pagerPageKey, this.pagingConf['page']);\n      httpParams = httpParams.set(this.conf.pagerLimitKey, this.pagingConf['perPage']);\n    }\n\n    return httpParams;\n  }\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":["i1.CustomViewComponent","i1","i2","i1.SelectEditorComponent","i2.TextareaEditorComponent","i3.CheckboxEditorComponent","i4.CompleterEditorComponent","i5.InputEditorComponent","i6","i1.CustomEditComponent","i2.DefaultEditComponent","i3","i1.ViewCellComponent","i2.EditCellComponent","i1.SelectFilterComponent","i2.CheckboxFilterComponent","i3.CompleterFilterComponent","i4.InputFilterComponent","i5","i1.CustomFilterComponent","i2.DefaultFilterComponent","i1.TbodyCustomComponent","i2.TbodyEditDeleteComponent","i3.TbodyCreateCancelComponent","i4.CellComponent","i1.TitleComponent","i1.CheckboxSelectAllComponent","i2.ActionsTitleComponent","i3.ColumnTitleComponent","i4","i1.AddButtonComponent","i2.FilterComponent","i1.ActionsComponent","i2.CellComponent","i1.TheadTitlesRowComponent","i2.TheadFitlersRowComponent","i3.TheadFormRowComponent","i1.Ng2SmartTableTheadComponent","i2.Ng2SmartTableTbodyComponent","i3.PagerComponent"],"mappings":"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"}}}